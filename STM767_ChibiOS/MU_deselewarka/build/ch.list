
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
                .align  2
                .thumb_func
                .global Reset_Handler
Reset_Handler:
                /* Interrupts are globally masked initially.*/
                cpsid   i
  200200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
  200202:	4827      	ldr	r0, [pc, #156]	; (2002a0 <endfiniloop+0x4>)
                msr     MSP, r0
  200204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
  200208:	4826      	ldr	r0, [pc, #152]	; (2002a4 <endfiniloop+0x8>)
                msr     PSP, r0
  20020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
  20020e:	4826      	ldr	r0, [pc, #152]	; (2002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
  200210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
  200214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
  200218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
  20021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
  20021c:	f380 8814 	msr	CONTROL, r0
                isb
  200220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
  200224:	f002 ff3c 	bl	2030a0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
  200228:	f002 fe32 	bl	202e90 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
  20022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
  200230:	491e      	ldr	r1, [pc, #120]	; (2002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
  200232:	4a1b      	ldr	r2, [pc, #108]	; (2002a0 <endfiniloop+0x4>)

00200234 <msloop>:
msloop:
                cmp     r1, r2
  200234:	4291      	cmp	r1, r2
                itt     lo
  200236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
  20023c:	e7fa      	bcc.n	200234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
  20023e:	491c      	ldr	r1, [pc, #112]	; (2002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
  200240:	4a18      	ldr	r2, [pc, #96]	; (2002a4 <endfiniloop+0x8>)

00200242 <psloop>:
psloop:
                cmp     r1, r2
  200242:	4291      	cmp	r1, r2
                itt     lo
  200244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
  20024a:	e7fa      	bcc.n	200242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
  20024c:	4919      	ldr	r1, [pc, #100]	; (2002b4 <endfiniloop+0x18>)
                ldr     r2, =_data_start
  20024e:	4a1a      	ldr	r2, [pc, #104]	; (2002b8 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
  200250:	4b1a      	ldr	r3, [pc, #104]	; (2002bc <endfiniloop+0x20>)

00200252 <dloop>:
dloop:
                cmp     r2, r3
  200252:	429a      	cmp	r2, r3
                ittt    lo
  200254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
  200256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
  20025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
  20025e:	e7f8      	bcc.n	200252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
  200260:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
  200262:	4917      	ldr	r1, [pc, #92]	; (2002c0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
  200264:	4a17      	ldr	r2, [pc, #92]	; (2002c4 <endfiniloop+0x28>)

00200266 <bloop>:
bloop:
                cmp     r1, r2
  200266:	4291      	cmp	r1, r2
                itt     lo
  200268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  20026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
  20026e:	e7fa      	bcc.n	200266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
  200270:	f002 fece 	bl	203010 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
  200274:	f002 ff0c 	bl	203090 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
  200278:	4c13      	ldr	r4, [pc, #76]	; (2002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
  20027a:	4d14      	ldr	r5, [pc, #80]	; (2002cc <endfiniloop+0x30>)

0020027c <initloop>:
initloop:
                cmp     r4, r5
  20027c:	42ac      	cmp	r4, r5
                bge     endinitloop
  20027e:	da03      	bge.n	200288 <endinitloop>
                ldr     r1, [r4], #4
  200280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200284:	4788      	blx	r1
                b       initloop
  200286:	e7f9      	b.n	20027c <initloop>

00200288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
  200288:	f002 f872 	bl	202370 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
  20028c:	4c10      	ldr	r4, [pc, #64]	; (2002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
  20028e:	4d11      	ldr	r5, [pc, #68]	; (2002d4 <endfiniloop+0x38>)

00200290 <finiloop>:
finiloop:
                cmp     r4, r5
  200290:	42ac      	cmp	r4, r5
                bge     endfiniloop
  200292:	da03      	bge.n	20029c <endfiniloop>
                ldr     r1, [r4], #4
  200294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200298:	4788      	blx	r1
                b       finiloop
  20029a:	e7f9      	b.n	200290 <finiloop>

0020029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
  20029c:	f002 bef0 	b.w	203080 <__default_exit>
                ldr     r0, =__main_stack_end__
  2002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
  2002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
  2002a8:	00200000 	.word	0x00200000
                ldr     r1, =__main_stack_base__
  2002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
  2002b0:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
  2002b4:	0800332c 	.word	0x0800332c
                ldr     r2, =_data_start
  2002b8:	20020000 	.word	0x20020000
                ldr     r3, =_data_end
  2002bc:	20020044 	.word	0x20020044
                ldr     r1, =_bss_start
  2002c0:	20000800 	.word	0x20000800
                ldr     r2, =_bss_end
  2002c4:	20001008 	.word	0x20001008
                ldr     r4, =__init_array_start
  2002c8:	00200200 	.word	0x00200200
                ldr     r5, =__init_array_end
  2002cc:	00200200 	.word	0x00200200
                ldr     r4, =__fini_array_start
  2002d0:	00200200 	.word	0x00200200
                ldr     r5, =__fini_array_end
  2002d4:	00200200 	.word	0x00200200

002002d8 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
  2002d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
  2002dc:	f8c1 d00c 	str.w	sp, [r1, #12]
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
                mov     sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
  2002e0:	f8d0 d00c 	ldr.w	sp, [r0, #12]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  2002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e8 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
  2002e8:	2300      	movs	r3, #0
                msr     BASEPRI, r3
  2002ea:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
  2002ee:	4628      	mov	r0, r5
                blx     r4
  2002f0:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
  2002f2:	2000      	movs	r0, #0
                bl      chThdExit
  2002f4:	f002 fe44 	bl	202f80 <chThdExit>

002002f8 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
  2002f8:	f002 fe6a 	bl	202fd0 <chSchDoReschedule>

002002fc <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
  2002fc:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
  2002fe:	e7fe      	b.n	2002fe <_port_exit_from_isr+0x2>

00200300 <chTMStartMeasurementX.constprop.0>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  200300:	4b01      	ldr	r3, [pc, #4]	; (200308 <chTMStartMeasurementX.constprop.0+0x8>)
  200302:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
  200304:	6083      	str	r3, [r0, #8]
}
  200306:	4770      	bx	lr
  200308:	e0001000 	.word	0xe0001000
  20030c:	00000000 	.word	0x00000000

00200310 <chSysPolledDelayX.constprop.0>:
  200310:	4a03      	ldr	r2, [pc, #12]	; (200320 <chSysPolledDelayX.constprop.0+0x10>)
  200312:	6851      	ldr	r1, [r2, #4]
  200314:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
  200316:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
  200318:	2b11      	cmp	r3, #17
  20031a:	d9fb      	bls.n	200314 <chSysPolledDelayX.constprop.0+0x4>
  }
}
  20031c:	4770      	bx	lr
  20031e:	bf00      	nop
  200320:	e0001000 	.word	0xe0001000
	...

00200330 <usb_lld_start_out.constprop.0>:
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
  200330:	68c2      	ldr	r2, [r0, #12]
  200332:	6993      	ldr	r3, [r2, #24]
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  200334:	b430      	push	{r4, r5}

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  200336:	681c      	ldr	r4, [r3, #0]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
  200338:	2c40      	cmp	r4, #64	; 0x40
  osp->totsize = osp->rxsize;
  20033a:	60dc      	str	r4, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
  20033c:	d902      	bls.n	200344 <usb_lld_start_out.constprop.0+0x14>
      osp->rxsize = EP0_MAX_OUTSIZE;
  20033e:	2140      	movs	r1, #64	; 0x40
  200340:	460c      	mov	r4, r1
  200342:	6019      	str	r1, [r3, #0]
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
  200344:	8a53      	ldrh	r3, [r2, #18]
  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  200346:	6815      	ldr	r5, [r2, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
  200348:	1e5a      	subs	r2, r3, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
  20034a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  20034c:	f005 0003 	and.w	r0, r5, #3
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
  200350:	4422      	add	r2, r4
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  200352:	2801      	cmp	r0, #1
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
  200354:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
  200358:	fb02 f303 	mul.w	r3, r2, r3
  20035c:	f103 0303 	add.w	r3, r3, #3
  200360:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
  200364:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
  200368:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  20036c:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  200370:	d10c      	bne.n	20038c <usb_lld_start_out.constprop.0+0x5c>
    /* Odd/even bit toggling for isochronous endpoint.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
  200372:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
  200376:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
  20037a:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
  20037e:	bf14      	ite	ne
  200380:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  200384:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
  200388:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
  20038c:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
  200390:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
}
  200394:	bc30      	pop	{r4, r5}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
  200396:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
  20039a:	4770      	bx	lr
  20039c:	0000      	movs	r0, r0
	...

002003a0 <otg_epout_handler.constprop.0>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
  2003a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
  2003a4:	4f23      	ldr	r7, [pc, #140]	; (200434 <otg_epout_handler.constprop.0+0x94>)
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
  2003a6:	4604      	mov	r4, r0
  stm32_otg_t *otgp = usbp->otg;
  2003a8:	6efe      	ldr	r6, [r7, #108]	; 0x6c
  uint32_t epint = otgp->oe[ep].DOEPINT;
  2003aa:	eb06 1340 	add.w	r3, r6, r0, lsl #5
  2003ae:	f8d3 5b08 	ldr.w	r5, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
  2003b2:	0728      	lsls	r0, r5, #28
  otgp->oe[ep].DOEPINT = epint;
  2003b4:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
  2003b8:	d503      	bpl.n	2003c2 <otg_epout_handler.constprop.0+0x22>
  2003ba:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
  2003be:	0719      	lsls	r1, r3, #28
  2003c0:	d430      	bmi.n	200424 <otg_epout_handler.constprop.0+0x84>
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
  2003c2:	07ea      	lsls	r2, r5, #31
  2003c4:	d52c      	bpl.n	200420 <otg_epout_handler.constprop.0+0x80>
  2003c6:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
  2003ca:	07db      	lsls	r3, r3, #31
  2003cc:	d528      	bpl.n	200420 <otg_epout_handler.constprop.0+0x80>
    osp = usbp->epc[ep]->out_state;
  2003ce:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  2003d2:	68d9      	ldr	r1, [r3, #12]
    if (ep == 0) {
  2003d4:	b95c      	cbnz	r4, 2003ee <otg_epout_handler.constprop.0+0x4e>
    osp = usbp->epc[ep]->out_state;
  2003d6:	698a      	ldr	r2, [r1, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
  2003d8:	8a48      	ldrh	r0, [r1, #18]
  2003da:	6855      	ldr	r5, [r2, #4]
  2003dc:	fbb5 f3f0 	udiv	r3, r5, r0
  2003e0:	fb00 5313 	mls	r3, r0, r3, r5
  2003e4:	b91b      	cbnz	r3, 2003ee <otg_epout_handler.constprop.0+0x4e>
          (osp->rxsize < osp->totsize)) {
  2003e6:	6810      	ldr	r0, [r2, #0]
  2003e8:	68d3      	ldr	r3, [r2, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
  2003ea:	4298      	cmp	r0, r3
  2003ec:	d30d      	bcc.n	20040a <otg_epout_handler.constprop.0+0x6a>
    _usb_isr_invoke_out_cb(usbp, ep);
  2003ee:	2201      	movs	r2, #1
  2003f0:	897b      	ldrh	r3, [r7, #10]
  2003f2:	68cd      	ldr	r5, [r1, #12]
  2003f4:	40a2      	lsls	r2, r4
  2003f6:	ea23 0302 	bic.w	r3, r3, r2
  2003fa:	817b      	strh	r3, [r7, #10]
  2003fc:	b185      	cbz	r5, 200420 <otg_epout_handler.constprop.0+0x80>
  2003fe:	4621      	mov	r1, r4
  200400:	462b      	mov	r3, r5
  200402:	480c      	ldr	r0, [pc, #48]	; (200434 <otg_epout_handler.constprop.0+0x94>)
}
  200404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _usb_isr_invoke_out_cb(usbp, ep);
  200408:	4718      	bx	r3
        osp->rxsize = osp->totsize - osp->rxsize;
  20040a:	1a1b      	subs	r3, r3, r0
        osp->rxcnt  = 0;
  20040c:	6054      	str	r4, [r2, #4]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20040e:	2120      	movs	r1, #32
        osp->rxsize = osp->totsize - osp->rxsize;
  200410:	6013      	str	r3, [r2, #0]
  200412:	f381 8811 	msr	BASEPRI, r1
        usb_lld_start_out(usbp, ep);
  200416:	4807      	ldr	r0, [pc, #28]	; (200434 <otg_epout_handler.constprop.0+0x94>)
  200418:	f7ff ff8a 	bl	200330 <usb_lld_start_out.constprop.0>
  20041c:	f384 8811 	msr	BASEPRI, r4
}
  200420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _usb_isr_invoke_setup_cb(usbp, ep);
  200424:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  200428:	4621      	mov	r1, r4
  20042a:	4638      	mov	r0, r7
  20042c:	68db      	ldr	r3, [r3, #12]
  20042e:	685b      	ldr	r3, [r3, #4]
  200430:	4798      	blx	r3
  200432:	e7c6      	b.n	2003c2 <otg_epout_handler.constprop.0+0x22>
  200434:	200009e8 	.word	0x200009e8
	...

00200440 <icuWidthcb_speed>:
    chSysUnlockFromISR();
}

static void icuWidthcb_speed(ICUDriver *icup)
{
    speed_rc  = icuGetWidthX(icup);               // ...X - can work anywhere
  200440:	6903      	ldr	r3, [r0, #16]
  200442:	681b      	ldr	r3, [r3, #0]
                                                    // return width in ticks
}
  200444:	4770      	bx	lr
  200446:	bf00      	nop
	...

00200450 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
  200450:	4a02      	ldr	r2, [pc, #8]	; (20045c <notify3+0xc>)
  200452:	6813      	ldr	r3, [r2, #0]
  200454:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  200458:	6013      	str	r3, [r2, #0]
}
  20045a:	4770      	bx	lr
  20045c:	40004800 	.word	0x40004800

00200460 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
  200460:	4a02      	ldr	r2, [pc, #8]	; (20046c <notify7+0xc>)
  200462:	6813      	ldr	r3, [r2, #0]
  200464:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  200468:	6013      	str	r3, [r2, #0]
}
  20046a:	4770      	bx	lr
  20046c:	40007800 	.word	0x40007800

00200470 <chCoreAllocAlignedWithOffset>:
  200470:	2320      	movs	r3, #32
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
  200472:	b4f0      	push	{r4, r5, r6, r7}
  200474:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  200478:	4d0d      	ldr	r5, [pc, #52]	; (2004b0 <chCoreAllocAlignedWithOffset+0x40>)
  20047a:	1e4e      	subs	r6, r1, #1
  size = MEM_ALIGN_NEXT(size, align);
  20047c:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  20047e:	682f      	ldr	r7, [r5, #0]
  size = MEM_ALIGN_NEXT(size, align);
  200480:	4430      	add	r0, r6
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  200482:	686c      	ldr	r4, [r5, #4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  200484:	443a      	add	r2, r7
  size = MEM_ALIGN_NEXT(size, align);
  200486:	ea00 0301 	and.w	r3, r0, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  20048a:	1990      	adds	r0, r2, r6
  20048c:	4008      	ands	r0, r1
  next = p + size;
  20048e:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  200490:	42a3      	cmp	r3, r4
  200492:	d807      	bhi.n	2004a4 <chCoreAllocAlignedWithOffset+0x34>
  200494:	429f      	cmp	r7, r3
  200496:	d805      	bhi.n	2004a4 <chCoreAllocAlignedWithOffset+0x34>
  ch_memcore.nextmem = next;
  200498:	602b      	str	r3, [r5, #0]
  20049a:	2300      	movs	r3, #0
  20049c:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
  2004a0:	bcf0      	pop	{r4, r5, r6, r7}
  2004a2:	4770      	bx	lr
    return NULL;
  2004a4:	2000      	movs	r0, #0
  2004a6:	2300      	movs	r3, #0
  2004a8:	f383 8811 	msr	BASEPRI, r3
}
  2004ac:	bcf0      	pop	{r4, r5, r6, r7}
  2004ae:	4770      	bx	lr
  2004b0:	20000d08 	.word	0x20000d08
	...

002004c0 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  2004c0:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
  2004c2:	68c3      	ldr	r3, [r0, #12]
void icu_lld_serve_interrupt(ICUDriver *icup) {
  2004c4:	4604      	mov	r4, r0
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
  2004c6:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
  2004c8:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  2004ca:	68dd      	ldr	r5, [r3, #12]
  2004cc:	4015      	ands	r5, r2
  2004ce:	b2ea      	uxtb	r2, r5
  icup->tim->SR = ~sr;
  2004d0:	43d2      	mvns	r2, r2
  2004d2:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
  2004d4:	7d0b      	ldrb	r3, [r1, #20]
  2004d6:	b97b      	cbnz	r3, 2004f8 <icu_lld_serve_interrupt+0x38>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  2004d8:	076b      	lsls	r3, r5, #29
  2004da:	d52b      	bpl.n	200534 <icu_lld_serve_interrupt+0x74>
      _icu_isr_invoke_width_cb(icup);
  2004dc:	7803      	ldrb	r3, [r0, #0]
  2004de:	2b04      	cmp	r3, #4
  2004e0:	d025      	beq.n	20052e <icu_lld_serve_interrupt+0x6e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  2004e2:	07a9      	lsls	r1, r5, #30
  2004e4:	d40f      	bmi.n	200506 <icu_lld_serve_interrupt+0x46>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
  2004e6:	07ed      	lsls	r5, r5, #31
  2004e8:	d505      	bpl.n	2004f6 <icu_lld_serve_interrupt+0x36>
    _icu_isr_invoke_overflow_cb(icup);
  2004ea:	6863      	ldr	r3, [r4, #4]
  2004ec:	4620      	mov	r0, r4
  2004ee:	691b      	ldr	r3, [r3, #16]
  2004f0:	4798      	blx	r3
  2004f2:	2303      	movs	r3, #3
  2004f4:	7023      	strb	r3, [r4, #0]
}
  2004f6:	bd38      	pop	{r3, r4, r5, pc}
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  2004f8:	07aa      	lsls	r2, r5, #30
  2004fa:	d50a      	bpl.n	200512 <icu_lld_serve_interrupt+0x52>
      _icu_isr_invoke_width_cb(icup);
  2004fc:	7803      	ldrb	r3, [r0, #0]
  2004fe:	2b04      	cmp	r3, #4
  200500:	d004      	beq.n	20050c <icu_lld_serve_interrupt+0x4c>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  200502:	076b      	lsls	r3, r5, #29
  200504:	d5ef      	bpl.n	2004e6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
  200506:	2304      	movs	r3, #4
  200508:	7023      	strb	r3, [r4, #0]
  20050a:	e7ec      	b.n	2004e6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_width_cb(icup);
  20050c:	688b      	ldr	r3, [r1, #8]
  20050e:	b1d3      	cbz	r3, 200546 <icu_lld_serve_interrupt+0x86>
  200510:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  200512:	076b      	lsls	r3, r5, #29
  200514:	d5e7      	bpl.n	2004e6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
  200516:	7823      	ldrb	r3, [r4, #0]
  200518:	2b04      	cmp	r3, #4
  20051a:	d1f4      	bne.n	200506 <icu_lld_serve_interrupt+0x46>
  20051c:	6861      	ldr	r1, [r4, #4]
  20051e:	68cb      	ldr	r3, [r1, #12]
  200520:	2b00      	cmp	r3, #0
  200522:	d0f0      	beq.n	200506 <icu_lld_serve_interrupt+0x46>
  200524:	4620      	mov	r0, r4
  200526:	4798      	blx	r3
  200528:	2304      	movs	r3, #4
  20052a:	7023      	strb	r3, [r4, #0]
  20052c:	e7db      	b.n	2004e6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_width_cb(icup);
  20052e:	688b      	ldr	r3, [r1, #8]
  200530:	b133      	cbz	r3, 200540 <icu_lld_serve_interrupt+0x80>
  200532:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  200534:	07a9      	lsls	r1, r5, #30
  200536:	d5d6      	bpl.n	2004e6 <icu_lld_serve_interrupt+0x26>
      _icu_isr_invoke_period_cb(icup);
  200538:	7823      	ldrb	r3, [r4, #0]
  20053a:	2b04      	cmp	r3, #4
  20053c:	d1e3      	bne.n	200506 <icu_lld_serve_interrupt+0x46>
  20053e:	e7ed      	b.n	20051c <icu_lld_serve_interrupt+0x5c>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  200540:	07a8      	lsls	r0, r5, #30
  200542:	d4ec      	bmi.n	20051e <icu_lld_serve_interrupt+0x5e>
  200544:	e7cf      	b.n	2004e6 <icu_lld_serve_interrupt+0x26>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  200546:	076a      	lsls	r2, r5, #29
  200548:	d4e9      	bmi.n	20051e <icu_lld_serve_interrupt+0x5e>
  20054a:	e7cc      	b.n	2004e6 <icu_lld_serve_interrupt+0x26>
  20054c:	0000      	movs	r0, r0
	...

00200550 <icu_lld_enable_notifications>:
  uint32_t dier = icup->tim->DIER;
  200550:	68c2      	ldr	r2, [r0, #12]
  200552:	68d3      	ldr	r3, [r2, #12]
void icu_lld_enable_notifications(ICUDriver *icup) {
  200554:	b410      	push	{r4}
  if ((dier & STM32_TIM_DIER_IRQ_MASK) == 0) {
  200556:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  20055a:	d10c      	bne.n	200576 <icu_lld_enable_notifications+0x26>
    if (icup->config->channel == ICU_CHANNEL_1) {
  20055c:	6841      	ldr	r1, [r0, #4]
    icup->tim->SR = 0;
  20055e:	6114      	str	r4, [r2, #16]
    if (icup->config->channel == ICU_CHANNEL_1) {
  200560:	7d08      	ldrb	r0, [r1, #20]
  200562:	b950      	cbnz	r0, 20057a <icu_lld_enable_notifications+0x2a>
      if (icup->config->width_cb != NULL)
  200564:	6888      	ldr	r0, [r1, #8]
  200566:	b170      	cbz	r0, 200586 <icu_lld_enable_notifications+0x36>
        dier |= STM32_TIM_DIER_CC1IE;
  200568:	f043 0306 	orr.w	r3, r3, #6
    if (icup->config->overflow_cb != NULL)
  20056c:	6909      	ldr	r1, [r1, #16]
  20056e:	b109      	cbz	r1, 200574 <icu_lld_enable_notifications+0x24>
      dier |= STM32_TIM_DIER_UIE;
  200570:	f043 0301 	orr.w	r3, r3, #1
    icup->tim->DIER = dier;
  200574:	60d3      	str	r3, [r2, #12]
}
  200576:	bc10      	pop	{r4}
  200578:	4770      	bx	lr
      if (icup->config->width_cb != NULL)
  20057a:	6888      	ldr	r0, [r1, #8]
  20057c:	2800      	cmp	r0, #0
  20057e:	d1f3      	bne.n	200568 <icu_lld_enable_notifications+0x18>
      dier |= STM32_TIM_DIER_CC2IE;
  200580:	f043 0304 	orr.w	r3, r3, #4
  200584:	e7f2      	b.n	20056c <icu_lld_enable_notifications+0x1c>
      dier |= STM32_TIM_DIER_CC1IE;
  200586:	f043 0302 	orr.w	r3, r3, #2
  20058a:	e7ef      	b.n	20056c <icu_lld_enable_notifications+0x1c>
  20058c:	0000      	movs	r0, r0
	...

00200590 <icu_lld_start>:
  if (icup->state == ICU_STOP) {
  200590:	7803      	ldrb	r3, [r0, #0]
  200592:	2b01      	cmp	r3, #1
void icu_lld_start(ICUDriver *icup) {
  200594:	b4f0      	push	{r4, r5, r6, r7}
  if (icup->state == ICU_STOP) {
  200596:	d03c      	beq.n	200612 <icu_lld_start+0x82>
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
  200598:	68c3      	ldr	r3, [r0, #12]
  20059a:	2200      	movs	r2, #0
  20059c:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  20059e:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  2005a0:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  2005a2:	625a      	str	r2, [r3, #36]	; 0x24
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  2005a4:	6841      	ldr	r1, [r0, #4]
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  2005a6:	2400      	movs	r4, #0
  psc = (icup->clock / icup->config->frequency) - 1;
  2005a8:	6882      	ldr	r2, [r0, #8]
  icup->tim->ARR  = 0xFFFF;
  2005aa:	f64f 75ff 	movw	r5, #65535	; 0xffff
  psc = (icup->clock / icup->config->frequency) - 1;
  2005ae:	684e      	ldr	r6, [r1, #4]
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  2005b0:	611c      	str	r4, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  2005b2:	698c      	ldr	r4, [r1, #24]
  psc = (icup->clock / icup->config->frequency) - 1;
  2005b4:	fbb2 f2f6 	udiv	r2, r2, r6
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  2005b8:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  psc = (icup->clock / icup->config->frequency) - 1;
  2005bc:	3a01      	subs	r2, #1
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  2005be:	60dc      	str	r4, [r3, #12]
  icup->tim->PSC  = psc;
  2005c0:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
  2005c2:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
  2005c4:	7d0a      	ldrb	r2, [r1, #20]
  2005c6:	b972      	cbnz	r2, 2005e6 <icu_lld_start+0x56>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
  2005c8:	2254      	movs	r2, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
  2005ca:	f240 2401 	movw	r4, #513	; 0x201
  2005ce:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
  2005d0:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
  2005d2:	780a      	ldrb	r2, [r1, #0]
  2005d4:	b1d2      	cbz	r2, 20060c <icu_lld_start+0x7c>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
  2005d6:	2213      	movs	r2, #19
  2005d8:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
  2005da:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
  2005de:	3334      	adds	r3, #52	; 0x34
  2005e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
  2005e4:	e00d      	b.n	200602 <icu_lld_start+0x72>
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
  2005e6:	2264      	movs	r2, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
  2005e8:	f44f 7481 	mov.w	r4, #258	; 0x102
  2005ec:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
  2005ee:	609a      	str	r2, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
  2005f0:	780a      	ldrb	r2, [r1, #0]
  2005f2:	b142      	cbz	r2, 200606 <icu_lld_start+0x76>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
  2005f4:	2231      	movs	r2, #49	; 0x31
  2005f6:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
  2005f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
  2005fc:	3338      	adds	r3, #56	; 0x38
  2005fe:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
  200602:	bcf0      	pop	{r4, r5, r6, r7}
  200604:	4770      	bx	lr
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
  200606:	2213      	movs	r2, #19
  200608:	621a      	str	r2, [r3, #32]
  20060a:	e7f5      	b.n	2005f8 <icu_lld_start+0x68>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
  20060c:	2231      	movs	r2, #49	; 0x31
  20060e:	621a      	str	r2, [r3, #32]
  200610:	e7e3      	b.n	2005da <icu_lld_start+0x4a>
    if (&ICUD8 == icup) {
  200612:	4b20      	ldr	r3, [pc, #128]	; (200694 <icu_lld_start+0x104>)
  200614:	4298      	cmp	r0, r3
  200616:	d004      	beq.n	200622 <icu_lld_start+0x92>
    if (&ICUD9 == icup) {
  200618:	4b1f      	ldr	r3, [pc, #124]	; (200698 <icu_lld_start+0x108>)
  20061a:	4298      	cmp	r0, r3
  20061c:	d022      	beq.n	200664 <icu_lld_start+0xd4>
  20061e:	68c3      	ldr	r3, [r0, #12]
  200620:	e7c0      	b.n	2005a4 <icu_lld_start+0x14>
      rccEnableTIM8(FALSE);
  200622:	4b1e      	ldr	r3, [pc, #120]	; (20069c <icu_lld_start+0x10c>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200624:	2570      	movs	r5, #112	; 0x70
  200626:	4a1e      	ldr	r2, [pc, #120]	; (2006a0 <icu_lld_start+0x110>)
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200628:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  20062c:	6c59      	ldr	r1, [r3, #68]	; 0x44
  20062e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
      rccResetTIM8();
  200632:	f04f 0c00 	mov.w	ip, #0
      icup->clock = STM32_TIMCLK2;
  200636:	4f1b      	ldr	r7, [pc, #108]	; (2006a4 <icu_lld_start+0x114>)
      rccEnableTIM8(FALSE);
  200638:	f041 0102 	orr.w	r1, r1, #2
  20063c:	6459      	str	r1, [r3, #68]	; 0x44
      rccResetTIM8();
  20063e:	6a59      	ldr	r1, [r3, #36]	; 0x24
  200640:	f041 0102 	orr.w	r1, r1, #2
  200644:	6259      	str	r1, [r3, #36]	; 0x24
  200646:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20064a:	f882 532c 	strb.w	r5, [r2, #812]	; 0x32c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20064e:	f8c2 6184 	str.w	r6, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  200652:	6056      	str	r6, [r2, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  200654:	f882 532e 	strb.w	r5, [r2, #814]	; 0x32e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200658:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20065c:	68c3      	ldr	r3, [r0, #12]
  20065e:	6054      	str	r4, [r2, #4]
      icup->clock = STM32_TIMCLK2;
  200660:	6087      	str	r7, [r0, #8]
    if (&ICUD9 == icup) {
  200662:	e79f      	b.n	2005a4 <icu_lld_start+0x14>
      rccEnableTIM9(FALSE);
  200664:	4b0d      	ldr	r3, [pc, #52]	; (20069c <icu_lld_start+0x10c>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200666:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20066a:	4a0d      	ldr	r2, [pc, #52]	; (2006a0 <icu_lld_start+0x110>)
      rccResetTIM9();
  20066c:	2700      	movs	r7, #0
      rccEnableTIM9(FALSE);
  20066e:	6c59      	ldr	r1, [r3, #68]	; 0x44
  200670:	2670      	movs	r6, #112	; 0x70
      icup->clock = STM32_TIMCLK2;
  200672:	4d0c      	ldr	r5, [pc, #48]	; (2006a4 <icu_lld_start+0x114>)
      rccEnableTIM9(FALSE);
  200674:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  200678:	6459      	str	r1, [r3, #68]	; 0x44
      rccResetTIM9();
  20067a:	6a59      	ldr	r1, [r3, #36]	; 0x24
  20067c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  200680:	6259      	str	r1, [r3, #36]	; 0x24
  200682:	625f      	str	r7, [r3, #36]	; 0x24
  200684:	f882 6318 	strb.w	r6, [r2, #792]	; 0x318
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  200688:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20068c:	68c3      	ldr	r3, [r0, #12]
  20068e:	6014      	str	r4, [r2, #0]
      icup->clock = STM32_TIMCLK2;
  200690:	6085      	str	r5, [r0, #8]
  200692:	e787      	b.n	2005a4 <icu_lld_start+0x14>
  200694:	20000878 	.word	0x20000878
  200698:	20000890 	.word	0x20000890
  20069c:	40023800 	.word	0x40023800
  2006a0:	e000e100 	.word	0xe000e100
  2006a4:	0cdfe600 	.word	0x0cdfe600
	...

002006b0 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
  2006b0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  2006b4:	b470      	push	{r4, r5, r6}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
  2006b6:	68dc      	ldr	r4, [r3, #12]
  2006b8:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
  2006ba:	6813      	ldr	r3, [r2, #0]
  2006bc:	60d3      	str	r3, [r2, #12]
  if (isp->txsize == 0) {
  2006be:	b9f3      	cbnz	r3, 2006fe <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  2006c0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  2006c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  2006c6:	eb02 1341 	add.w	r3, r2, r1, lsl #5
  2006ca:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  2006ce:	6823      	ldr	r3, [r4, #0]
  2006d0:	f003 0303 	and.w	r3, r3, #3
  2006d4:	2b01      	cmp	r3, #1
  2006d6:	d028      	beq.n	20072a <usb_lld_start_in+0x7a>
  2006d8:	b208      	sxth	r0, r1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  2006da:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
  2006de:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  2006e0:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
  2006e4:	fa03 f101 	lsl.w	r1, r3, r1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  2006e8:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
  2006ec:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
  2006f0:	f8d2 3834 	ldr.w	r3, [r2, #2100]	; 0x834
  2006f4:	4319      	orrs	r1, r3
}
  2006f6:	bc70      	pop	{r4, r5, r6}
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
  2006f8:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
  2006fc:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
  2006fe:	b909      	cbnz	r1, 200704 <usb_lld_start_in+0x54>
  200700:	2b40      	cmp	r3, #64	; 0x40
  200702:	d823      	bhi.n	20074c <usb_lld_start_in+0x9c>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
  200704:	8a25      	ldrh	r5, [r4, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
  200706:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
  200708:	1e68      	subs	r0, r5, #1
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
  20070a:	eb02 1641 	add.w	r6, r2, r1, lsl #5
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
  20070e:	4418      	add	r0, r3
  200710:	fbb0 f0f5 	udiv	r0, r0, r5
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
  200714:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
  200718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  20071c:	f8c6 3910 	str.w	r3, [r6, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  200720:	6823      	ldr	r3, [r4, #0]
  200722:	f003 0303 	and.w	r3, r3, #3
  200726:	2b01      	cmp	r3, #1
  200728:	d1d6      	bne.n	2006d8 <usb_lld_start_in+0x28>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
  20072a:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
  20072e:	b208      	sxth	r0, r1
  200730:	f413 7f80 	tst.w	r3, #256	; 0x100
  200734:	eb02 1341 	add.w	r3, r2, r1, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
  200738:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
  20073c:	bf14      	ite	ne
  20073e:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  200742:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
  200746:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
  20074a:	e7c6      	b.n	2006da <usb_lld_start_in+0x2a>
      isp->txsize = EP0_MAX_INSIZE;
  20074c:	2540      	movs	r5, #64	; 0x40
  20074e:	462b      	mov	r3, r5
  200750:	6015      	str	r5, [r2, #0]
  200752:	e7d7      	b.n	200704 <usb_lld_start_in+0x54>
	...

00200760 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  200760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  200764:	f002 0803 	and.w	r8, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  200768:	2400      	movs	r4, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  20076a:	f04f 0b0f 	mov.w	fp, #15
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  20076e:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
      m1 = 1 << bit;
  200772:	f04f 0a01 	mov.w	sl, #1
      m2 = 3 << (bit * 2);
  200776:	f04f 0903 	mov.w	r9, #3
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  20077a:	4645      	mov	r5, r8
  20077c:	e011      	b.n	2007a2 <_pal_lld_setgroupmode+0x42>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
  20077e:	6802      	ldr	r2, [r0, #0]
        if (bit < 8)
  200780:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
  200782:	ea06 0602 	and.w	r6, r6, r2
  200786:	ea46 0605 	orr.w	r6, r6, r5
  20078a:	6006      	str	r6, [r0, #0]
        if (bit < 8)
  20078c:	d83b      	bhi.n	200806 <_pal_lld_setgroupmode+0xa6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  20078e:	6a02      	ldr	r2, [r0, #32]
  200790:	ea22 0303 	bic.w	r3, r2, r3
  200794:	ea43 030e 	orr.w	r3, r3, lr
  200798:	6203      	str	r3, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  20079a:	0849      	lsrs	r1, r1, #1
  20079c:	d031      	beq.n	200802 <_pal_lld_setgroupmode+0xa2>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
  20079e:	00ad      	lsls	r5, r5, #2
    bit++;
  2007a0:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
  2007a2:	07cb      	lsls	r3, r1, #31
  2007a4:	d5f9      	bpl.n	20079a <_pal_lld_setgroupmode+0x3a>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2007a6:	6847      	ldr	r7, [r0, #4]
      m1 = 1 << bit;
  2007a8:	fa0a f604 	lsl.w	r6, sl, r4
      m2 = 3 << (bit * 2);
  2007ac:	0062      	lsls	r2, r4, #1
      altrmask = altr << ((bit & 7) * 4);
  2007ae:	f004 0307 	and.w	r3, r4, #7
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2007b2:	ea27 0606 	bic.w	r6, r7, r6
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  2007b6:	f1b8 0f02 	cmp.w	r8, #2
      m2 = 3 << (bit * 2);
  2007ba:	fa09 f202 	lsl.w	r2, r9, r2
      altrmask = altr << ((bit & 7) * 4);
  2007be:	ea4f 0383 	mov.w	r3, r3, lsl #2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2007c2:	6046      	str	r6, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  2007c4:	6887      	ldr	r7, [r0, #8]
  2007c6:	ea6f 0602 	mvn.w	r6, r2
      altrmask = altr << ((bit & 7) * 4);
  2007ca:	fa0c fe03 	lsl.w	lr, ip, r3
      m4 = 15 << ((bit & 7) * 4);
  2007ce:	fa0b f303 	lsl.w	r3, fp, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  2007d2:	ea27 0702 	bic.w	r7, r7, r2
  2007d6:	6087      	str	r7, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  2007d8:	68c7      	ldr	r7, [r0, #12]
  2007da:	ea27 0202 	bic.w	r2, r7, r2
  2007de:	60c2      	str	r2, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  2007e0:	d1cd      	bne.n	20077e <_pal_lld_setgroupmode+0x1e>
        if (bit < 8)
  2007e2:	2c07      	cmp	r4, #7
  2007e4:	d816      	bhi.n	200814 <_pal_lld_setgroupmode+0xb4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  2007e6:	6a02      	ldr	r2, [r0, #32]
  2007e8:	ea22 0303 	bic.w	r3, r2, r3
  2007ec:	ea43 030e 	orr.w	r3, r3, lr
  2007f0:	6203      	str	r3, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
  2007f2:	6803      	ldr	r3, [r0, #0]
    if (!mask)
  2007f4:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
  2007f6:	ea06 0603 	and.w	r6, r6, r3
  2007fa:	ea46 0605 	orr.w	r6, r6, r5
  2007fe:	6006      	str	r6, [r0, #0]
    if (!mask)
  200800:	d1cd      	bne.n	20079e <_pal_lld_setgroupmode+0x3e>
  }
}
  200802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  200806:	6a42      	ldr	r2, [r0, #36]	; 0x24
  200808:	ea22 0303 	bic.w	r3, r2, r3
  20080c:	ea43 030e 	orr.w	r3, r3, lr
  200810:	6243      	str	r3, [r0, #36]	; 0x24
  200812:	e7c2      	b.n	20079a <_pal_lld_setgroupmode+0x3a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  200814:	6a42      	ldr	r2, [r0, #36]	; 0x24
  200816:	ea22 0303 	bic.w	r3, r2, r3
  20081a:	ea43 030e 	orr.w	r3, r3, lr
  20081e:	6243      	str	r3, [r0, #36]	; 0x24
  200820:	e7e7      	b.n	2007f2 <_pal_lld_setgroupmode+0x92>
  200822:	bf00      	nop
	...

00200830 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
  200830:	b538      	push	{r3, r4, r5, lr}
  200832:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
  200836:	4604      	mov	r4, r0
  200838:	2b15      	cmp	r3, #21
  20083a:	d816      	bhi.n	20086a <_usb_ep0out+0x3a>
  20083c:	e8df f003 	tbb	[pc, r3]
  200840:	15151516 	.word	0x15151516
  200844:	15161515 	.word	0x15161515
  200848:	16161615 	.word	0x16161615
  20084c:	15151515 	.word	0x15151515
  200850:	15151515 	.word	0x15151515
  200854:	2c0b      	.short	0x2c0b
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
  200856:	68c3      	ldr	r3, [r0, #12]
  200858:	699b      	ldr	r3, [r3, #24]
  20085a:	685b      	ldr	r3, [r3, #4]
  20085c:	b92b      	cbnz	r3, 20086a <_usb_ep0out+0x3a>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
  20085e:	6d83      	ldr	r3, [r0, #88]	; 0x58
  200860:	b103      	cbz	r3, 200864 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
  200862:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
  200864:	2300      	movs	r3, #0
  200866:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
  20086a:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
  20086c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
  20086e:	6841      	ldr	r1, [r0, #4]
  200870:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  200874:	680d      	ldr	r5, [r1, #0]
  200876:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  20087a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
  20087e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
  200882:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  200886:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
  20088a:	b10d      	cbz	r5, 200890 <_usb_ep0out+0x60>
  20088c:	2106      	movs	r1, #6
  20088e:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
  200890:	2306      	movs	r3, #6
  200892:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
  200896:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
  200898:	220b      	movs	r2, #11
  20089a:	2320      	movs	r3, #32
  20089c:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
  2008a0:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2008a4:	8902      	ldrh	r2, [r0, #8]
  isp->txbuf  = buf;
  2008a6:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
  2008a8:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2008aa:	f042 0201 	orr.w	r2, r2, #1
  usb_lld_start_in(usbp, ep);
  2008ae:	4629      	mov	r1, r5
  isp = usbp->epc[ep]->in_state;
  2008b0:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2008b2:	8102      	strh	r2, [r0, #8]
  isp->txbuf  = buf;
  2008b4:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
  2008b6:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
  2008ba:	f7ff fef9 	bl	2006b0 <usb_lld_start_in>
  2008be:	f385 8811 	msr	BASEPRI, r5
}
  2008c2:	bd38      	pop	{r3, r4, r5, pc}
	...

002008d0 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
  2008d0:	b538      	push	{r3, r4, r5, lr}
  2008d2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
  2008d6:	4604      	mov	r4, r0
  2008d8:	2b15      	cmp	r3, #21
  2008da:	d821      	bhi.n	200920 <_usb_ep0in+0x50>
  2008dc:	e8df f003 	tbb	[pc, r3]
  2008e0:	2020200b 	.word	0x2020200b
  2008e4:	200b2020 	.word	0x200b2020
  2008e8:	47312120 	.word	0x47312120
  2008ec:	20202020 	.word	0x20202020
  2008f0:	20202020 	.word	0x20202020
  2008f4:	0b0b      	.short	0x0b0b
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
  2008f6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
  2008f8:	6841      	ldr	r1, [r0, #4]
  2008fa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  2008fe:	680d      	ldr	r5, [r1, #0]
  200900:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  200904:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
  200908:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
  20090c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  200910:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
  200914:	b10d      	cbz	r5, 20091a <_usb_ep0in+0x4a>
  200916:	2106      	movs	r1, #6
  200918:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
  20091a:	2306      	movs	r3, #6
  20091c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
  200920:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
  200922:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
  200926:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    if ((usbp->ep0n < max) &&
  20092a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    max = (size_t)get_hword(&usbp->setup[6]);
  20092c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if ((usbp->ep0n < max) &&
  200930:	4299      	cmp	r1, r3
  200932:	d206      	bcs.n	200942 <_usb_ep0in+0x72>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
  200934:	68c3      	ldr	r3, [r0, #12]
  200936:	8a1b      	ldrh	r3, [r3, #16]
  200938:	fbb1 f5f3 	udiv	r5, r1, r3
  20093c:	fb03 1515 	mls	r5, r3, r5, r1
    if ((usbp->ep0n < max) &&
  200940:	b1e5      	cbz	r5, 20097c <_usb_ep0in+0xac>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
  200942:	2214      	movs	r2, #20
  200944:	2320      	movs	r3, #32
  200946:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  20094a:	f383 8811 	msr	BASEPRI, r3
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  20094e:	8962      	ldrh	r2, [r4, #10]
  osp->rxbuf  = buf;
  200950:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
  200952:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_out(usbp, ep);
  200954:	4620      	mov	r0, r4
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200956:	f042 0201 	orr.w	r2, r2, #1
  osp = usbp->epc[ep]->out_state;
  20095a:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  20095c:	8162      	strh	r2, [r4, #10]
  osp->rxbuf  = buf;
  20095e:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
  200960:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
  200964:	f7ff fce4 	bl	200330 <usb_lld_start_out.constprop.0>
  200968:	f385 8811 	msr	BASEPRI, r5
}
  20096c:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
  20096e:	6d83      	ldr	r3, [r0, #88]	; 0x58
  200970:	b103      	cbz	r3, 200974 <_usb_ep0in+0xa4>
      usbp->ep0endcb(usbp);
  200972:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
  200974:	2300      	movs	r3, #0
  200976:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
  20097a:	bd38      	pop	{r3, r4, r5, pc}
  20097c:	2320      	movs	r3, #32
  20097e:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200982:	8902      	ldrh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
  200984:	4629      	mov	r1, r5
  isp = usbp->epc[ep]->in_state;
  200986:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200988:	f042 0201 	orr.w	r2, r2, #1
  isp = usbp->epc[ep]->in_state;
  20098c:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  20098e:	8102      	strh	r2, [r0, #8]
  isp->txbuf  = buf;
  200990:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
  200992:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
  200996:	f7ff fe8b 	bl	2006b0 <usb_lld_start_in>
  20099a:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
  20099e:	230a      	movs	r3, #10
  2009a0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
  2009a4:	bd38      	pop	{r3, r4, r5, pc}
  2009a6:	bf00      	nop
	...

002009b0 <_port_irq_epilogue>:
  2009b0:	2320      	movs	r3, #32
  2009b2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  2009b6:	4b11      	ldr	r3, [pc, #68]	; (2009fc <_port_irq_epilogue+0x4c>)
  2009b8:	685b      	ldr	r3, [r3, #4]
  2009ba:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  2009be:	d102      	bne.n	2009c6 <_port_irq_epilogue+0x16>
  2009c0:	f383 8811 	msr	BASEPRI, r3
  2009c4:	4770      	bx	lr
void _port_irq_epilogue(void) {
  2009c6:	b480      	push	{r7}
  2009c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  2009ca:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  2009ce:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  2009d2:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  2009d6:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  2009da:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  2009de:	4a08      	ldr	r2, [pc, #32]	; (200a00 <_port_irq_epilogue+0x50>)
  2009e0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  2009e2:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  2009e4:	6889      	ldr	r1, [r1, #8]
  2009e6:	6892      	ldr	r2, [r2, #8]
  2009e8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  2009ea:	bf8c      	ite	hi
  2009ec:	4a05      	ldrhi	r2, [pc, #20]	; (200a04 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  2009ee:	4a06      	ldrls	r2, [pc, #24]	; (200a08 <_port_irq_epilogue+0x58>)
  2009f0:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  2009f4:	46bd      	mov	sp, r7
  2009f6:	bc80      	pop	{r7}
  2009f8:	4770      	bx	lr
  2009fa:	bf00      	nop
  2009fc:	e000ed00 	.word	0xe000ed00
  200a00:	20000bb8 	.word	0x20000bb8
  200a04:	002002f9 	.word	0x002002f9
  200a08:	002002fc 	.word	0x002002fc
  200a0c:	00000000 	.word	0x00000000

00200a10 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  200a10:	b538      	push	{r3, r4, r5, lr}
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
  200a12:	4d17      	ldr	r5, [pc, #92]	; (200a70 <VectorA4+0x60>)
  200a14:	69ab      	ldr	r3, [r5, #24]
  200a16:	691c      	ldr	r4, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  200a18:	68da      	ldr	r2, [r3, #12]
  200a1a:	4014      	ands	r4, r2
  200a1c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
  200a1e:	43d2      	mvns	r2, r2
  200a20:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  200a22:	07a3      	lsls	r3, r4, #30
  200a24:	d504      	bpl.n	200a30 <VectorA4+0x20>
      (pwmp->config->channels[0].callback != NULL))
  200a26:	686b      	ldr	r3, [r5, #4]
  200a28:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  200a2a:	b10b      	cbz	r3, 200a30 <VectorA4+0x20>
    pwmp->config->channels[0].callback(pwmp);
  200a2c:	4628      	mov	r0, r5
  200a2e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  200a30:	0760      	lsls	r0, r4, #29
  200a32:	d504      	bpl.n	200a3e <VectorA4+0x2e>
      (pwmp->config->channels[1].callback != NULL))
  200a34:	686b      	ldr	r3, [r5, #4]
  200a36:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  200a38:	b10b      	cbz	r3, 200a3e <VectorA4+0x2e>
    pwmp->config->channels[1].callback(pwmp);
  200a3a:	480d      	ldr	r0, [pc, #52]	; (200a70 <VectorA4+0x60>)
  200a3c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  200a3e:	0721      	lsls	r1, r4, #28
  200a40:	d504      	bpl.n	200a4c <VectorA4+0x3c>
      (pwmp->config->channels[2].callback != NULL))
  200a42:	686b      	ldr	r3, [r5, #4]
  200a44:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  200a46:	b10b      	cbz	r3, 200a4c <VectorA4+0x3c>
    pwmp->config->channels[2].callback(pwmp);
  200a48:	4809      	ldr	r0, [pc, #36]	; (200a70 <VectorA4+0x60>)
  200a4a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  200a4c:	06e2      	lsls	r2, r4, #27
  200a4e:	d504      	bpl.n	200a5a <VectorA4+0x4a>
      (pwmp->config->channels[3].callback != NULL))
  200a50:	686b      	ldr	r3, [r5, #4]
  200a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  200a54:	b10b      	cbz	r3, 200a5a <VectorA4+0x4a>
    pwmp->config->channels[3].callback(pwmp);
  200a56:	4806      	ldr	r0, [pc, #24]	; (200a70 <VectorA4+0x60>)
  200a58:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
  200a5a:	07e3      	lsls	r3, r4, #31
  200a5c:	d504      	bpl.n	200a68 <VectorA4+0x58>
  200a5e:	686b      	ldr	r3, [r5, #4]
  200a60:	689b      	ldr	r3, [r3, #8]
  200a62:	b10b      	cbz	r3, 200a68 <VectorA4+0x58>
    pwmp->config->callback(pwmp);
  200a64:	4802      	ldr	r0, [pc, #8]	; (200a70 <VectorA4+0x60>)
  200a66:	4798      	blx	r3
}
  200a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
  200a6c:	f7ff bfa0 	b.w	2009b0 <_port_irq_epilogue>
  200a70:	200008a8 	.word	0x200008a8
	...

00200a80 <VectorAC>:
  200a80:	f7ff bfc6 	b.w	200a10 <VectorA4>
	...

00200a90 <VectorA0>:
OSAL_IRQ_HANDLER(STM32_TIM9_HANDLER) {
  200a90:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD9);
  200a92:	4803      	ldr	r0, [pc, #12]	; (200aa0 <VectorA0+0x10>)
  200a94:	f7ff fd14 	bl	2004c0 <icu_lld_serve_interrupt>
}
  200a98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200a9c:	f7ff bf88 	b.w	2009b0 <_port_irq_epilogue>
  200aa0:	20000890 	.word	0x20000890
	...

00200ab0 <VectorF0>:
OSAL_IRQ_HANDLER(STM32_TIM8_UP_HANDLER) {
  200ab0:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD8);
  200ab2:	4803      	ldr	r0, [pc, #12]	; (200ac0 <VectorF0+0x10>)
  200ab4:	f7ff fd04 	bl	2004c0 <icu_lld_serve_interrupt>
}
  200ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200abc:	f7ff bf78 	b.w	2009b0 <_port_irq_epilogue>
  200ac0:	20000878 	.word	0x20000878
	...

00200ad0 <VectorF8>:
  200ad0:	f7ff bfee 	b.w	200ab0 <VectorF0>
	...

00200ae0 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
  200ae0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  200ae2:	4b0b      	ldr	r3, [pc, #44]	; (200b10 <VectorB8+0x30>)
  200ae4:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  200ae6:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  200ae8:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  200aea:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  200aec:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  200aee:	d107      	bne.n	200b00 <VectorB8+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  200af0:	2002      	movs	r0, #2
  200af2:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  200af4:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  200af6:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  200af8:	68d1      	ldr	r1, [r2, #12]
  200afa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  200afe:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  200b00:	685b      	ldr	r3, [r3, #4]
  200b02:	4803      	ldr	r0, [pc, #12]	; (200b10 <VectorB8+0x30>)
  200b04:	685b      	ldr	r3, [r3, #4]
  200b06:	4798      	blx	r3
}
  200b08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200b0c:	f7ff bf50 	b.w	2009b0 <_port_irq_epilogue>
  200b10:	20000868 	.word	0x20000868
	...

00200b20 <Vector108>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
  200b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
  200b24:	4d22      	ldr	r5, [pc, #136]	; (200bb0 <Vector108+0x90>)
  200b26:	692b      	ldr	r3, [r5, #16]
  200b28:	079b      	lsls	r3, r3, #30
  200b2a:	d403      	bmi.n	200b34 <Vector108+0x14>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
  200b2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  200b30:	f7ff bf3e 	b.w	2009b0 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
  200b34:	2700      	movs	r7, #0
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  200b36:	2620      	movs	r6, #32
  200b38:	612f      	str	r7, [r5, #16]
  200b3a:	f386 8811 	msr	BASEPRI, r6
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.next;
  200b3e:	4c1d      	ldr	r4, [pc, #116]	; (200bb4 <Vector108+0x94>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
  200b40:	6a68      	ldr	r0, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
  200b42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  200b44:	f104 081c 	add.w	r8, r4, #28
  vtp = ch.vtlist.next;
  200b48:	69e3      	ldr	r3, [r4, #28]
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
  200b4a:	eba0 0c01 	sub.w	ip, r0, r1
  200b4e:	689a      	ldr	r2, [r3, #8]
  200b50:	4562      	cmp	r2, ip
  200b52:	d90e      	bls.n	200b72 <Vector108+0x52>
  200b54:	e01a      	b.n	200b8c <Vector108+0x6c>
  200b56:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->par);
  200b5a:	6918      	ldr	r0, [r3, #16]
  200b5c:	47c8      	blx	r9
  200b5e:	f386 8811 	msr	BASEPRI, r6
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.next;
  200b62:	69e3      	ldr	r3, [r4, #28]
  200b64:	6a68      	ldr	r0, [r5, #36]	; 0x24
  while (vtp->delta <= (systime_t)(now - ch.vtlist.lasttime)) {
  200b66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  200b68:	689a      	ldr	r2, [r3, #8]
  200b6a:	eba0 0c01 	sub.w	ip, r0, r1
  200b6e:	4562      	cmp	r2, ip
  200b70:	d80c      	bhi.n	200b8c <Vector108+0x6c>
    ch.vtlist.lasttime += vtp->delta;
  200b72:	440a      	add	r2, r1
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200b74:	6819      	ldr	r1, [r3, #0]
    fn = vtp->func;
  200b76:	f8d3 900c 	ldr.w	r9, [r3, #12]
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  200b7a:	4541      	cmp	r1, r8
    ch.vtlist.lasttime += vtp->delta;
  200b7c:	62a2      	str	r2, [r4, #40]	; 0x28
    vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  200b7e:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.next = vtp->next;
  200b82:	61e1      	str	r1, [r4, #28]
    vtp->func = NULL;
  200b84:	60df      	str	r7, [r3, #12]
    if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  200b86:	d1e6      	bne.n	200b56 <Vector108+0x36>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
  200b88:	60ef      	str	r7, [r5, #12]
  200b8a:	e7e4      	b.n	200b56 <Vector108+0x36>
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  200b8c:	4543      	cmp	r3, r8
  200b8e:	d008      	beq.n	200ba2 <Vector108+0x82>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.lasttime + vtp->delta - now;
  200b90:	440a      	add	r2, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  200b92:	4b07      	ldr	r3, [pc, #28]	; (200bb0 <Vector108+0x90>)
  200b94:	1a12      	subs	r2, r2, r0
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }
  port_timer_set_alarm(now + delta);
  200b96:	2a0a      	cmp	r2, #10
  200b98:	bf2c      	ite	cs
  200b9a:	1882      	addcs	r2, r0, r2
  200b9c:	f100 020a 	addcc.w	r2, r0, #10
  200ba0:	635a      	str	r2, [r3, #52]	; 0x34
  200ba2:	2300      	movs	r3, #0
  200ba4:	f383 8811 	msr	BASEPRI, r3
}
  200ba8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  200bac:	f7ff bf00 	b.w	2009b0 <_port_irq_epilogue>
  200bb0:	40000c00 	.word	0x40000c00
  200bb4:	20000bb8 	.word	0x20000bb8
	...

00200bc0 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200bc0:	4b08      	ldr	r3, [pc, #32]	; (200be4 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
  200bc2:	4809      	ldr	r0, [pc, #36]	; (200be8 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200bc4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  200bc6:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200bc8:	0d89      	lsrs	r1, r1, #22
  200bca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  200bce:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  200bd0:	058c      	lsls	r4, r1, #22
  200bd2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  200bd4:	b10a      	cbz	r2, 200bda <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  200bd6:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  200bd8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
  200bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200bde:	f7ff bee7 	b.w	2009b0 <_port_irq_epilogue>
  200be2:	bf00      	nop
  200be4:	40026400 	.word	0x40026400
  200be8:	20000d2c 	.word	0x20000d2c
  200bec:	00000000 	.word	0x00000000

00200bf0 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200bf0:	4b08      	ldr	r3, [pc, #32]	; (200c14 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  200bf2:	4809      	ldr	r0, [pc, #36]	; (200c18 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200bf4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  200bf6:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200bf8:	0c09      	lsrs	r1, r1, #16
  200bfa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  200bfe:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  200c00:	040c      	lsls	r4, r1, #16
  200c02:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  200c04:	b10a      	cbz	r2, 200c0a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  200c06:	6f40      	ldr	r0, [r0, #116]	; 0x74
  200c08:	4790      	blx	r2
}
  200c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200c0e:	f7ff becf 	b.w	2009b0 <_port_irq_epilogue>
  200c12:	bf00      	nop
  200c14:	40026400 	.word	0x40026400
  200c18:	20000d2c 	.word	0x20000d2c
  200c1c:	00000000 	.word	0x00000000

00200c20 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200c20:	4b08      	ldr	r3, [pc, #32]	; (200c44 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  200c22:	4809      	ldr	r0, [pc, #36]	; (200c48 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200c24:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  200c26:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200c28:	0989      	lsrs	r1, r1, #6
  200c2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  200c2e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  200c30:	018c      	lsls	r4, r1, #6
  200c32:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  200c34:	b10a      	cbz	r2, 200c3a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  200c36:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  200c38:	4790      	blx	r2
}
  200c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200c3e:	f7ff beb7 	b.w	2009b0 <_port_irq_epilogue>
  200c42:	bf00      	nop
  200c44:	40026400 	.word	0x40026400
  200c48:	20000d2c 	.word	0x20000d2c
  200c4c:	00000000 	.word	0x00000000

00200c50 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  200c50:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200c52:	4b07      	ldr	r3, [pc, #28]	; (200c70 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  200c54:	4807      	ldr	r0, [pc, #28]	; (200c74 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200c56:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  200c58:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200c5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  200c5e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  200c60:	b10a      	cbz	r2, 200c66 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  200c62:	6e40      	ldr	r0, [r0, #100]	; 0x64
  200c64:	4790      	blx	r2
}
  200c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200c6a:	f7ff bea1 	b.w	2009b0 <_port_irq_epilogue>
  200c6e:	bf00      	nop
  200c70:	40026400 	.word	0x40026400
  200c74:	20000d2c 	.word	0x20000d2c
	...

00200c80 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200c80:	4b08      	ldr	r3, [pc, #32]	; (200ca4 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  200c82:	4809      	ldr	r0, [pc, #36]	; (200ca8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200c84:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  200c86:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200c88:	0d89      	lsrs	r1, r1, #22
  200c8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  200c8e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  200c90:	058c      	lsls	r4, r1, #22
  200c92:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  200c94:	b10a      	cbz	r2, 200c9a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  200c96:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  200c98:	4790      	blx	r2
}
  200c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200c9e:	f7ff be87 	b.w	2009b0 <_port_irq_epilogue>
  200ca2:	bf00      	nop
  200ca4:	40026400 	.word	0x40026400
  200ca8:	20000d2c 	.word	0x20000d2c
  200cac:	00000000 	.word	0x00000000

00200cb0 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200cb0:	4b08      	ldr	r3, [pc, #32]	; (200cd4 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  200cb2:	4809      	ldr	r0, [pc, #36]	; (200cd8 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200cb4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  200cb6:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200cb8:	0c09      	lsrs	r1, r1, #16
  200cba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  200cbe:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  200cc0:	040c      	lsls	r4, r1, #16
  200cc2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  200cc4:	b10a      	cbz	r2, 200cca <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  200cc6:	6d40      	ldr	r0, [r0, #84]	; 0x54
  200cc8:	4790      	blx	r2
}
  200cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200cce:	f7ff be6f 	b.w	2009b0 <_port_irq_epilogue>
  200cd2:	bf00      	nop
  200cd4:	40026400 	.word	0x40026400
  200cd8:	20000d2c 	.word	0x20000d2c
  200cdc:	00000000 	.word	0x00000000

00200ce0 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200ce0:	4b08      	ldr	r3, [pc, #32]	; (200d04 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  200ce2:	4809      	ldr	r0, [pc, #36]	; (200d08 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200ce4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  200ce6:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200ce8:	0989      	lsrs	r1, r1, #6
  200cea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  200cee:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  200cf0:	018c      	lsls	r4, r1, #6
  200cf2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  200cf4:	b10a      	cbz	r2, 200cfa <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  200cf6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  200cf8:	4790      	blx	r2
}
  200cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200cfe:	f7ff be57 	b.w	2009b0 <_port_irq_epilogue>
  200d02:	bf00      	nop
  200d04:	40026400 	.word	0x40026400
  200d08:	20000d2c 	.word	0x20000d2c
  200d0c:	00000000 	.word	0x00000000

00200d10 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  200d10:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200d12:	4b07      	ldr	r3, [pc, #28]	; (200d30 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  200d14:	4807      	ldr	r0, [pc, #28]	; (200d34 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200d16:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  200d18:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200d1a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  200d1e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  200d20:	b10a      	cbz	r2, 200d26 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  200d22:	6c40      	ldr	r0, [r0, #68]	; 0x44
  200d24:	4790      	blx	r2
}
  200d26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200d2a:	f7ff be41 	b.w	2009b0 <_port_irq_epilogue>
  200d2e:	bf00      	nop
  200d30:	40026400 	.word	0x40026400
  200d34:	20000d2c 	.word	0x20000d2c
	...

00200d40 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200d40:	4b08      	ldr	r3, [pc, #32]	; (200d64 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  200d42:	4809      	ldr	r0, [pc, #36]	; (200d68 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200d44:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  200d46:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  200d48:	0d89      	lsrs	r1, r1, #22
  200d4a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  200d4e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  200d50:	058c      	lsls	r4, r1, #22
  200d52:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  200d54:	b10a      	cbz	r2, 200d5a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  200d56:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  200d58:	4790      	blx	r2
}
  200d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200d5e:	f7ff be27 	b.w	2009b0 <_port_irq_epilogue>
  200d62:	bf00      	nop
  200d64:	40026000 	.word	0x40026000
  200d68:	20000d2c 	.word	0x20000d2c
  200d6c:	00000000 	.word	0x00000000

00200d70 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200d70:	4b08      	ldr	r3, [pc, #32]	; (200d94 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  200d72:	4809      	ldr	r0, [pc, #36]	; (200d98 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200d74:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  200d76:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  200d78:	0c09      	lsrs	r1, r1, #16
  200d7a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  200d7e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  200d80:	040c      	lsls	r4, r1, #16
  200d82:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  200d84:	b10a      	cbz	r2, 200d8a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  200d86:	6b40      	ldr	r0, [r0, #52]	; 0x34
  200d88:	4790      	blx	r2
}
  200d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200d8e:	f7ff be0f 	b.w	2009b0 <_port_irq_epilogue>
  200d92:	bf00      	nop
  200d94:	40026000 	.word	0x40026000
  200d98:	20000d2c 	.word	0x20000d2c
  200d9c:	00000000 	.word	0x00000000

00200da0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200da0:	4b08      	ldr	r3, [pc, #32]	; (200dc4 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  200da2:	4809      	ldr	r0, [pc, #36]	; (200dc8 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200da4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  200da6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  200da8:	0989      	lsrs	r1, r1, #6
  200daa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  200dae:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  200db0:	018c      	lsls	r4, r1, #6
  200db2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  200db4:	b10a      	cbz	r2, 200dba <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  200db6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  200db8:	4790      	blx	r2
}
  200dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200dbe:	f7ff bdf7 	b.w	2009b0 <_port_irq_epilogue>
  200dc2:	bf00      	nop
  200dc4:	40026000 	.word	0x40026000
  200dc8:	20000d2c 	.word	0x20000d2c
  200dcc:	00000000 	.word	0x00000000

00200dd0 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  200dd0:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200dd2:	4b07      	ldr	r3, [pc, #28]	; (200df0 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  200dd4:	4807      	ldr	r0, [pc, #28]	; (200df4 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200dd6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  200dd8:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  200dda:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  200dde:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  200de0:	b10a      	cbz	r2, 200de6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  200de2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  200de4:	4790      	blx	r2
}
  200de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200dea:	f7ff bde1 	b.w	2009b0 <_port_irq_epilogue>
  200dee:	bf00      	nop
  200df0:	40026000 	.word	0x40026000
  200df4:	20000d2c 	.word	0x20000d2c
	...

00200e00 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200e00:	4b08      	ldr	r3, [pc, #32]	; (200e24 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  200e02:	4809      	ldr	r0, [pc, #36]	; (200e28 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200e04:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  200e06:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  200e08:	0d89      	lsrs	r1, r1, #22
  200e0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  200e0e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  200e10:	058c      	lsls	r4, r1, #22
  200e12:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  200e14:	b10a      	cbz	r2, 200e1a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  200e16:	69c0      	ldr	r0, [r0, #28]
  200e18:	4790      	blx	r2
}
  200e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200e1e:	f7ff bdc7 	b.w	2009b0 <_port_irq_epilogue>
  200e22:	bf00      	nop
  200e24:	40026000 	.word	0x40026000
  200e28:	20000d2c 	.word	0x20000d2c
  200e2c:	00000000 	.word	0x00000000

00200e30 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200e30:	4b08      	ldr	r3, [pc, #32]	; (200e54 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  200e32:	4809      	ldr	r0, [pc, #36]	; (200e58 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200e34:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  200e36:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  200e38:	0c09      	lsrs	r1, r1, #16
  200e3a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  200e3e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  200e40:	040c      	lsls	r4, r1, #16
  200e42:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  200e44:	b10a      	cbz	r2, 200e4a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  200e46:	6940      	ldr	r0, [r0, #20]
  200e48:	4790      	blx	r2
}
  200e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200e4e:	f7ff bdaf 	b.w	2009b0 <_port_irq_epilogue>
  200e52:	bf00      	nop
  200e54:	40026000 	.word	0x40026000
  200e58:	20000d2c 	.word	0x20000d2c
  200e5c:	00000000 	.word	0x00000000

00200e60 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200e60:	4b08      	ldr	r3, [pc, #32]	; (200e84 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  200e62:	4809      	ldr	r0, [pc, #36]	; (200e88 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200e64:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  200e66:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  200e68:	0989      	lsrs	r1, r1, #6
  200e6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  200e6e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  200e70:	018c      	lsls	r4, r1, #6
  200e72:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  200e74:	b10a      	cbz	r2, 200e7a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  200e76:	68c0      	ldr	r0, [r0, #12]
  200e78:	4790      	blx	r2
}
  200e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  200e7e:	f7ff bd97 	b.w	2009b0 <_port_irq_epilogue>
  200e82:	bf00      	nop
  200e84:	40026000 	.word	0x40026000
  200e88:	20000d2c 	.word	0x20000d2c
  200e8c:	00000000 	.word	0x00000000

00200e90 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  200e90:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200e92:	4b07      	ldr	r3, [pc, #28]	; (200eb0 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  200e94:	4a07      	ldr	r2, [pc, #28]	; (200eb4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  200e96:	6819      	ldr	r1, [r3, #0]
  200e98:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  200e9c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  200e9e:	6813      	ldr	r3, [r2, #0]
  200ea0:	b10b      	cbz	r3, 200ea6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  200ea2:	6850      	ldr	r0, [r2, #4]
  200ea4:	4798      	blx	r3
}
  200ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200eaa:	f7ff bd81 	b.w	2009b0 <_port_irq_epilogue>
  200eae:	bf00      	nop
  200eb0:	40026000 	.word	0x40026000
  200eb4:	20000d2c 	.word	0x20000d2c
	...

00200ec0 <Vector4C>:
OSAL_IRQ_HANDLER(Vector4C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  200ec0:	4a09      	ldr	r2, [pc, #36]	; (200ee8 <Vector4C+0x28>)
OSAL_IRQ_HANDLER(Vector4C) {
  200ec2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200ec4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 22);
  200ec6:	6813      	ldr	r3, [r2, #0]
  200ec8:	400b      	ands	r3, r1
  200eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  EXTI->PR = pr;
  200ece:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 22))
  200ed0:	b12b      	cbz	r3, 200ede <Vector4C+0x1e>
    EXTD1.config->channels[22].cb(&EXTD1, 22);
  200ed2:	4806      	ldr	r0, [pc, #24]	; (200eec <Vector4C+0x2c>)
  200ed4:	2116      	movs	r1, #22
  200ed6:	6843      	ldr	r3, [r0, #4]
  200ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
  200edc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
  200ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200ee2:	f7ff bd65 	b.w	2009b0 <_port_irq_epilogue>
  200ee6:	bf00      	nop
  200ee8:	40013c00 	.word	0x40013c00
  200eec:	20000860 	.word	0x20000860

00200ef0 <Vector48>:
  pr = EXTI->PR;
  200ef0:	4a09      	ldr	r2, [pc, #36]	; (200f18 <Vector48+0x28>)
OSAL_IRQ_HANDLER(Vector48) {
  200ef2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200ef4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 21);
  200ef6:	6813      	ldr	r3, [r2, #0]
  200ef8:	400b      	ands	r3, r1
  200efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  EXTI->PR = pr;
  200efe:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 21))
  200f00:	b12b      	cbz	r3, 200f0e <Vector48+0x1e>
    EXTD1.config->channels[21].cb(&EXTD1, 21);
  200f02:	4806      	ldr	r0, [pc, #24]	; (200f1c <Vector48+0x2c>)
  200f04:	2115      	movs	r1, #21
  200f06:	6843      	ldr	r3, [r0, #4]
  200f08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
  200f0c:	4798      	blx	r3
}
  200f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200f12:	f7ff bd4d 	b.w	2009b0 <_port_irq_epilogue>
  200f16:	bf00      	nop
  200f18:	40013c00 	.word	0x40013c00
  200f1c:	20000860 	.word	0x20000860

00200f20 <Vector170>:
  pr = EXTI->PR;
  200f20:	4a09      	ldr	r2, [pc, #36]	; (200f48 <Vector170+0x28>)
OSAL_IRQ_HANDLER(Vector170) {
  200f22:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200f24:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 20);
  200f26:	6813      	ldr	r3, [r2, #0]
  200f28:	400b      	ands	r3, r1
  200f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  EXTI->PR = pr;
  200f2e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 20))
  200f30:	b12b      	cbz	r3, 200f3e <Vector170+0x1e>
    EXTD1.config->channels[20].cb(&EXTD1, 20);
  200f32:	4806      	ldr	r0, [pc, #24]	; (200f4c <Vector170+0x2c>)
  200f34:	2114      	movs	r1, #20
  200f36:	6843      	ldr	r3, [r0, #4]
  200f38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
  200f3c:	4798      	blx	r3
}
  200f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200f42:	f7ff bd35 	b.w	2009b0 <_port_irq_epilogue>
  200f46:	bf00      	nop
  200f48:	40013c00 	.word	0x40013c00
  200f4c:	20000860 	.word	0x20000860

00200f50 <Vector138>:
  pr = EXTI->PR;
  200f50:	4a09      	ldr	r2, [pc, #36]	; (200f78 <Vector138+0x28>)
OSAL_IRQ_HANDLER(Vector138) {
  200f52:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200f54:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 19);
  200f56:	6813      	ldr	r3, [r2, #0]
  200f58:	400b      	ands	r3, r1
  200f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  EXTI->PR = pr;
  200f5e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 19))
  200f60:	b12b      	cbz	r3, 200f6e <Vector138+0x1e>
    EXTD1.config->channels[19].cb(&EXTD1, 19);
  200f62:	4806      	ldr	r0, [pc, #24]	; (200f7c <Vector138+0x2c>)
  200f64:	2113      	movs	r1, #19
  200f66:	6843      	ldr	r3, [r0, #4]
  200f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
  200f6c:	4798      	blx	r3
}
  200f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200f72:	f7ff bd1d 	b.w	2009b0 <_port_irq_epilogue>
  200f76:	bf00      	nop
  200f78:	40013c00 	.word	0x40013c00
  200f7c:	20000860 	.word	0x20000860

00200f80 <VectorE8>:
  pr = EXTI->PR;
  200f80:	4a09      	ldr	r2, [pc, #36]	; (200fa8 <VectorE8+0x28>)
OSAL_IRQ_HANDLER(VectorE8) {
  200f82:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200f84:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 18);
  200f86:	6813      	ldr	r3, [r2, #0]
  200f88:	400b      	ands	r3, r1
  200f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  EXTI->PR = pr;
  200f8e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 18))
  200f90:	b12b      	cbz	r3, 200f9e <VectorE8+0x1e>
    EXTD1.config->channels[18].cb(&EXTD1, 18);
  200f92:	4806      	ldr	r0, [pc, #24]	; (200fac <VectorE8+0x2c>)
  200f94:	2112      	movs	r1, #18
  200f96:	6843      	ldr	r3, [r0, #4]
  200f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
  200f9c:	4798      	blx	r3
}
  200f9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200fa2:	f7ff bd05 	b.w	2009b0 <_port_irq_epilogue>
  200fa6:	bf00      	nop
  200fa8:	40013c00 	.word	0x40013c00
  200fac:	20000860 	.word	0x20000860

00200fb0 <VectorE4>:
  pr = EXTI->PR;
  200fb0:	4a09      	ldr	r2, [pc, #36]	; (200fd8 <VectorE4+0x28>)
OSAL_IRQ_HANDLER(VectorE4) {
  200fb2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200fb4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 17);
  200fb6:	6813      	ldr	r3, [r2, #0]
  200fb8:	400b      	ands	r3, r1
  200fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  EXTI->PR = pr;
  200fbe:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 17))
  200fc0:	b12b      	cbz	r3, 200fce <VectorE4+0x1e>
    EXTD1.config->channels[17].cb(&EXTD1, 17);
  200fc2:	4806      	ldr	r0, [pc, #24]	; (200fdc <VectorE4+0x2c>)
  200fc4:	2111      	movs	r1, #17
  200fc6:	6843      	ldr	r3, [r0, #4]
  200fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  200fcc:	4798      	blx	r3
}
  200fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  200fd2:	f7ff bced 	b.w	2009b0 <_port_irq_epilogue>
  200fd6:	bf00      	nop
  200fd8:	40013c00 	.word	0x40013c00
  200fdc:	20000860 	.word	0x20000860

00200fe0 <Vector44>:
  pr = EXTI->PR;
  200fe0:	4a09      	ldr	r2, [pc, #36]	; (201008 <Vector44+0x28>)
OSAL_IRQ_HANDLER(Vector44) {
  200fe2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  200fe4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 16);
  200fe6:	6813      	ldr	r3, [r2, #0]
  200fe8:	400b      	ands	r3, r1
  200fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  EXTI->PR = pr;
  200fee:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 16))
  200ff0:	b12b      	cbz	r3, 200ffe <Vector44+0x1e>
    EXTD1.config->channels[16].cb(&EXTD1, 16);
  200ff2:	4806      	ldr	r0, [pc, #24]	; (20100c <Vector44+0x2c>)
  200ff4:	2110      	movs	r1, #16
  200ff6:	6843      	ldr	r3, [r0, #4]
  200ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  200ffc:	4798      	blx	r3
}
  200ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201002:	f7ff bcd5 	b.w	2009b0 <_port_irq_epilogue>
  201006:	bf00      	nop
  201008:	40013c00 	.word	0x40013c00
  20100c:	20000860 	.word	0x20000860

00201010 <VectorE0>:
  pr = EXTI->PR;
  201010:	4b1a      	ldr	r3, [pc, #104]	; (20107c <VectorE0+0x6c>)
OSAL_IRQ_HANDLER(VectorE0) {
  201012:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  201014:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
  201016:	681c      	ldr	r4, [r3, #0]
  201018:	4014      	ands	r4, r2
  20101a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
  EXTI->PR = pr;
  20101e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 10))
  201020:	0562      	lsls	r2, r4, #21
  201022:	d504      	bpl.n	20102e <VectorE0+0x1e>
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  201024:	4816      	ldr	r0, [pc, #88]	; (201080 <VectorE0+0x70>)
  201026:	210a      	movs	r1, #10
  201028:	6843      	ldr	r3, [r0, #4]
  20102a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  20102c:	4798      	blx	r3
  if (pr & (1U << 11))
  20102e:	0523      	lsls	r3, r4, #20
  201030:	d504      	bpl.n	20103c <VectorE0+0x2c>
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  201032:	4813      	ldr	r0, [pc, #76]	; (201080 <VectorE0+0x70>)
  201034:	210b      	movs	r1, #11
  201036:	6843      	ldr	r3, [r0, #4]
  201038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  20103a:	4798      	blx	r3
  if (pr & (1U << 12))
  20103c:	04e0      	lsls	r0, r4, #19
  20103e:	d504      	bpl.n	20104a <VectorE0+0x3a>
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  201040:	480f      	ldr	r0, [pc, #60]	; (201080 <VectorE0+0x70>)
  201042:	210c      	movs	r1, #12
  201044:	6843      	ldr	r3, [r0, #4]
  201046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  201048:	4798      	blx	r3
  if (pr & (1U << 13))
  20104a:	04a1      	lsls	r1, r4, #18
  20104c:	d504      	bpl.n	201058 <VectorE0+0x48>
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  20104e:	480c      	ldr	r0, [pc, #48]	; (201080 <VectorE0+0x70>)
  201050:	210d      	movs	r1, #13
  201052:	6843      	ldr	r3, [r0, #4]
  201054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  201056:	4798      	blx	r3
  if (pr & (1U << 14))
  201058:	0462      	lsls	r2, r4, #17
  20105a:	d504      	bpl.n	201066 <VectorE0+0x56>
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  20105c:	4808      	ldr	r0, [pc, #32]	; (201080 <VectorE0+0x70>)
  20105e:	210e      	movs	r1, #14
  201060:	6843      	ldr	r3, [r0, #4]
  201062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  201064:	4798      	blx	r3
  if (pr & (1U << 15))
  201066:	0423      	lsls	r3, r4, #16
  201068:	d504      	bpl.n	201074 <VectorE0+0x64>
    EXTD1.config->channels[15].cb(&EXTD1, 15);
  20106a:	4805      	ldr	r0, [pc, #20]	; (201080 <VectorE0+0x70>)
  20106c:	210f      	movs	r1, #15
  20106e:	6843      	ldr	r3, [r0, #4]
  201070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  201072:	4798      	blx	r3
}
  201074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  201078:	f7ff bc9a 	b.w	2009b0 <_port_irq_epilogue>
  20107c:	40013c00 	.word	0x40013c00
  201080:	20000860 	.word	0x20000860
	...

00201090 <Vector9C>:
  pr = EXTI->PR;
  201090:	4b17      	ldr	r3, [pc, #92]	; (2010f0 <Vector9C+0x60>)
OSAL_IRQ_HANDLER(Vector9C) {
  201092:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  201094:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
  201096:	681c      	ldr	r4, [r3, #0]
  201098:	4014      	ands	r4, r2
  20109a:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
  20109e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 5))
  2010a0:	06a3      	lsls	r3, r4, #26
  2010a2:	d504      	bpl.n	2010ae <Vector9C+0x1e>
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  2010a4:	4813      	ldr	r0, [pc, #76]	; (2010f4 <Vector9C+0x64>)
  2010a6:	2105      	movs	r1, #5
  2010a8:	6843      	ldr	r3, [r0, #4]
  2010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  2010ac:	4798      	blx	r3
  if (pr & (1U << 6))
  2010ae:	0660      	lsls	r0, r4, #25
  2010b0:	d504      	bpl.n	2010bc <Vector9C+0x2c>
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  2010b2:	4810      	ldr	r0, [pc, #64]	; (2010f4 <Vector9C+0x64>)
  2010b4:	2106      	movs	r1, #6
  2010b6:	6843      	ldr	r3, [r0, #4]
  2010b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  2010ba:	4798      	blx	r3
  if (pr & (1U << 7))
  2010bc:	0621      	lsls	r1, r4, #24
  2010be:	d504      	bpl.n	2010ca <Vector9C+0x3a>
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  2010c0:	480c      	ldr	r0, [pc, #48]	; (2010f4 <Vector9C+0x64>)
  2010c2:	2107      	movs	r1, #7
  2010c4:	6843      	ldr	r3, [r0, #4]
  2010c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  2010c8:	4798      	blx	r3
  if (pr & (1U << 8))
  2010ca:	05e2      	lsls	r2, r4, #23
  2010cc:	d504      	bpl.n	2010d8 <Vector9C+0x48>
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  2010ce:	4809      	ldr	r0, [pc, #36]	; (2010f4 <Vector9C+0x64>)
  2010d0:	2108      	movs	r1, #8
  2010d2:	6843      	ldr	r3, [r0, #4]
  2010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  2010d6:	4798      	blx	r3
  if (pr & (1U << 9))
  2010d8:	05a3      	lsls	r3, r4, #22
  2010da:	d504      	bpl.n	2010e6 <Vector9C+0x56>
    EXTD1.config->channels[9].cb(&EXTD1, 9);
  2010dc:	4805      	ldr	r0, [pc, #20]	; (2010f4 <Vector9C+0x64>)
  2010de:	2109      	movs	r1, #9
  2010e0:	6843      	ldr	r3, [r0, #4]
  2010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  2010e4:	4798      	blx	r3
}
  2010e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2010ea:	f7ff bc61 	b.w	2009b0 <_port_irq_epilogue>
  2010ee:	bf00      	nop
  2010f0:	40013c00 	.word	0x40013c00
  2010f4:	20000860 	.word	0x20000860
	...

00201100 <Vector68>:
  pr = EXTI->PR;
  201100:	4a08      	ldr	r2, [pc, #32]	; (201124 <Vector68+0x24>)
OSAL_IRQ_HANDLER(Vector68) {
  201102:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201104:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
  201106:	6813      	ldr	r3, [r2, #0]
  201108:	400b      	ands	r3, r1
  20110a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
  20110e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 4))
  201110:	b123      	cbz	r3, 20111c <Vector68+0x1c>
    EXTD1.config->channels[4].cb(&EXTD1, 4);
  201112:	4805      	ldr	r0, [pc, #20]	; (201128 <Vector68+0x28>)
  201114:	2104      	movs	r1, #4
  201116:	6843      	ldr	r3, [r0, #4]
  201118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  20111a:	4798      	blx	r3
}
  20111c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201120:	f7ff bc46 	b.w	2009b0 <_port_irq_epilogue>
  201124:	40013c00 	.word	0x40013c00
  201128:	20000860 	.word	0x20000860
  20112c:	00000000 	.word	0x00000000

00201130 <Vector64>:
  pr = EXTI->PR;
  201130:	4a08      	ldr	r2, [pc, #32]	; (201154 <Vector64+0x24>)
OSAL_IRQ_HANDLER(Vector64) {
  201132:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201134:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
  201136:	6813      	ldr	r3, [r2, #0]
  201138:	400b      	ands	r3, r1
  20113a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
  20113e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 3))
  201140:	b123      	cbz	r3, 20114c <Vector64+0x1c>
    EXTD1.config->channels[3].cb(&EXTD1, 3);
  201142:	4805      	ldr	r0, [pc, #20]	; (201158 <Vector64+0x28>)
  201144:	2103      	movs	r1, #3
  201146:	6843      	ldr	r3, [r0, #4]
  201148:	69db      	ldr	r3, [r3, #28]
  20114a:	4798      	blx	r3
}
  20114c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201150:	f7ff bc2e 	b.w	2009b0 <_port_irq_epilogue>
  201154:	40013c00 	.word	0x40013c00
  201158:	20000860 	.word	0x20000860
  20115c:	00000000 	.word	0x00000000

00201160 <Vector60>:
  pr = EXTI->PR;
  201160:	4a08      	ldr	r2, [pc, #32]	; (201184 <Vector60+0x24>)
OSAL_IRQ_HANDLER(Vector60) {
  201162:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201164:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
  201166:	6813      	ldr	r3, [r2, #0]
  201168:	400b      	ands	r3, r1
  20116a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
  20116e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 2))
  201170:	b123      	cbz	r3, 20117c <Vector60+0x1c>
    EXTD1.config->channels[2].cb(&EXTD1, 2);
  201172:	4805      	ldr	r0, [pc, #20]	; (201188 <Vector60+0x28>)
  201174:	2102      	movs	r1, #2
  201176:	6843      	ldr	r3, [r0, #4]
  201178:	695b      	ldr	r3, [r3, #20]
  20117a:	4798      	blx	r3
}
  20117c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201180:	f7ff bc16 	b.w	2009b0 <_port_irq_epilogue>
  201184:	40013c00 	.word	0x40013c00
  201188:	20000860 	.word	0x20000860
  20118c:	00000000 	.word	0x00000000

00201190 <Vector5C>:
  pr = EXTI->PR;
  201190:	4a08      	ldr	r2, [pc, #32]	; (2011b4 <Vector5C+0x24>)
OSAL_IRQ_HANDLER(Vector5C) {
  201192:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  201194:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
  201196:	6813      	ldr	r3, [r2, #0]
  201198:	400b      	ands	r3, r1
  20119a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
  20119e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 1))
  2011a0:	b123      	cbz	r3, 2011ac <Vector5C+0x1c>
    EXTD1.config->channels[1].cb(&EXTD1, 1);
  2011a2:	4805      	ldr	r0, [pc, #20]	; (2011b8 <Vector5C+0x28>)
  2011a4:	2101      	movs	r1, #1
  2011a6:	6843      	ldr	r3, [r0, #4]
  2011a8:	68db      	ldr	r3, [r3, #12]
  2011aa:	4798      	blx	r3
}
  2011ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2011b0:	f7ff bbfe 	b.w	2009b0 <_port_irq_epilogue>
  2011b4:	40013c00 	.word	0x40013c00
  2011b8:	20000860 	.word	0x20000860
  2011bc:	00000000 	.word	0x00000000

002011c0 <Vector58>:
  pr = EXTI->PR;
  2011c0:	4a08      	ldr	r2, [pc, #32]	; (2011e4 <Vector58+0x24>)
OSAL_IRQ_HANDLER(Vector58) {
  2011c2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2011c4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
  2011c6:	6813      	ldr	r3, [r2, #0]
  2011c8:	400b      	ands	r3, r1
  2011ca:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
  2011ce:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 0))
  2011d0:	b123      	cbz	r3, 2011dc <Vector58+0x1c>
    EXTD1.config->channels[0].cb(&EXTD1, 0);
  2011d2:	4805      	ldr	r0, [pc, #20]	; (2011e8 <Vector58+0x28>)
  2011d4:	2100      	movs	r1, #0
  2011d6:	6843      	ldr	r3, [r0, #4]
  2011d8:	685b      	ldr	r3, [r3, #4]
  2011da:	4798      	blx	r3
}
  2011dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2011e0:	f7ff bbe6 	b.w	2009b0 <_port_irq_epilogue>
  2011e4:	40013c00 	.word	0x40013c00
  2011e8:	20000860 	.word	0x20000860
  2011ec:	00000000 	.word	0x00000000

002011f0 <SVC_Handler>:
void SVC_Handler(void) {
  2011f0:	b480      	push	{r7}
  2011f2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  2011f4:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  2011f8:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  2011fa:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2011fe:	2300      	movs	r3, #0
  201200:	f383 8811 	msr	BASEPRI, r3
}
  201204:	46bd      	mov	sp, r7
  201206:	bc80      	pop	{r7}
  201208:	4770      	bx	lr
  20120a:	bf00      	nop
  20120c:	0000      	movs	r0, r0
	...

00201210 <chTMStopMeasurementX>:
  201210:	4b0e      	ldr	r3, [pc, #56]	; (20124c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201212:	4a0f      	ldr	r2, [pc, #60]	; (201250 <chTMStopMeasurementX+0x40>)
  201214:	685b      	ldr	r3, [r3, #4]
  201216:	6f52      	ldr	r2, [r2, #116]	; 0x74
  tmp->n++;
  201218:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  20121a:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  20121c:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
  20121e:	3101      	adds	r1, #1
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  201220:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
  201222:	6884      	ldr	r4, [r0, #8]
  tmp->n++;
  201224:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  201226:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
  201228:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
  20122c:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  20122e:	18e4      	adds	r4, r4, r3
  201230:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  201234:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  201236:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  201238:	bf88      	it	hi
  20123a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  20123c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  20123e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  201242:	bf38      	it	cc
  201244:	6003      	strcc	r3, [r0, #0]
}
  201246:	bc30      	pop	{r4, r5}
  201248:	4770      	bx	lr
  20124a:	bf00      	nop
  20124c:	e0001000 	.word	0xe0001000
  201250:	20000bb8 	.word	0x20000bb8
	...

00201260 <wakeup>:
  201260:	2320      	movs	r3, #32
  201262:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  201266:	f890 3020 	ldrb.w	r3, [r0, #32]
  20126a:	2b07      	cmp	r3, #7
  20126c:	d80d      	bhi.n	20128a <wakeup+0x2a>
  20126e:	e8df f003 	tbb	[pc, r3]
  201272:	0c27      	.short	0x0c27
  201274:	0408230c 	.word	0x0408230c
  201278:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
  20127a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20127c:	6893      	ldr	r3, [r2, #8]
  20127e:	3301      	adds	r3, #1
  201280:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  201282:	e9d0 3200 	ldrd	r3, r2, [r0]
  201286:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  201288:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
  20128a:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
  20128c:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  20128e:	4b0e      	ldr	r3, [pc, #56]	; (2012c8 <wakeup+0x68>)
  tp->state = CH_STATE_READY;
  201290:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  201294:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  201296:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  20129a:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20129c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  20129e:	689a      	ldr	r2, [r3, #8]
  2012a0:	428a      	cmp	r2, r1
  2012a2:	d2fb      	bcs.n	20129c <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
  2012a4:	685a      	ldr	r2, [r3, #4]
  2012a6:	2100      	movs	r1, #0
  2012a8:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
  2012ac:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  2012ae:	6058      	str	r0, [r3, #4]
  2012b0:	f381 8811 	msr	BASEPRI, r1
}
  2012b4:	bc10      	pop	{r4}
  2012b6:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  2012b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  2012ba:	2200      	movs	r2, #0
  2012bc:	601a      	str	r2, [r3, #0]
    break;
  2012be:	e7e4      	b.n	20128a <wakeup+0x2a>
  2012c0:	2300      	movs	r3, #0
  2012c2:	f383 8811 	msr	BASEPRI, r3
  2012c6:	4770      	bx	lr
  2012c8:	20000bb8 	.word	0x20000bb8
  2012cc:	00000000 	.word	0x00000000

002012d0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
  2012d0:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
  2012d2:	4b07      	ldr	r3, [pc, #28]	; (2012f0 <chSchReadyI+0x20>)
  } while (cp->prio >= tp->prio);
  2012d4:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  2012d6:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  2012da:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2012dc:	689a      	ldr	r2, [r3, #8]
  2012de:	428a      	cmp	r2, r1
  2012e0:	d2fb      	bcs.n	2012da <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
  2012e2:	685a      	ldr	r2, [r3, #4]
  2012e4:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
  2012e8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  2012ea:	6058      	str	r0, [r3, #4]
}
  2012ec:	4770      	bx	lr
  2012ee:	bf00      	nop
  2012f0:	20000bb8 	.word	0x20000bb8
	...

00201300 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  201300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  201302:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  201304:	42a0      	cmp	r0, r4
  201306:	d021      	beq.n	20134c <chEvtBroadcastFlagsI+0x4c>
  201308:	4607      	mov	r7, r0
  20130a:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  20130c:	2600      	movs	r6, #0
  20130e:	e004      	b.n	20131a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201310:	2a0b      	cmp	r2, #11
  201312:	d01c      	beq.n	20134e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
  201314:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  201316:	42a7      	cmp	r7, r4
  201318:	d018      	beq.n	20134c <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
  20131a:	68e3      	ldr	r3, [r4, #12]
  20131c:	432b      	orrs	r3, r5
  20131e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  201320:	b115      	cbz	r5, 201328 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
  201322:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  201324:	421d      	tst	r5, r3
  201326:	d0f5      	beq.n	201314 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
  201328:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
  20132c:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  20132e:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  201332:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  201334:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  201336:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  201338:	d1ea      	bne.n	201310 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  20133a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  20133c:	4213      	tst	r3, r2
  20133e:	d0e9      	beq.n	201314 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
  201340:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  201342:	f7ff ffc5 	bl	2012d0 <chSchReadyI>
    elp = elp->next;
  201346:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  201348:	42a7      	cmp	r7, r4
  20134a:	d1e6      	bne.n	20131a <chEvtBroadcastFlagsI+0x1a>
}
  20134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  20134e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  201350:	ea32 0303 	bics.w	r3, r2, r3
  201354:	d1de      	bne.n	201314 <chEvtBroadcastFlagsI+0x14>
  201356:	e7f3      	b.n	201340 <chEvtBroadcastFlagsI+0x40>
	...

00201360 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
  201360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  201364:	6d45      	ldr	r5, [r0, #84]	; 0x54
static void serve_interrupt(SerialDriver *sdp) {
  201366:	4604      	mov	r4, r0
  uint32_t cr1 = u->CR1;
  201368:	682e      	ldr	r6, [r5, #0]
  isr = u->ISR;
  20136a:	69ef      	ldr	r7, [r5, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  20136c:	0739      	lsls	r1, r7, #28
  u->ICR = isr;
  20136e:	622f      	str	r7, [r5, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  201370:	d14f      	bne.n	201412 <serve_interrupt+0xb2>
  if (isr & USART_ISR_LBDF) {
  201372:	05fa      	lsls	r2, r7, #23
  201374:	d441      	bmi.n	2013fa <serve_interrupt+0x9a>
  if (isr & USART_ISR_RXNE) {
  201376:	06bb      	lsls	r3, r7, #26
  201378:	d413      	bmi.n	2013a2 <serve_interrupt+0x42>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  20137a:	0630      	lsls	r0, r6, #24
  20137c:	d501      	bpl.n	201382 <serve_interrupt+0x22>
  20137e:	0639      	lsls	r1, r7, #24
  201380:	d462      	bmi.n	201448 <serve_interrupt+0xe8>
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_ISR_TC)) {
  201382:	0672      	lsls	r2, r6, #25
  201384:	d50b      	bpl.n	20139e <serve_interrupt+0x3e>
  201386:	067b      	lsls	r3, r7, #25
  201388:	d509      	bpl.n	20139e <serve_interrupt+0x3e>
  20138a:	2320      	movs	r3, #32
  20138c:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
  201390:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
  201394:	429a      	cmp	r2, r3
  201396:	d07c      	beq.n	201492 <serve_interrupt+0x132>
  201398:	2300      	movs	r3, #0
  20139a:	f383 8811 	msr	BASEPRI, r3
}
  20139e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  2013a2:	2320      	movs	r3, #32
  2013a4:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  2013a8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  2013aa:	f894 805c 	ldrb.w	r8, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  2013ae:	6963      	ldr	r3, [r4, #20]
  2013b0:	ea08 0802 	and.w	r8, r8, r2
  2013b4:	2b00      	cmp	r3, #0
  2013b6:	d078      	beq.n	2014aa <serve_interrupt+0x14a>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  2013b8:	6a23      	ldr	r3, [r4, #32]
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
  2013ba:	f104 010c 	add.w	r1, r4, #12
  2013be:	6a62      	ldr	r2, [r4, #36]	; 0x24
  2013c0:	4293      	cmp	r3, r2
  2013c2:	d077      	beq.n	2014b4 <serve_interrupt+0x154>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  2013c4:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  2013c6:	1c58      	adds	r0, r3, #1
  iqp->q_counter++;
  2013c8:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  2013ca:	6220      	str	r0, [r4, #32]
  iqp->q_counter++;
  2013cc:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  2013ce:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  2013d2:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
  2013d6:	429a      	cmp	r2, r3
  2013d8:	d301      	bcc.n	2013de <serve_interrupt+0x7e>
    iqp->q_wrptr = iqp->q_buffer;
  2013da:	69a3      	ldr	r3, [r4, #24]
  2013dc:	6223      	str	r3, [r4, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
  2013de:	68e0      	ldr	r0, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  2013e0:	4281      	cmp	r1, r0
  2013e2:	d006      	beq.n	2013f2 <serve_interrupt+0x92>
  tqp->next             = tp->queue.next;
  2013e4:	6803      	ldr	r3, [r0, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  2013e6:	2200      	movs	r2, #0
  2013e8:	60e3      	str	r3, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  2013ea:	6059      	str	r1, [r3, #4]
  2013ec:	6242      	str	r2, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
  2013ee:	f7ff ff6f 	bl	2012d0 <chSchReadyI>
  2013f2:	2300      	movs	r3, #0
  2013f4:	f383 8811 	msr	BASEPRI, r3
  2013f8:	e7bf      	b.n	20137a <serve_interrupt+0x1a>
  2013fa:	2320      	movs	r3, #32
  2013fc:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  201400:	f44f 7100 	mov.w	r1, #512	; 0x200
  201404:	1d20      	adds	r0, r4, #4
  201406:	f7ff ff7b 	bl	201300 <chEvtBroadcastFlagsI>
  20140a:	2300      	movs	r3, #0
  20140c:	f383 8811 	msr	BASEPRI, r3
  201410:	e7b1      	b.n	201376 <serve_interrupt+0x16>
    sts |= SD_OVERRUN_ERROR;
  201412:	f017 0108 	ands.w	r1, r7, #8
  201416:	bf18      	it	ne
  201418:	2180      	movne	r1, #128	; 0x80
  if (isr & USART_ISR_PE)
  20141a:	07fa      	lsls	r2, r7, #31
    sts |= SD_PARITY_ERROR;
  20141c:	bf48      	it	mi
  20141e:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
  201422:	07bb      	lsls	r3, r7, #30
  201424:	f04f 0320 	mov.w	r3, #32
    sts |= SD_FRAMING_ERROR;
  201428:	bf48      	it	mi
  20142a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
  20142e:	0778      	lsls	r0, r7, #29
    sts |= SD_NOISE_ERROR;
  201430:	bf48      	it	mi
  201432:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  201436:	f383 8811 	msr	BASEPRI, r3
  20143a:	1d20      	adds	r0, r4, #4
  20143c:	f7ff ff60 	bl	201300 <chEvtBroadcastFlagsI>
  201440:	2300      	movs	r3, #0
  201442:	f383 8811 	msr	BASEPRI, r3
  201446:	e794      	b.n	201372 <serve_interrupt+0x12>
  201448:	2320      	movs	r3, #32
  20144a:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  20144e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b = oqGetI(&sdp->oqueue);
  201450:	f104 0130 	add.w	r1, r4, #48	; 0x30
  201454:	6c62      	ldr	r2, [r4, #68]	; 0x44
  201456:	429a      	cmp	r2, r3
  201458:	d035      	beq.n	2014c6 <serve_interrupt+0x166>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  20145a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20145c:	1c58      	adds	r0, r3, #1
  oqp->q_counter++;
  20145e:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  201460:	64a0      	str	r0, [r4, #72]	; 0x48
  oqp->q_counter++;
  201462:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  201464:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  201468:	6c23      	ldr	r3, [r4, #64]	; 0x40
  20146a:	4298      	cmp	r0, r3
  20146c:	d301      	bcc.n	201472 <serve_interrupt+0x112>
    oqp->q_rdptr = oqp->q_buffer;
  20146e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  201470:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  201472:	6b20      	ldr	r0, [r4, #48]	; 0x30
  201474:	4281      	cmp	r1, r0
  201476:	d006      	beq.n	201486 <serve_interrupt+0x126>
  tqp->next             = tp->queue.next;
  201478:	6803      	ldr	r3, [r0, #0]
  tp->u.rdymsg = msg;
  20147a:	2200      	movs	r2, #0
  20147c:	6323      	str	r3, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  20147e:	6059      	str	r1, [r3, #4]
  201480:	6242      	str	r2, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
  201482:	f7ff ff25 	bl	2012d0 <chSchReadyI>
      u->TDR = b;
  201486:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  20148a:	2300      	movs	r3, #0
  20148c:	f383 8811 	msr	BASEPRI, r3
  201490:	e777      	b.n	201382 <serve_interrupt+0x22>
    if (oqIsEmptyI(&sdp->oqueue)) {
  201492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  201494:	2b00      	cmp	r3, #0
  201496:	f43f af7f 	beq.w	201398 <serve_interrupt+0x38>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
  20149a:	f026 0640 	bic.w	r6, r6, #64	; 0x40
  20149e:	1d20      	adds	r0, r4, #4
  2014a0:	2110      	movs	r1, #16
  2014a2:	f7ff ff2d 	bl	201300 <chEvtBroadcastFlagsI>
  2014a6:	602e      	str	r6, [r5, #0]
  2014a8:	e776      	b.n	201398 <serve_interrupt+0x38>
  2014aa:	2104      	movs	r1, #4
  2014ac:	1860      	adds	r0, r4, r1
  2014ae:	f7ff ff27 	bl	201300 <chEvtBroadcastFlagsI>
  2014b2:	e781      	b.n	2013b8 <serve_interrupt+0x58>
  if (iqIsFullI(iqp)) {
  2014b4:	6962      	ldr	r2, [r4, #20]
  2014b6:	2a00      	cmp	r2, #0
  2014b8:	d084      	beq.n	2013c4 <serve_interrupt+0x64>
  2014ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
  2014be:	1d20      	adds	r0, r4, #4
  2014c0:	f7ff ff1e 	bl	201300 <chEvtBroadcastFlagsI>
  2014c4:	e795      	b.n	2013f2 <serve_interrupt+0x92>
  if (oqIsEmptyI(oqp)) {
  2014c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  2014c8:	2a00      	cmp	r2, #0
  2014ca:	d0c6      	beq.n	20145a <serve_interrupt+0xfa>
  2014cc:	2108      	movs	r1, #8
  2014ce:	1d20      	adds	r0, r4, #4
  2014d0:	f7ff ff16 	bl	201300 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
  2014d4:	f026 0380 	bic.w	r3, r6, #128	; 0x80
  2014d8:	602b      	str	r3, [r5, #0]
  2014da:	e7d6      	b.n	20148a <serve_interrupt+0x12a>
  2014dc:	0000      	movs	r0, r0
	...

002014e0 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  2014e0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);
  2014e2:	4803      	ldr	r0, [pc, #12]	; (2014f0 <Vector188+0x10>)
  2014e4:	f7ff ff3c 	bl	201360 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
  2014e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2014ec:	f7ff ba60 	b.w	2009b0 <_port_irq_epilogue>
  2014f0:	20000924 	.word	0x20000924
	...

00201500 <VectorDC>:
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
  201500:	b508      	push	{r3, lr}
  serve_interrupt(&SD3);
  201502:	4803      	ldr	r0, [pc, #12]	; (201510 <VectorDC+0x10>)
  201504:	f7ff ff2c 	bl	201360 <serve_interrupt>
}
  201508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20150c:	f7ff ba50 	b.w	2009b0 <_port_irq_epilogue>
  201510:	200008c4 	.word	0x200008c4
	...

00201520 <chThdResumeI>:
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
  201520:	4603      	mov	r3, r0
  if (*trp != NULL) {
  201522:	6800      	ldr	r0, [r0, #0]
  201524:	b120      	cbz	r0, 201530 <chThdResumeI+0x10>
    *trp = NULL;
  201526:	2200      	movs	r2, #0
  201528:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
  20152a:	6241      	str	r1, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  20152c:	f7ff bed0 	b.w	2012d0 <chSchReadyI>
}
  201530:	4770      	bx	lr
  201532:	bf00      	nop
	...

00201540 <otg_epin_handler.constprop.0>:
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
  201540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
  201544:	4f2a      	ldr	r7, [pc, #168]	; (2015f0 <otg_epin_handler.constprop.0+0xb0>)
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
  201546:	4604      	mov	r4, r0
  stm32_otg_t *otgp = usbp->otg;
  201548:	6efe      	ldr	r6, [r7, #108]	; 0x6c
  uint32_t epint = otgp->ie[ep].DIEPINT;
  20154a:	eb06 1340 	add.w	r3, r6, r0, lsl #5
  20154e:	f8d3 5908 	ldr.w	r5, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
  201552:	07e9      	lsls	r1, r5, #31
  otgp->ie[ep].DIEPINT = epint;
  201554:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
  201558:	d503      	bpl.n	201562 <otg_epin_handler.constprop.0+0x22>
  20155a:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
  20155e:	07da      	lsls	r2, r3, #31
  201560:	d40a      	bmi.n	201578 <otg_epin_handler.constprop.0+0x38>
  if ((epint & DIEPINT_TXFE) &&
  201562:	062b      	lsls	r3, r5, #24
  201564:	d506      	bpl.n	201574 <otg_epin_handler.constprop.0+0x34>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
  201566:	2101      	movs	r1, #1
  201568:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
  20156c:	fa01 f404 	lsl.w	r4, r1, r4
  if ((epint & DIEPINT_TXFE) &&
  201570:	421c      	tst	r4, r3
  201572:	d118      	bne.n	2015a6 <otg_epin_handler.constprop.0+0x66>
}
  201574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
  201578:	eb07 0380 	add.w	r3, r7, r0, lsl #2
  20157c:	68d9      	ldr	r1, [r3, #12]
  20157e:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
  201580:	6818      	ldr	r0, [r3, #0]
  201582:	68da      	ldr	r2, [r3, #12]
  201584:	4290      	cmp	r0, r2
  201586:	d323      	bcc.n	2015d0 <otg_epin_handler.constprop.0+0x90>
      _usb_isr_invoke_in_cb(usbp, ep);
  201588:	2201      	movs	r2, #1
  20158a:	893b      	ldrh	r3, [r7, #8]
  20158c:	f8d1 8008 	ldr.w	r8, [r1, #8]
  201590:	40a2      	lsls	r2, r4
  201592:	ea23 0302 	bic.w	r3, r3, r2
  201596:	813b      	strh	r3, [r7, #8]
  201598:	f1b8 0f00 	cmp.w	r8, #0
  20159c:	d0e1      	beq.n	201562 <otg_epin_handler.constprop.0+0x22>
  20159e:	4621      	mov	r1, r4
  2015a0:	4638      	mov	r0, r7
  2015a2:	47c0      	blx	r8
  2015a4:	e7dd      	b.n	201562 <otg_epin_handler.constprop.0+0x22>
  2015a6:	2320      	movs	r3, #32
  2015a8:	f383 8811 	msr	BASEPRI, r3
    otgp->DIEPEMPMSK &= ~(1 << ep);
  2015ac:	f8d6 2834 	ldr.w	r2, [r6, #2100]	; 0x834
  chThdResumeI(trp, msg);
  2015b0:	2100      	movs	r1, #0
    usbp->txpending |= (1 << ep);
  2015b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    otgp->DIEPEMPMSK &= ~(1 << ep);
  2015b4:	ea22 0204 	bic.w	r2, r2, r4
  2015b8:	480e      	ldr	r0, [pc, #56]	; (2015f4 <otg_epin_handler.constprop.0+0xb4>)
    usbp->txpending |= (1 << ep);
  2015ba:	431c      	orrs	r4, r3
    otgp->DIEPEMPMSK &= ~(1 << ep);
  2015bc:	f8c6 2834 	str.w	r2, [r6, #2100]	; 0x834
    usbp->txpending |= (1 << ep);
  2015c0:	67bc      	str	r4, [r7, #120]	; 0x78
  2015c2:	f7ff ffad 	bl	201520 <chThdResumeI>
  2015c6:	2300      	movs	r3, #0
  2015c8:	f383 8811 	msr	BASEPRI, r3
}
  2015cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      isp->txsize = isp->totsize - isp->txsize;
  2015d0:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
  2015d2:	f04f 0800 	mov.w	r8, #0
  2015d6:	2120      	movs	r1, #32
  2015d8:	e9c3 2800 	strd	r2, r8, [r3]
  2015dc:	f381 8811 	msr	BASEPRI, r1
      usb_lld_start_in(usbp, ep);
  2015e0:	4621      	mov	r1, r4
  2015e2:	4638      	mov	r0, r7
  2015e4:	f7ff f864 	bl	2006b0 <usb_lld_start_in>
  2015e8:	f388 8811 	msr	BASEPRI, r8
  2015ec:	e7b9      	b.n	201562 <otg_epin_handler.constprop.0+0x22>
  2015ee:	bf00      	nop
  2015f0:	200009e8 	.word	0x200009e8
  2015f4:	20000a64 	.word	0x20000a64
	...

00201600 <icuWidthcb_steer>:
    steer_rc = icuGetWidthX(icup);                // ...X - can work anywhere
  201600:	6902      	ldr	r2, [r0, #16]
{
  201602:	b508      	push	{r3, lr}
    steer_rc = icuGetWidthX(icup);                // ...X - can work anywhere
  201604:	6812      	ldr	r2, [r2, #0]
  201606:	2320      	movs	r3, #32
  201608:	f383 8811 	msr	BASEPRI, r3
    chThdResumeI(&trp_rcmode, MSG_OK);            /* Resuming the thread with message.*/
  20160c:	2100      	movs	r1, #0
  20160e:	4803      	ldr	r0, [pc, #12]	; (20161c <icuWidthcb_steer+0x1c>)
  201610:	f7ff ff86 	bl	201520 <chThdResumeI>
  201614:	2300      	movs	r3, #0
  201616:	f383 8811 	msr	BASEPRI, r3
}
  20161a:	bd08      	pop	{r3, pc}
  20161c:	20000e38 	.word	0x20000e38

00201620 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
  201620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
  201624:	4d8e      	ldr	r5, [pc, #568]	; (201860 <Vector14C+0x240>)
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
  201626:	b083      	sub	sp, #12
  stm32_otg_t *otgp = usbp->otg;
  201628:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  sts  = otgp->GINTSTS;
  20162a:	6974      	ldr	r4, [r6, #20]
  sts &= otgp->GINTMSK;
  20162c:	69b3      	ldr	r3, [r6, #24]
  20162e:	401c      	ands	r4, r3
  if (sts & GINTSTS_USBRST) {
  201630:	f414 5a80 	ands.w	sl, r4, #4096	; 0x1000
  otgp->GINTSTS = sts;
  201634:	6174      	str	r4, [r6, #20]
  if (sts & GINTSTS_USBRST) {
  201636:	f040 8117 	bne.w	201868 <Vector14C+0x248>
  if (sts & GINTSTS_WKUPINT) {
  20163a:	2c00      	cmp	r4, #0
  20163c:	f2c0 80ab 	blt.w	201796 <Vector14C+0x176>
  if (sts & GINTSTS_USBSUSP) {
  201640:	0521      	lsls	r1, r4, #20
  201642:	f100 80c1 	bmi.w	2017c8 <Vector14C+0x1a8>
  if (sts & GINTSTS_ENUMDNE) {
  201646:	04a2      	lsls	r2, r4, #18
  201648:	d50c      	bpl.n	201664 <Vector14C+0x44>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
  20164a:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
  20164e:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
  201652:	68f3      	ldr	r3, [r6, #12]
  201654:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
  201658:	bf0c      	ite	eq
  20165a:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
  20165e:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
  201662:	60f3      	str	r3, [r6, #12]
  if (sts & GINTSTS_SOF) {
  201664:	0723      	lsls	r3, r4, #28
  201666:	d436      	bmi.n	2016d6 <Vector14C+0xb6>
  if (sts & GINTSTS_IISOIXFR) {
  201668:	02e7      	lsls	r7, r4, #11
  20166a:	d43c      	bmi.n	2016e6 <Vector14C+0xc6>
  if (sts & GINTSTS_IISOOXFR) {
  20166c:	02a1      	lsls	r1, r4, #10
  20166e:	f100 80ca 	bmi.w	201806 <Vector14C+0x1e6>
  if (sts & GINTSTS_RXFLVL) {
  201672:	06e2      	lsls	r2, r4, #27
  201674:	f100 80b8 	bmi.w	2017e8 <Vector14C+0x1c8>
  if (sts & GINTSTS_OEPINT) {
  201678:	0323      	lsls	r3, r4, #12
  src = otgp->DAINT;
  20167a:	f8d6 5818 	ldr.w	r5, [r6, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
  20167e:	d511      	bpl.n	2016a4 <Vector14C+0x84>
    if (src & (1 << 16))
  201680:	03ef      	lsls	r7, r5, #15
  201682:	f100 8190 	bmi.w	2019a6 <Vector14C+0x386>
    if (src & (1 << 17))
  201686:	03ae      	lsls	r6, r5, #14
  201688:	f100 8193 	bmi.w	2019b2 <Vector14C+0x392>
    if (src & (1 << 18))
  20168c:	0368      	lsls	r0, r5, #13
  20168e:	f100 8196 	bmi.w	2019be <Vector14C+0x39e>
    if (src & (1 << 19))
  201692:	0329      	lsls	r1, r5, #12
  201694:	f100 8199 	bmi.w	2019ca <Vector14C+0x3aa>
    if (src & (1 << 20))
  201698:	02ea      	lsls	r2, r5, #11
  20169a:	f100 819c 	bmi.w	2019d6 <Vector14C+0x3b6>
    if (src & (1 << 21))
  20169e:	02ab      	lsls	r3, r5, #10
  2016a0:	f100 815a 	bmi.w	201958 <Vector14C+0x338>
  if (sts & GINTSTS_IEPINT) {
  2016a4:	0367      	lsls	r7, r4, #13
  2016a6:	d511      	bpl.n	2016cc <Vector14C+0xac>
    if (src & (1 << 0))
  2016a8:	07ee      	lsls	r6, r5, #31
  2016aa:	f100 8178 	bmi.w	20199e <Vector14C+0x37e>
    if (src & (1 << 1))
  2016ae:	07ac      	lsls	r4, r5, #30
  2016b0:	f100 8171 	bmi.w	201996 <Vector14C+0x376>
    if (src & (1 << 2))
  2016b4:	0768      	lsls	r0, r5, #29
  2016b6:	f100 815e 	bmi.w	201976 <Vector14C+0x356>
    if (src & (1 << 3))
  2016ba:	0729      	lsls	r1, r5, #28
  2016bc:	f100 8161 	bmi.w	201982 <Vector14C+0x362>
    if (src & (1 << 4))
  2016c0:	06ea      	lsls	r2, r5, #27
  2016c2:	f100 8164 	bmi.w	20198e <Vector14C+0x36e>
    if (src & (1 << 5))
  2016c6:	06ab      	lsls	r3, r5, #26
  2016c8:	f100 814d 	bmi.w	201966 <Vector14C+0x346>
}
  2016cc:	b003      	add	sp, #12
  2016ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
  2016d2:	f7ff b96d 	b.w	2009b0 <_port_irq_epilogue>
    _usb_isr_invoke_sof_cb(usbp);
  2016d6:	686b      	ldr	r3, [r5, #4]
  2016d8:	68db      	ldr	r3, [r3, #12]
  2016da:	2b00      	cmp	r3, #0
  2016dc:	d0c4      	beq.n	201668 <Vector14C+0x48>
  2016de:	4860      	ldr	r0, [pc, #384]	; (201860 <Vector14C+0x240>)
  2016e0:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
  2016e2:	02e7      	lsls	r7, r4, #11
  2016e4:	d5c2      	bpl.n	20166c <Vector14C+0x4c>
  2016e6:	f8df 917c 	ldr.w	r9, [pc, #380]	; 201864 <Vector14C+0x244>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
  2016ea:	2700      	movs	r7, #0
  stm32_otg_t *otgp = usbp->otg;
  2016ec:	f8d5 806c 	ldr.w	r8, [r5, #108]	; 0x6c
      _usb_isr_invoke_in_cb(usbp, ep);
  2016f0:	f1a9 0b7c 	sub.w	fp, r9, #124	; 0x7c
  2016f4:	e006      	b.n	201704 <Vector14C+0xe4>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
  2016f6:	3701      	adds	r7, #1
  2016f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  2016fa:	b2ff      	uxtb	r7, r7
  2016fc:	689b      	ldr	r3, [r3, #8]
  2016fe:	429f      	cmp	r7, r3
  201700:	46ba      	mov	sl, r7
  201702:	d8b3      	bhi.n	20166c <Vector14C+0x4c>
  201704:	eb08 1347 	add.w	r3, r8, r7, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
  201708:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  20170c:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
  201710:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
  201714:	d1ef      	bne.n	2016f6 <Vector14C+0xd6>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
  201716:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
  20171a:	2a00      	cmp	r2, #0
  20171c:	daeb      	bge.n	2016f6 <Vector14C+0xd6>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
  20171e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  201722:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
  201726:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
  20172a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  20172e:	2a00      	cmp	r2, #0
  201730:	dbfb      	blt.n	20172a <Vector14C+0x10a>
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  201732:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
      otg_txfifo_flush(usbp, ep);
  201736:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  201738:	f04a 0320 	orr.w	r3, sl, #32
  20173c:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
  20173e:	6913      	ldr	r3, [r2, #16]
  201740:	0698      	lsls	r0, r3, #26
  201742:	d4fc      	bmi.n	20173e <Vector14C+0x11e>
  chSysPolledDelayX(cycles);
  201744:	f7fe fde4 	bl	200310 <chSysPolledDelayX.constprop.0>
      _usb_isr_invoke_in_cb(usbp, ep);
  201748:	2301      	movs	r3, #1
  20174a:	8929      	ldrh	r1, [r5, #8]
  20174c:	fa03 f207 	lsl.w	r2, r3, r7
  201750:	eb05 0387 	add.w	r3, r5, r7, lsl #2
  201754:	68db      	ldr	r3, [r3, #12]
  201756:	ea21 0102 	bic.w	r1, r1, r2
  20175a:	ea6f 0a02 	mvn.w	sl, r2
  20175e:	689b      	ldr	r3, [r3, #8]
  201760:	8129      	strh	r1, [r5, #8]
  201762:	b123      	cbz	r3, 20176e <Vector14C+0x14e>
  201764:	4639      	mov	r1, r7
  201766:	4658      	mov	r0, fp
  201768:	9201      	str	r2, [sp, #4]
  20176a:	4798      	blx	r3
  20176c:	9a01      	ldr	r2, [sp, #4]
  20176e:	2320      	movs	r3, #32
  201770:	f383 8811 	msr	BASEPRI, r3
      otgp->DIEPEMPMSK &= ~(1 << ep);
  201774:	f8d8 1834 	ldr.w	r1, [r8, #2100]	; 0x834
  chThdResumeI(trp, msg);
  201778:	4648      	mov	r0, r9
      usbp->txpending |= (1 << ep);
  20177a:	6fab      	ldr	r3, [r5, #120]	; 0x78
      otgp->DIEPEMPMSK &= ~(1 << ep);
  20177c:	ea0a 0a01 	and.w	sl, sl, r1
  201780:	2100      	movs	r1, #0
      usbp->txpending |= (1 << ep);
  201782:	4313      	orrs	r3, r2
      otgp->DIEPEMPMSK &= ~(1 << ep);
  201784:	f8c8 a834 	str.w	sl, [r8, #2100]	; 0x834
      usbp->txpending |= (1 << ep);
  201788:	67ab      	str	r3, [r5, #120]	; 0x78
  20178a:	f7ff fec9 	bl	201520 <chThdResumeI>
  20178e:	2300      	movs	r3, #0
  201790:	f383 8811 	msr	BASEPRI, r3
  201794:	e7af      	b.n	2016f6 <Vector14C+0xd6>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
  201796:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
  20179a:	0798      	lsls	r0, r3, #30
  20179c:	f040 80d5 	bne.w	20194a <Vector14C+0x32a>
    otgp->DCTL &= ~DCTL_RWUSIG;
  2017a0:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
  usbp->state = usbp->saved_state;
  2017a4:	f895 1068 	ldrb.w	r1, [r5, #104]	; 0x68
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
  2017a8:	686a      	ldr	r2, [r5, #4]
  2017aa:	f023 0301 	bic.w	r3, r3, #1
  usbp->state = usbp->saved_state;
  2017ae:	7029      	strb	r1, [r5, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
  2017b0:	6812      	ldr	r2, [r2, #0]
  2017b2:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
  2017b6:	2a00      	cmp	r2, #0
  2017b8:	f43f af42 	beq.w	201640 <Vector14C+0x20>
  2017bc:	2105      	movs	r1, #5
  2017be:	4828      	ldr	r0, [pc, #160]	; (201860 <Vector14C+0x240>)
  2017c0:	4790      	blx	r2
  if (sts & GINTSTS_USBSUSP) {
  2017c2:	0521      	lsls	r1, r4, #20
  2017c4:	f57f af3f 	bpl.w	201646 <Vector14C+0x26>
  usbp->saved_state = usbp->state;
  2017c8:	782a      	ldrb	r2, [r5, #0]
  usbp->state       = USB_SUSPENDED;
  2017ca:	2105      	movs	r1, #5
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
  2017cc:	686b      	ldr	r3, [r5, #4]
  usbp->saved_state = usbp->state;
  2017ce:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
    usbp->txpending = 0;
  2017d2:	2200      	movs	r2, #0
  usbp->state       = USB_SUSPENDED;
  2017d4:	7029      	strb	r1, [r5, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
  2017d6:	681b      	ldr	r3, [r3, #0]
  2017d8:	67aa      	str	r2, [r5, #120]	; 0x78
  2017da:	2b00      	cmp	r3, #0
  2017dc:	f43f af33 	beq.w	201646 <Vector14C+0x26>
  2017e0:	2104      	movs	r1, #4
  2017e2:	481f      	ldr	r0, [pc, #124]	; (201860 <Vector14C+0x240>)
  2017e4:	4798      	blx	r3
  2017e6:	e72e      	b.n	201646 <Vector14C+0x26>
  2017e8:	2320      	movs	r3, #32
  2017ea:	f383 8811 	msr	BASEPRI, r3
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
  2017ee:	69b3      	ldr	r3, [r6, #24]
  2017f0:	2100      	movs	r1, #0
  2017f2:	481c      	ldr	r0, [pc, #112]	; (201864 <Vector14C+0x244>)
  2017f4:	f023 0310 	bic.w	r3, r3, #16
  2017f8:	61b3      	str	r3, [r6, #24]
  2017fa:	f7ff fe91 	bl	201520 <chThdResumeI>
  2017fe:	2300      	movs	r3, #0
  201800:	f383 8811 	msr	BASEPRI, r3
  201804:	e738      	b.n	201678 <Vector14C+0x58>
  stm32_otg_t *otgp = usbp->otg;
  201806:	f8d5 806c 	ldr.w	r8, [r5, #108]	; 0x6c
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
  20180a:	2700      	movs	r7, #0
      _usb_isr_invoke_out_cb(usbp, ep);
  20180c:	f04f 0901 	mov.w	r9, #1
  201810:	f8df a04c 	ldr.w	sl, [pc, #76]	; 201860 <Vector14C+0x240>
  201814:	e006      	b.n	201824 <Vector14C+0x204>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
  201816:	3701      	adds	r7, #1
  201818:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  20181a:	b2ff      	uxtb	r7, r7
  20181c:	689b      	ldr	r3, [r3, #8]
  20181e:	429f      	cmp	r7, r3
  201820:	f63f af27 	bhi.w	201672 <Vector14C+0x52>
  201824:	eb08 1247 	add.w	r2, r8, r7, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
  201828:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
  20182c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  201830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
  201834:	d1ef      	bne.n	201816 <Vector14C+0x1f6>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
  201836:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
      _usb_isr_invoke_out_cb(usbp, ep);
  20183a:	eb05 0187 	add.w	r1, r5, r7, lsl #2
  20183e:	fa09 fc07 	lsl.w	ip, r9, r7
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
  201842:	2b00      	cmp	r3, #0
  201844:	dae7      	bge.n	201816 <Vector14C+0x1f6>
      _usb_isr_invoke_out_cb(usbp, ep);
  201846:	68ca      	ldr	r2, [r1, #12]
  201848:	4650      	mov	r0, sl
  20184a:	896b      	ldrh	r3, [r5, #10]
  20184c:	4639      	mov	r1, r7
  20184e:	68d2      	ldr	r2, [r2, #12]
  201850:	ea23 030c 	bic.w	r3, r3, ip
  201854:	816b      	strh	r3, [r5, #10]
  201856:	2a00      	cmp	r2, #0
  201858:	d0dd      	beq.n	201816 <Vector14C+0x1f6>
  20185a:	4790      	blx	r2
  20185c:	e7db      	b.n	201816 <Vector14C+0x1f6>
  20185e:	bf00      	nop
  201860:	200009e8 	.word	0x200009e8
  201864:	20000a64 	.word	0x20000a64
    usbp->txpending = 0;
  201868:	2300      	movs	r3, #0
  usbp->state         = USB_READY;
  20186a:	2102      	movs	r1, #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  20186c:	2220      	movs	r2, #32
    usbp->txpending = 0;
  20186e:	67ab      	str	r3, [r5, #120]	; 0x78
  usbp->status        = 0;
  201870:	666b      	str	r3, [r5, #100]	; 0x64
  usbp->ep0state = USB_EP0_STP_WAITING;
  201872:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
  usbp->transmitting  = 0;
  201876:	60ab      	str	r3, [r5, #8]
  usbp->state         = USB_READY;
  201878:	7029      	strb	r1, [r5, #0]
    usbp->epc[i] = NULL;
  20187a:	e9c5 3303 	strd	r3, r3, [r5, #12]
  20187e:	e9c5 3305 	strd	r3, r3, [r5, #20]
  201882:	e9c5 3307 	strd	r3, r3, [r5, #28]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  201886:	6132      	str	r2, [r6, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
  201888:	6930      	ldr	r0, [r6, #16]
  20188a:	f010 0020 	ands.w	r0, r0, #32
  20188e:	d1fb      	bne.n	201888 <Vector14C+0x268>
  chSysPolledDelayX(cycles);
  201890:	f7fe fd3e 	bl	200310 <chSysPolledDelayX.constprop.0>
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
  201894:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  201898:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
  20189c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
  2018a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  2018a4:	f8dc 7008 	ldr.w	r7, [ip, #8]
  otgp->DIEPEMPMSK = 0;
  2018a8:	f8c6 0834 	str.w	r0, [r6, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
  2018ac:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
  2018b0:	eb06 1340 	add.w	r3, r6, r0, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  2018b4:	42b8      	cmp	r0, r7
  2018b6:	f100 0001 	add.w	r0, r0, #1
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
  2018ba:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
  2018be:	f8c3 4b00 	str.w	r4, [r3, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
  2018c2:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  2018c6:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  2018ca:	d1f1      	bne.n	2018b0 <Vector14C+0x290>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
  2018cc:	f8dc 1000 	ldr.w	r1, [ip]
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
  2018d0:	2210      	movs	r2, #16
  otg_rxfifo_flush(usbp);
  2018d2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
  2018d4:	6769      	str	r1, [r5, #116]	; 0x74
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  2018d6:	f8dc 1000 	ldr.w	r1, [ip]
  2018da:	6271      	str	r1, [r6, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
  2018dc:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
  2018de:	6918      	ldr	r0, [r3, #16]
  2018e0:	f010 0010 	ands.w	r0, r0, #16
  2018e4:	d1fb      	bne.n	2018de <Vector14C+0x2be>
  2018e6:	f7fe fd13 	bl	200310 <chSysPolledDelayX.constprop.0>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
  2018ea:	f8d6 1800 	ldr.w	r1, [r6, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  2018ee:	4a3c      	ldr	r2, [pc, #240]	; (2019e0 <Vector14C+0x3c0>)
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  2018f0:	2409      	movs	r4, #9
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
  2018f2:	f421 61fe 	bic.w	r1, r1, #2032	; 0x7f0
  next = usbp->pmnext;
  2018f6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
  2018f8:	f8c6 1800 	str.w	r1, [r6, #2048]	; 0x800
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
  2018fc:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  201900:	69b7      	ldr	r7, [r6, #24]
  201902:	433a      	orrs	r2, r7
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
  201904:	686f      	ldr	r7, [r5, #4]
  201906:	683f      	ldr	r7, [r7, #0]
  201908:	61b2      	str	r2, [r6, #24]
  usbp->pmnext += size;
  20190a:	f103 0210 	add.w	r2, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  20190e:	f8c6 4810 	str.w	r4, [r6, #2064]	; 0x810
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
  201912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
  201916:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
  usbp->pmnext += size;
  20191a:	676a      	str	r2, [r5, #116]	; 0x74
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
  20191c:	f8c6 1b10 	str.w	r1, [r6, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
  201920:	4a30      	ldr	r2, [pc, #192]	; (2019e4 <Vector14C+0x3c4>)
  usbp->epc[0] = &ep0config;
  201922:	4931      	ldr	r1, [pc, #196]	; (2019e8 <Vector14C+0x3c8>)
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
  201924:	f8c6 2b00 	str.w	r2, [r6, #2816]	; 0xb00
  usbp->epc[0] = &ep0config;
  201928:	60e9      	str	r1, [r5, #12]
  otgp->ie[0].DIEPTSIZ = 0;
  20192a:	f8c6 0910 	str.w	r0, [r6, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
  20192e:	f8c6 2900 	str.w	r2, [r6, #2304]	; 0x900
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
  201932:	62b3      	str	r3, [r6, #40]	; 0x28
  201934:	2f00      	cmp	r7, #0
  201936:	f43f aec9 	beq.w	2016cc <Vector14C+0xac>
  20193a:	4601      	mov	r1, r0
  20193c:	482b      	ldr	r0, [pc, #172]	; (2019ec <Vector14C+0x3cc>)
  20193e:	47b8      	blx	r7
}
  201940:	b003      	add	sp, #12
  201942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
  201946:	f7ff b833 	b.w	2009b0 <_port_irq_epilogue>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
  20194a:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
  20194e:	f023 0303 	bic.w	r3, r3, #3
  201952:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
  201956:	e723      	b.n	2017a0 <Vector14C+0x180>
      otg_epout_handler(usbp, 5);
  201958:	2005      	movs	r0, #5
  20195a:	f7fe fd21 	bl	2003a0 <otg_epout_handler.constprop.0>
  if (sts & GINTSTS_IEPINT) {
  20195e:	0367      	lsls	r7, r4, #13
  201960:	f57f aeb4 	bpl.w	2016cc <Vector14C+0xac>
  201964:	e6a0      	b.n	2016a8 <Vector14C+0x88>
      otg_epin_handler(usbp, 5);
  201966:	2005      	movs	r0, #5
  201968:	f7ff fdea 	bl	201540 <otg_epin_handler.constprop.0>
}
  20196c:	b003      	add	sp, #12
  20196e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
  201972:	f7ff b81d 	b.w	2009b0 <_port_irq_epilogue>
      otg_epin_handler(usbp, 2);
  201976:	2002      	movs	r0, #2
  201978:	f7ff fde2 	bl	201540 <otg_epin_handler.constprop.0>
    if (src & (1 << 3))
  20197c:	0729      	lsls	r1, r5, #28
  20197e:	f57f ae9f 	bpl.w	2016c0 <Vector14C+0xa0>
      otg_epin_handler(usbp, 3);
  201982:	2003      	movs	r0, #3
  201984:	f7ff fddc 	bl	201540 <otg_epin_handler.constprop.0>
    if (src & (1 << 4))
  201988:	06ea      	lsls	r2, r5, #27
  20198a:	f57f ae9c 	bpl.w	2016c6 <Vector14C+0xa6>
      otg_epin_handler(usbp, 4);
  20198e:	2004      	movs	r0, #4
  201990:	f7ff fdd6 	bl	201540 <otg_epin_handler.constprop.0>
  201994:	e697      	b.n	2016c6 <Vector14C+0xa6>
      otg_epin_handler(usbp, 1);
  201996:	2001      	movs	r0, #1
  201998:	f7ff fdd2 	bl	201540 <otg_epin_handler.constprop.0>
  20199c:	e68a      	b.n	2016b4 <Vector14C+0x94>
      otg_epin_handler(usbp, 0);
  20199e:	2000      	movs	r0, #0
  2019a0:	f7ff fdce 	bl	201540 <otg_epin_handler.constprop.0>
  2019a4:	e683      	b.n	2016ae <Vector14C+0x8e>
      otg_epout_handler(usbp, 0);
  2019a6:	2000      	movs	r0, #0
  2019a8:	f7fe fcfa 	bl	2003a0 <otg_epout_handler.constprop.0>
    if (src & (1 << 17))
  2019ac:	03ae      	lsls	r6, r5, #14
  2019ae:	f57f ae6d 	bpl.w	20168c <Vector14C+0x6c>
      otg_epout_handler(usbp, 1);
  2019b2:	2001      	movs	r0, #1
  2019b4:	f7fe fcf4 	bl	2003a0 <otg_epout_handler.constprop.0>
    if (src & (1 << 18))
  2019b8:	0368      	lsls	r0, r5, #13
  2019ba:	f57f ae6a 	bpl.w	201692 <Vector14C+0x72>
      otg_epout_handler(usbp, 2);
  2019be:	2002      	movs	r0, #2
  2019c0:	f7fe fcee 	bl	2003a0 <otg_epout_handler.constprop.0>
    if (src & (1 << 19))
  2019c4:	0329      	lsls	r1, r5, #12
  2019c6:	f57f ae67 	bpl.w	201698 <Vector14C+0x78>
      otg_epout_handler(usbp, 3);
  2019ca:	2003      	movs	r0, #3
  2019cc:	f7fe fce8 	bl	2003a0 <otg_epout_handler.constprop.0>
    if (src & (1 << 20))
  2019d0:	02ea      	lsls	r2, r5, #11
  2019d2:	f57f ae64 	bpl.w	20169e <Vector14C+0x7e>
      otg_epout_handler(usbp, 4);
  2019d6:	2004      	movs	r0, #4
  2019d8:	f7fe fce2 	bl	2003a0 <otg_epout_handler.constprop.0>
  2019dc:	e65f      	b.n	20169e <Vector14C+0x7e>
  2019de:	bf00      	nop
  2019e0:	000c0010 	.word	0x000c0010
  2019e4:	10008040 	.word	0x10008040
  2019e8:	0800321c 	.word	0x0800321c
  2019ec:	200009e8 	.word	0x200009e8

002019f0 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  2019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
  2019f2:	4b20      	ldr	r3, [pc, #128]	; (201a74 <Vector88+0x84>)
  ADC1->SR = 0;
  2019f4:	2100      	movs	r1, #0
  sr = ADC1->SR;
  2019f6:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
  2019f8:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  2019fa:	0693      	lsls	r3, r2, #26
  2019fc:	d531      	bpl.n	201a62 <Vector88+0x72>
  2019fe:	4c1e      	ldr	r4, [pc, #120]	; (201a78 <Vector88+0x88>)
  201a00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  201a02:	6802      	ldr	r2, [r0, #0]
  201a04:	6853      	ldr	r3, [r2, #4]
  201a06:	b363      	cbz	r3, 201a62 <Vector88+0x72>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
  201a08:	6921      	ldr	r1, [r4, #16]
  201a0a:	b351      	cbz	r1, 201a62 <Vector88+0x72>
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  201a0c:	6813      	ldr	r3, [r2, #0]
  201a0e:	f023 031f 	bic.w	r3, r3, #31
  201a12:	6013      	str	r3, [r2, #0]
  201a14:	6813      	ldr	r3, [r2, #0]
  201a16:	f013 0301 	ands.w	r3, r3, #1
  201a1a:	d1fb      	bne.n	201a14 <Vector88+0x24>
  201a1c:	7a07      	ldrb	r7, [r0, #8]
  201a1e:	223d      	movs	r2, #61	; 0x3d
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201a20:	688d      	ldr	r5, [r1, #8]
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
  201a22:	2101      	movs	r1, #1
  dmaStreamDisable(adcp->dmastp);
  201a24:	6846      	ldr	r6, [r0, #4]
  201a26:	fa02 f707 	lsl.w	r7, r2, r7
  adcp->adc->CR1 = 0;
  201a2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  dmaStreamDisable(adcp->dmastp);
  201a2c:	6037      	str	r7, [r6, #0]
  adcp->adc->CR1 = 0;
  201a2e:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  201a30:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  201a32:	6091      	str	r1, [r2, #8]
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201a34:	b1cd      	cbz	r5, 201a6a <Vector88+0x7a>
  201a36:	2305      	movs	r3, #5
  201a38:	480f      	ldr	r0, [pc, #60]	; (201a78 <Vector88+0x88>)
  201a3a:	7023      	strb	r3, [r4, #0]
  201a3c:	47a8      	blx	r5
  201a3e:	7823      	ldrb	r3, [r4, #0]
  201a40:	2b05      	cmp	r3, #5
  201a42:	d101      	bne.n	201a48 <Vector88+0x58>
  201a44:	2302      	movs	r3, #2
  201a46:	7023      	strb	r3, [r4, #0]
  201a48:	2300      	movs	r3, #0
  201a4a:	6123      	str	r3, [r4, #16]
  201a4c:	2320      	movs	r3, #32
  201a4e:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
  201a52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  201a56:	4809      	ldr	r0, [pc, #36]	; (201a7c <Vector88+0x8c>)
  201a58:	f7ff fd62 	bl	201520 <chThdResumeI>
  201a5c:	2300      	movs	r3, #0
  201a5e:	f383 8811 	msr	BASEPRI, r3
}
  201a62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  201a66:	f7fe bfa3 	b.w	2009b0 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  201a6a:	2302      	movs	r3, #2
  201a6c:	6125      	str	r5, [r4, #16]
  201a6e:	7023      	strb	r3, [r4, #0]
  201a70:	e7ec      	b.n	201a4c <Vector88+0x5c>
  201a72:	bf00      	nop
  201a74:	40012000 	.word	0x40012000
  201a78:	20000800 	.word	0x20000800
  201a7c:	20000814 	.word	0x20000814

00201a80 <_idle_thread>:
}
  201a80:	e7fe      	b.n	201a80 <_idle_thread>
  201a82:	bf00      	nop
	...

00201a90 <BusFault_Handler>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
/*lint -restore*/

  while (true) {
  201a90:	e7fe      	b.n	201a90 <BusFault_Handler>
  201a92:	bf00      	nop
	...

00201aa0 <chSchWakeupS.constprop.0>:
  thread_t *otp = currp;
  201aa0:	4b14      	ldr	r3, [pc, #80]	; (201af4 <chSchWakeupS.constprop.0+0x54>)
  201aa2:	6999      	ldr	r1, [r3, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  201aa4:	b470      	push	{r4, r5, r6}
  if (ntp->prio <= otp->prio) {
  201aa6:	688d      	ldr	r5, [r1, #8]
  ntp->u.rdymsg = msg;
  201aa8:	2600      	movs	r6, #0
  if (ntp->prio <= otp->prio) {
  201aaa:	6884      	ldr	r4, [r0, #8]
  ntp->u.rdymsg = msg;
  201aac:	6246      	str	r6, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
  201aae:	42ac      	cmp	r4, r5
  201ab0:	d80c      	bhi.n	201acc <chSchWakeupS.constprop.0+0x2c>
  tp->state = CH_STATE_READY;
  201ab2:	f880 6020 	strb.w	r6, [r0, #32]
    cp = cp->queue.next;
  201ab6:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201ab8:	689a      	ldr	r2, [r3, #8]
  201aba:	4294      	cmp	r4, r2
  201abc:	d9fb      	bls.n	201ab6 <chSchWakeupS.constprop.0+0x16>
  tp->queue.prev             = cp->queue.prev;
  201abe:	685a      	ldr	r2, [r3, #4]
}
  201ac0:	bc70      	pop	{r4, r5, r6}
  tp->queue.prev             = cp->queue.prev;
  201ac2:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
  201ac6:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  201ac8:	6058      	str	r0, [r3, #4]
}
  201aca:	4770      	bx	lr
  cp = (thread_t *)&ch.rlist.queue;
  201acc:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
  201ace:	f881 6020 	strb.w	r6, [r1, #32]
    cp = cp->queue.next;
  201ad2:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
  201ad4:	6894      	ldr	r4, [r2, #8]
  201ad6:	42a5      	cmp	r5, r4
  201ad8:	d9fb      	bls.n	201ad2 <chSchWakeupS.constprop.0+0x32>
  tp->queue.prev             = cp->queue.prev;
  201ada:	6854      	ldr	r4, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  201adc:	2501      	movs	r5, #1
  tp->queue.prev             = cp->queue.prev;
  201ade:	e9c1 2400 	strd	r2, r4, [r1]
  tp->queue.prev->queue.next = tp;
  201ae2:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
  201ae4:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  201ae6:	f880 5020 	strb.w	r5, [r0, #32]
    currp = ntp;
  201aea:	6198      	str	r0, [r3, #24]
}
  201aec:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
  201aee:	f7fe bbf3 	b.w	2002d8 <_port_switch>
  201af2:	bf00      	nop
  201af4:	20000bb8 	.word	0x20000bb8
	...

00201b00 <chSchGoSleepS>:
  thread_t *otp = currp;
  201b00:	4b08      	ldr	r3, [pc, #32]	; (201b24 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  201b02:	681a      	ldr	r2, [r3, #0]
  201b04:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  201b06:	b430      	push	{r4, r5}
  otp->state = newstate;
  201b08:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  201b0c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  201b0e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  201b10:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  201b12:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  201b14:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  201b16:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  201b1a:	619a      	str	r2, [r3, #24]
}
  201b1c:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201b1e:	f7fe bbdb 	b.w	2002d8 <_port_switch>
  201b22:	bf00      	nop
  201b24:	20000bb8 	.word	0x20000bb8
	...

00201b30 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  201b30:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  201b32:	b5f0      	push	{r4, r5, r6, r7, lr}
  201b34:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  201b36:	d047      	beq.n	201bc8 <chSchGoSleepTimeoutS+0x98>
    chVTDoSetI(&vt, time, wakeup, currp);
  201b38:	4c3d      	ldr	r4, [pc, #244]	; (201c30 <chSchGoSleepTimeoutS+0x100>)
  201b3a:	290a      	cmp	r1, #10

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  201b3c:	4a3d      	ldr	r2, [pc, #244]	; (201c34 <chSchGoSleepTimeoutS+0x104>)
  201b3e:	4605      	mov	r5, r0
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  201b40:	4626      	mov	r6, r4
  201b42:	bf38      	it	cc
  201b44:	210a      	movcc	r1, #10
  vtp->par = par;
  201b46:	69a7      	ldr	r7, [r4, #24]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  201b48:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  return (systime_t)STM32_ST_TIM->CNT;
  201b4c:	483a      	ldr	r0, [pc, #232]	; (201c38 <chSchGoSleepTimeoutS+0x108>)
  201b4e:	42b3      	cmp	r3, r6
  vtp->func = vtfunc;
  201b50:	e9cd 2704 	strd	r2, r7, [sp, #16]
  201b54:	6a42      	ldr	r2, [r0, #36]	; 0x24
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  201b56:	d058      	beq.n	201c0a <chSchGoSleepTimeoutS+0xda>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = now - ch.vtlist.lasttime + delay;
  201b58:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  201b5a:	1bd2      	subs	r2, r2, r7
  201b5c:	1889      	adds	r1, r1, r2

    if (delta < now - ch.vtlist.lasttime) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
  201b5e:	689a      	ldr	r2, [r3, #8]
    if (delta < now - ch.vtlist.lasttime) {
  201b60:	d32d      	bcc.n	201bbe <chSchGoSleepTimeoutS+0x8e>
      p = p->next;
  201b62:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
  201b64:	1a89      	subs	r1, r1, r2
  201b66:	689a      	ldr	r2, [r3, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  201b68:	4291      	cmp	r1, r2
  201b6a:	d904      	bls.n	201b76 <chSchGoSleepTimeoutS+0x46>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
  201b6c:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  201b6e:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
  201b70:	689a      	ldr	r2, [r3, #8]
  201b72:	428a      	cmp	r2, r1
  201b74:	d3fa      	bcc.n	201b6c <chSchGoSleepTimeoutS+0x3c>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  201b76:	685a      	ldr	r2, [r3, #4]
  vtp->prev->next = vtp;
  201b78:	af01      	add	r7, sp, #4
  vtp->next = p;
  201b7a:	9301      	str	r3, [sp, #4]
  /* Calculate new delta for the following entry.*/
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (systime_t)-1;
  201b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  vtp->prev = vtp->next->prev;
  201b80:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
  201b82:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
  201b84:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
  201b86:	9103      	str	r1, [sp, #12]
  p->delta -= delta;
  201b88:	689a      	ldr	r2, [r3, #8]
  201b8a:	1a51      	subs	r1, r2, r1
  201b8c:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  201b8e:	6260      	str	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
  201b90:	4628      	mov	r0, r5
  201b92:	f7ff ffb5 	bl	201b00 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  201b96:	9b04      	ldr	r3, [sp, #16]
  201b98:	b16b      	cbz	r3, 201bb6 <chSchGoSleepTimeoutS+0x86>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
  201b9a:	69e3      	ldr	r3, [r4, #28]
  201b9c:	42bb      	cmp	r3, r7
  201b9e:	d01a      	beq.n	201bd6 <chSchGoSleepTimeoutS+0xa6>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
  201ba0:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
  201ba4:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
  201ba6:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  201ba8:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
  201baa:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  201bac:	d003      	beq.n	201bb6 <chSchGoSleepTimeoutS+0x86>
      vtp->next->delta += vtp->delta;
  201bae:	689a      	ldr	r2, [r3, #8]
  201bb0:	9903      	ldr	r1, [sp, #12]
  201bb2:	440a      	add	r2, r1
  201bb4:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
  201bb6:	69a3      	ldr	r3, [r4, #24]
}
  201bb8:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201bba:	b007      	add	sp, #28
  201bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
  201bbe:	4291      	cmp	r1, r2
  201bc0:	d2d2      	bcs.n	201b68 <chSchGoSleepTimeoutS+0x38>
      port_timer_set_alarm(ch.vtlist.lasttime + delta);
  201bc2:	440f      	add	r7, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  201bc4:	6347      	str	r7, [r0, #52]	; 0x34
  201bc6:	e7cf      	b.n	201b68 <chSchGoSleepTimeoutS+0x38>
    chSchGoSleepS(newstate);
  201bc8:	4c19      	ldr	r4, [pc, #100]	; (201c30 <chSchGoSleepTimeoutS+0x100>)
  201bca:	f7ff ff99 	bl	201b00 <chSchGoSleepS>
  return currp->u.rdymsg;
  201bce:	69a3      	ldr	r3, [r4, #24]
}
  201bd0:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201bd2:	b007      	add	sp, #28
  201bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  201bd6:	9b01      	ldr	r3, [sp, #4]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
  201bd8:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  201bda:	42b3      	cmp	r3, r6
  ch.vtlist.next = vtp->next;
  201bdc:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  201bde:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
  201be0:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  201be2:	d022      	beq.n	201c2a <chSchGoSleepTimeoutS+0xfa>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
  201be4:	689a      	ldr	r2, [r3, #8]
  201be6:	9903      	ldr	r1, [sp, #12]
  return (systime_t)STM32_ST_TIM->CNT;
  201be8:	4813      	ldr	r0, [pc, #76]	; (201c38 <chSchGoSleepTimeoutS+0x108>)
  201bea:	440a      	add	r2, r1
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
  201bec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
  201bee:	609a      	str	r2, [r3, #8]
  201bf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.lasttime;
  201bf2:	1a5d      	subs	r5, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
  201bf4:	42aa      	cmp	r2, r5
  201bf6:	d9de      	bls.n	201bb6 <chSchGoSleepTimeoutS+0x86>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
  201bf8:	1ac9      	subs	r1, r1, r3
  201bfa:	440a      	add	r2, r1
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.lasttime + nowdelta + delta);
  201bfc:	2a0a      	cmp	r2, #10
  201bfe:	bf2c      	ite	cs
  201c00:	189a      	addcs	r2, r3, r2
  201c02:	f103 020a 	addcc.w	r2, r3, #10
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  201c06:	6342      	str	r2, [r0, #52]	; 0x34
  201c08:	e7d5      	b.n	201bb6 <chSchGoSleepTimeoutS+0x86>
      ch.vtlist.lasttime = now;
  201c0a:	62a2      	str	r2, [r4, #40]	; 0x28
      port_timer_start_alarm(ch.vtlist.lasttime + delay);
  201c0c:	eb02 0c01 	add.w	ip, r2, r1
      ch.vtlist.next = vtp;
  201c10:	af01      	add	r7, sp, #4
  STM32_ST_TIM->SR     = 0;
  201c12:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  201c14:	2302      	movs	r3, #2
      vtp->delta = delay;
  201c16:	9103      	str	r1, [sp, #12]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
  201c18:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
  201c1c:	e9c4 7707 	strd	r7, r7, [r4, #28]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  201c20:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
  201c24:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  201c26:	60c3      	str	r3, [r0, #12]
  201c28:	e7b2      	b.n	201b90 <chSchGoSleepTimeoutS+0x60>
  STM32_ST_TIM->DIER = 0;
  201c2a:	4b03      	ldr	r3, [pc, #12]	; (201c38 <chSchGoSleepTimeoutS+0x108>)
  201c2c:	60da      	str	r2, [r3, #12]
    return;
  201c2e:	e7c2      	b.n	201bb6 <chSchGoSleepTimeoutS+0x86>
  201c30:	20000bb8 	.word	0x20000bb8
  201c34:	00201261 	.word	0x00201261
  201c38:	40000c00 	.word	0x40000c00
  201c3c:	00000000 	.word	0x00000000

00201c40 <RCModeDetect>:
};


static THD_WORKING_AREA(waRCModeDetect, 256); // 128 - stack size
static THD_FUNCTION(RCModeDetect, arg)
{
  201c40:	b580      	push	{r7, lr}
  201c42:	2520      	movs	r5, #32
  201c44:	4f0d      	ldr	r7, [pc, #52]	; (201c7c <RCModeDetect+0x3c>)
  201c46:	4c0e      	ldr	r4, [pc, #56]	; (201c80 <RCModeDetect+0x40>)
        palSetLine( LINE_LED3 );
      }
      else if(msg_mode == MSG_TIMEOUT)
      {
        rc_mode = false;
        palClearLine( LINE_LED3 );
  201c48:	4e0e      	ldr	r6, [pc, #56]	; (201c84 <RCModeDetect+0x44>)
  201c4a:	f385 8811 	msr	BASEPRI, r5
  return ch.rlist.current;
  201c4e:	69bb      	ldr	r3, [r7, #24]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
  201c50:	f242 7110 	movw	r1, #10000	; 0x2710
  201c54:	2003      	movs	r0, #3
  tp->u.wttrp = trp;
  201c56:	625c      	str	r4, [r3, #36]	; 0x24
  *trp = tp;
  201c58:	6023      	str	r3, [r4, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
  201c5a:	f7ff ff69 	bl	201b30 <chSchGoSleepTimeoutS>
  201c5e:	2300      	movs	r3, #0
  201c60:	f383 8811 	msr	BASEPRI, r3
        palSetLine( LINE_LED3 );
  201c64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
      if(msg_mode == MSG_OK)
  201c68:	b908      	cbnz	r0, 201c6e <RCModeDetect+0x2e>
        palSetLine( LINE_LED3 );
  201c6a:	8333      	strh	r3, [r6, #24]
  201c6c:	e7ed      	b.n	201c4a <RCModeDetect+0xa>
      else if(msg_mode == MSG_TIMEOUT)
  201c6e:	3001      	adds	r0, #1
  201c70:	d1eb      	bne.n	201c4a <RCModeDetect+0xa>
        palClearLine( LINE_LED3 );
  201c72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  201c76:	8373      	strh	r3, [r6, #26]
  201c78:	e7e7      	b.n	201c4a <RCModeDetect+0xa>
  201c7a:	bf00      	nop
  201c7c:	20000bb8 	.word	0x20000bb8
  201c80:	20000e38 	.word	0x20000e38
  201c84:	40020400 	.word	0x40020400
	...

00201c90 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  201c90:	b161      	cbz	r1, 201cac <chThdEnqueueTimeoutS+0x1c>
  201c92:	4603      	mov	r3, r0
  queue_insert(currp, tqp);
  201c94:	4a07      	ldr	r2, [pc, #28]	; (201cb4 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201c96:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  201c98:	6992      	ldr	r2, [r2, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  201c9a:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  201c9c:	685c      	ldr	r4, [r3, #4]
  201c9e:	e9c2 3400 	strd	r3, r4, [r2]
  tp->queue.prev->queue.next = tp;
  201ca2:	6022      	str	r2, [r4, #0]
}
  201ca4:	bc10      	pop	{r4}
  tqp->prev                  = tp;
  201ca6:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201ca8:	f7ff bf42 	b.w	201b30 <chSchGoSleepTimeoutS>
}
  201cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  201cb0:	4770      	bx	lr
  201cb2:	bf00      	nop
  201cb4:	20000bb8 	.word	0x20000bb8
	...

00201cc0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  201cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201cc4:	4614      	mov	r4, r2
  201cc6:	b083      	sub	sp, #12
  201cc8:	4682      	mov	sl, r0
  201cca:	468b      	mov	fp, r1
  201ccc:	461d      	mov	r5, r3
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  201cce:	69c7      	ldr	r7, [r0, #28]
  201cd0:	f04f 0820 	mov.w	r8, #32
  201cd4:	f388 8811 	msr	BASEPRI, r8
  return (systime_t)STM32_ST_TIM->CNT;
  201cd8:	4927      	ldr	r1, [pc, #156]	; (201d78 <oqWriteTimeout+0xb8>)
  size_t w = 0;
  201cda:	2600      	movs	r6, #0
  201cdc:	6a48      	ldr	r0, [r1, #36]	; 0x24
  201cde:	46b1      	mov	r9, r6
  201ce0:	9101      	str	r1, [sp, #4]
  osalSysLock();

  /* Time deadline for the whole operation, note the result is invalid
     when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
     the deadline is not used.*/
  deadline = osalOsGetSystemTimeX() + timeout;
  201ce2:	4403      	add	r3, r0
  201ce4:	9300      	str	r3, [sp, #0]

  while (true) {
    msg_t msg;

    while (oqIsFullI(oqp)) {
  201ce6:	f8da 0008 	ldr.w	r0, [sl, #8]
  201cea:	b318      	cbz	r0, 201d34 <oqWriteTimeout+0x74>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  201cec:	f8da 1014 	ldr.w	r1, [sl, #20]
    oqp->q_counter--;
  201cf0:	f8da 0008 	ldr.w	r0, [sl, #8]
    *oqp->q_wrptr++ = *bp++;
  201cf4:	1c4b      	adds	r3, r1, #1
    oqp->q_counter--;
  201cf6:	3801      	subs	r0, #1
    *oqp->q_wrptr++ = *bp++;
  201cf8:	f8ca 3014 	str.w	r3, [sl, #20]
    oqp->q_counter--;
  201cfc:	f8ca 0008 	str.w	r0, [sl, #8]
    *oqp->q_wrptr++ = *bp++;
  201d00:	f81b 0b01 	ldrb.w	r0, [fp], #1
  201d04:	7008      	strb	r0, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  201d06:	e9da 1004 	ldrd	r1, r0, [sl, #16]
  201d0a:	4288      	cmp	r0, r1
  201d0c:	d303      	bcc.n	201d16 <oqWriteTimeout+0x56>
      oqp->q_wrptr = oqp->q_buffer;
  201d0e:	f8da 100c 	ldr.w	r1, [sl, #12]
  201d12:	f8ca 1014 	str.w	r1, [sl, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  201d16:	b10f      	cbz	r7, 201d1c <oqWriteTimeout+0x5c>
      nfy(oqp);
  201d18:	4650      	mov	r0, sl
  201d1a:	47b8      	blx	r7
  201d1c:	f389 8811 	msr	BASEPRI, r9

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  201d20:	3c01      	subs	r4, #1
    w++;
  201d22:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
  201d26:	d016      	beq.n	201d56 <oqWriteTimeout+0x96>
  201d28:	f388 8811 	msr	BASEPRI, r8
    while (oqIsFullI(oqp)) {
  201d2c:	f8da 0008 	ldr.w	r0, [sl, #8]
  201d30:	2800      	cmp	r0, #0
  201d32:	d1db      	bne.n	201cec <oqWriteTimeout+0x2c>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201d34:	1e69      	subs	r1, r5, #1
  201d36:	3103      	adds	r1, #3
  201d38:	d811      	bhi.n	201d5e <oqWriteTimeout+0x9e>
  201d3a:	9b01      	ldr	r3, [sp, #4]
  201d3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201d3e:	9b00      	ldr	r3, [sp, #0]
  201d40:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
  201d42:	428d      	cmp	r5, r1
  201d44:	d312      	bcc.n	201d6c <oqWriteTimeout+0xac>
  return chThdEnqueueTimeoutS(tqp, time);
  201d46:	4650      	mov	r0, sl
  201d48:	f7ff ffa2 	bl	201c90 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201d4c:	2800      	cmp	r0, #0
  201d4e:	d0ca      	beq.n	201ce6 <oqWriteTimeout+0x26>
  201d50:	2300      	movs	r3, #0
  201d52:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  201d56:	4630      	mov	r0, r6
  201d58:	b003      	add	sp, #12
  201d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201d5e:	4629      	mov	r1, r5
  201d60:	4650      	mov	r0, sl
  201d62:	f7ff ff95 	bl	201c90 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201d66:	2800      	cmp	r0, #0
  201d68:	d0bd      	beq.n	201ce6 <oqWriteTimeout+0x26>
  201d6a:	e7f1      	b.n	201d50 <oqWriteTimeout+0x90>
  201d6c:	f380 8811 	msr	BASEPRI, r0
}
  201d70:	4630      	mov	r0, r6
  201d72:	b003      	add	sp, #12
  201d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201d78:	40000c00 	.word	0x40000c00
  201d7c:	00000000 	.word	0x00000000

00201d80 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  201d80:	3030      	adds	r0, #48	; 0x30
  201d82:	f7ff bf9d 	b.w	201cc0 <oqWriteTimeout>
  201d86:	bf00      	nop
	...

00201d90 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  201d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  201d94:	3030      	adds	r0, #48	; 0x30
  201d96:	f7ff bf93 	b.w	201cc0 <oqWriteTimeout>
  201d9a:	bf00      	nop
  201d9c:	0000      	movs	r0, r0
	...

00201da0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  201da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  201da2:	2320      	movs	r3, #32
  201da4:	4604      	mov	r4, r0
  201da6:	460f      	mov	r7, r1
  201da8:	4616      	mov	r6, r2
  201daa:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
  201dae:	e003      	b.n	201db8 <oqPutTimeout+0x18>
  201db0:	f7ff ff6e 	bl	201c90 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201db4:	2800      	cmp	r0, #0
  201db6:	db19      	blt.n	201dec <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  201db8:	68a5      	ldr	r5, [r4, #8]
  201dba:	4631      	mov	r1, r6
  201dbc:	4620      	mov	r0, r4
  201dbe:	2d00      	cmp	r5, #0
  201dc0:	d0f6      	beq.n	201db0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  201dc2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  201dc4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201dc6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  201dc8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  201dca:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  201dcc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201dce:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  201dd0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
  201dd4:	429a      	cmp	r2, r3
  201dd6:	d301      	bcc.n	201ddc <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  201dd8:	68e3      	ldr	r3, [r4, #12]
  201dda:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  201ddc:	69e3      	ldr	r3, [r4, #28]
  201dde:	b10b      	cbz	r3, 201de4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  201de0:	4620      	mov	r0, r4
  201de2:	4798      	blx	r3
  201de4:	2000      	movs	r0, #0
  201de6:	f380 8811 	msr	BASEPRI, r0
}
  201dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201dec:	f385 8811 	msr	BASEPRI, r5
  201df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201df2:	bf00      	nop
	...

00201e00 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  201e00:	3030      	adds	r0, #48	; 0x30
  201e02:	f7ff bfcd 	b.w	201da0 <oqPutTimeout>
  201e06:	bf00      	nop
	...

00201e10 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  201e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  201e14:	3030      	adds	r0, #48	; 0x30
  201e16:	f7ff bfc3 	b.w	201da0 <oqPutTimeout>
  201e1a:	bf00      	nop
  201e1c:	0000      	movs	r0, r0
	...

00201e20 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  201e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201e24:	4614      	mov	r4, r2
  201e26:	b083      	sub	sp, #12
  201e28:	4682      	mov	sl, r0
  201e2a:	468b      	mov	fp, r1
  201e2c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
  201e2e:	69c7      	ldr	r7, [r0, #28]
  201e30:	f04f 0820 	mov.w	r8, #32
  201e34:	f388 8811 	msr	BASEPRI, r8
  201e38:	4928      	ldr	r1, [pc, #160]	; (201edc <iqReadTimeout+0xbc>)
  size_t r = 0;
  201e3a:	2600      	movs	r6, #0
  201e3c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  201e3e:	46b1      	mov	r9, r6
  201e40:	9101      	str	r1, [sp, #4]
  deadline = osalOsGetSystemTimeX() + timeout;
  201e42:	4403      	add	r3, r0
  201e44:	9300      	str	r3, [sp, #0]
    while (iqIsEmptyI(iqp)) {
  201e46:	f8da 0008 	ldr.w	r0, [sl, #8]
  201e4a:	b328      	cbz	r0, 201e98 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  201e4c:	f8da 1018 	ldr.w	r1, [sl, #24]
    iqp->q_counter--;
  201e50:	f8da 0008 	ldr.w	r0, [sl, #8]
    *bp++ = *iqp->q_rdptr++;
  201e54:	1c4b      	adds	r3, r1, #1
    iqp->q_counter--;
  201e56:	3801      	subs	r0, #1
    *bp++ = *iqp->q_rdptr++;
  201e58:	f8ca 3018 	str.w	r3, [sl, #24]
    iqp->q_counter--;
  201e5c:	f8ca 0008 	str.w	r0, [sl, #8]
    *bp++ = *iqp->q_rdptr++;
  201e60:	7809      	ldrb	r1, [r1, #0]
  201e62:	f80b 1b01 	strb.w	r1, [fp], #1
    if (iqp->q_rdptr >= iqp->q_top) {
  201e66:	f8da 0018 	ldr.w	r0, [sl, #24]
  201e6a:	f8da 1010 	ldr.w	r1, [sl, #16]
  201e6e:	4288      	cmp	r0, r1
  201e70:	d303      	bcc.n	201e7a <iqReadTimeout+0x5a>
      iqp->q_rdptr = iqp->q_buffer;
  201e72:	f8da 100c 	ldr.w	r1, [sl, #12]
  201e76:	f8ca 1018 	str.w	r1, [sl, #24]
    if (nfy != NULL) {
  201e7a:	b10f      	cbz	r7, 201e80 <iqReadTimeout+0x60>
      nfy(iqp);
  201e7c:	4650      	mov	r0, sl
  201e7e:	47b8      	blx	r7
  201e80:	f389 8811 	msr	BASEPRI, r9
    if (--n == 0U) {
  201e84:	3c01      	subs	r4, #1
    r++;
  201e86:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
  201e8a:	d016      	beq.n	201eba <iqReadTimeout+0x9a>
  201e8c:	f388 8811 	msr	BASEPRI, r8
    while (iqIsEmptyI(iqp)) {
  201e90:	f8da 0008 	ldr.w	r0, [sl, #8]
  201e94:	2800      	cmp	r0, #0
  201e96:	d1d9      	bne.n	201e4c <iqReadTimeout+0x2c>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201e98:	1e69      	subs	r1, r5, #1
  201e9a:	3103      	adds	r1, #3
  201e9c:	d811      	bhi.n	201ec2 <iqReadTimeout+0xa2>
  201e9e:	9b01      	ldr	r3, [sp, #4]
  201ea0:	6a59      	ldr	r1, [r3, #36]	; 0x24
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201ea2:	9b00      	ldr	r3, [sp, #0]
  201ea4:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
  201ea6:	428d      	cmp	r5, r1
  201ea8:	d312      	bcc.n	201ed0 <iqReadTimeout+0xb0>
  201eaa:	4650      	mov	r0, sl
  201eac:	f7ff fef0 	bl	201c90 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201eb0:	2800      	cmp	r0, #0
  201eb2:	d0c8      	beq.n	201e46 <iqReadTimeout+0x26>
  201eb4:	2300      	movs	r3, #0
  201eb6:	f383 8811 	msr	BASEPRI, r3
}
  201eba:	4630      	mov	r0, r6
  201ebc:	b003      	add	sp, #12
  201ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201ec2:	4629      	mov	r1, r5
  201ec4:	4650      	mov	r0, sl
  201ec6:	f7ff fee3 	bl	201c90 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201eca:	2800      	cmp	r0, #0
  201ecc:	d0bb      	beq.n	201e46 <iqReadTimeout+0x26>
  201ece:	e7f1      	b.n	201eb4 <iqReadTimeout+0x94>
  201ed0:	f380 8811 	msr	BASEPRI, r0
}
  201ed4:	4630      	mov	r0, r6
  201ed6:	b003      	add	sp, #12
  201ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201edc:	40000c00 	.word	0x40000c00

00201ee0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  201ee0:	300c      	adds	r0, #12
  201ee2:	f7ff bf9d 	b.w	201e20 <iqReadTimeout>
  201ee6:	bf00      	nop
	...

00201ef0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  201ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  201ef4:	300c      	adds	r0, #12
  201ef6:	f7ff bf93 	b.w	201e20 <iqReadTimeout>
  201efa:	bf00      	nop
  201efc:	0000      	movs	r0, r0
	...

00201f00 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  201f00:	b570      	push	{r4, r5, r6, lr}
  201f02:	2320      	movs	r3, #32
  201f04:	4605      	mov	r5, r0
  201f06:	460e      	mov	r6, r1
  201f08:	f383 8811 	msr	BASEPRI, r3
  201f0c:	e003      	b.n	201f16 <iqGetTimeout+0x16>
  201f0e:	f7ff febf 	bl	201c90 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201f12:	2800      	cmp	r0, #0
  201f14:	db19      	blt.n	201f4a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  201f16:	68ac      	ldr	r4, [r5, #8]
  201f18:	4631      	mov	r1, r6
  201f1a:	4628      	mov	r0, r5
  201f1c:	2c00      	cmp	r4, #0
  201f1e:	d0f6      	beq.n	201f0e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  201f20:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
  201f22:	68ab      	ldr	r3, [r5, #8]
  b = *iqp->q_rdptr++;
  201f24:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201f26:	6928      	ldr	r0, [r5, #16]
  iqp->q_counter--;
  201f28:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201f2a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  201f2c:	61aa      	str	r2, [r5, #24]
  iqp->q_counter--;
  201f2e:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
  201f30:	780c      	ldrb	r4, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  201f32:	d301      	bcc.n	201f38 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  201f34:	68eb      	ldr	r3, [r5, #12]
  201f36:	61ab      	str	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
  201f38:	69eb      	ldr	r3, [r5, #28]
  201f3a:	b10b      	cbz	r3, 201f40 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  201f3c:	4628      	mov	r0, r5
  201f3e:	4798      	blx	r3
  201f40:	2300      	movs	r3, #0
  201f42:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  201f46:	4620      	mov	r0, r4
}
  201f48:	bd70      	pop	{r4, r5, r6, pc}
  201f4a:	f384 8811 	msr	BASEPRI, r4
  201f4e:	bd70      	pop	{r4, r5, r6, pc}

00201f50 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201f50:	300c      	adds	r0, #12
  201f52:	f7ff bfd5 	b.w	201f00 <iqGetTimeout>
  201f56:	bf00      	nop
	...

00201f60 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  201f60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  201f64:	300c      	adds	r0, #12
  201f66:	f7ff bfcb 	b.w	201f00 <iqGetTimeout>
  201f6a:	bf00      	nop
  201f6c:	0000      	movs	r0, r0
	...

00201f70 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
  201f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
  201f72:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
  201f76:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
  201f78:	b113      	cbz	r3, 201f80 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
  201f7a:	2300      	movs	r3, #0
  201f7c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
  201f80:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  if ((usbp->config->requests_hook_cb == NULL) ||
  201f84:	6862      	ldr	r2, [r4, #4]
  201f86:	68cb      	ldr	r3, [r1, #12]
  201f88:	6a1b      	ldr	r3, [r3, #32]
  201f8a:	6819      	ldr	r1, [r3, #0]
  201f8c:	685b      	ldr	r3, [r3, #4]
  201f8e:	65e1      	str	r1, [r4, #92]	; 0x5c
  201f90:	6623      	str	r3, [r4, #96]	; 0x60
  201f92:	6893      	ldr	r3, [r2, #8]
  201f94:	b36b      	cbz	r3, 201ff2 <_usb_ep0setup+0x82>
      !(usbp->config->requests_hook_cb(usbp))) {
  201f96:	4620      	mov	r0, r4
  201f98:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
  201f9a:	b350      	cbz	r0, 201ff2 <_usb_ep0setup+0x82>
  201f9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  201f9e:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  hw |= (uint16_t)*p << 8U;
  201fa2:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
  201fa6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
  max = (size_t)get_hword(&usbp->setup[6]);
  201faa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if (usbp->ep0n > max) {
  201fae:	429a      	cmp	r2, r3
  201fb0:	d201      	bcs.n	201fb6 <_usb_ep0setup+0x46>
    usbp->ep0n = max;
  201fb2:	4613      	mov	r3, r2
  201fb4:	6562      	str	r2, [r4, #84]	; 0x54
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
  201fb6:	0602      	lsls	r2, r0, #24
  201fb8:	f100 80e3 	bmi.w	202182 <_usb_ep0setup+0x212>
    if (usbp->ep0n != 0U) {
  201fbc:	2b00      	cmp	r3, #0
  201fbe:	f000 8091 	beq.w	2020e4 <_usb_ep0setup+0x174>
      usbp->ep0state = USB_EP0_OUT_RX;
  201fc2:	2215      	movs	r2, #21
  201fc4:	2320      	movs	r3, #32
  201fc6:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  201fca:	f383 8811 	msr	BASEPRI, r3
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  201fce:	8962      	ldrh	r2, [r4, #10]
  osp->rxcnt  = 0;
  201fd0:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
  201fd2:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_out(usbp, ep);
  201fd4:	4620      	mov	r0, r4
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  201fd6:	f042 0201 	orr.w	r2, r2, #1
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
  201fda:	6d21      	ldr	r1, [r4, #80]	; 0x50
  osp = usbp->epc[ep]->out_state;
  201fdc:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  201fde:	8162      	strh	r2, [r4, #10]
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
  201fe0:	6d62      	ldr	r2, [r4, #84]	; 0x54
  osp->rxbuf  = buf;
  201fe2:	6099      	str	r1, [r3, #8]
  osp->rxcnt  = 0;
  201fe4:	e9c3 2500 	strd	r2, r5, [r3]
  usb_lld_start_out(usbp, ep);
  201fe8:	f7fe f9a2 	bl	200330 <usb_lld_start_out.constprop.0>
  201fec:	f385 8811 	msr	BASEPRI, r5
}
  201ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
  201ff2:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  201ff6:	f010 0660 	ands.w	r6, r0, #96	; 0x60
  201ffa:	d11c      	bne.n	202036 <_usb_ep0setup+0xc6>
           ((uint32_t)usbp->setup[1] << 8U))) {
  201ffc:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  202000:	f000 037f 	and.w	r3, r0, #127	; 0x7f
  202004:	f240 3202 	movw	r2, #770	; 0x302
                                        USB_RTYPE_TYPE_MASK)) |
  202008:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  20200c:	4293      	cmp	r3, r2
  20200e:	f000 8180 	beq.w	202312 <_usb_ep0setup+0x3a2>
  202012:	d846      	bhi.n	2020a2 <_usb_ep0setup+0x132>
  202014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  202018:	f000 812c 	beq.w	202274 <_usb_ep0setup+0x304>
  20201c:	d922      	bls.n	202064 <_usb_ep0setup+0xf4>
  20201e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
  202022:	f000 8136 	beq.w	202292 <_usb_ep0setup+0x322>
  202026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  20202a:	d104      	bne.n	202036 <_usb_ep0setup+0xc6>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
  20202c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  202030:	2b01      	cmp	r3, #1
  202032:	f000 80dc 	beq.w	2021ee <_usb_ep0setup+0x27e>
  202036:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
  202038:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
  20203c:	6861      	ldr	r1, [r4, #4]
  20203e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  202042:	680d      	ldr	r5, [r1, #0]
  202044:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
  202048:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
  20204c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  202050:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  202054:	b115      	cbz	r5, 20205c <_usb_ep0setup+0xec>
  202056:	2106      	movs	r1, #6
  202058:	4620      	mov	r0, r4
  20205a:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
  20205c:	2306      	movs	r3, #6
  20205e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
  202062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  202064:	2b01      	cmp	r3, #1
  202066:	d062      	beq.n	20212e <_usb_ep0setup+0x1be>
  202068:	2b02      	cmp	r3, #2
  20206a:	d152      	bne.n	202112 <_usb_ep0setup+0x1a2>
    if ((usbp->setup[4] & 0x80U) != 0U) {
  20206c:	f994 1060 	ldrsb.w	r1, [r4, #96]	; 0x60
  202070:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
  202074:	2900      	cmp	r1, #0
  ctl = usbp->otg->ie[ep].DIEPCTL;
  202076:	f002 010f 	and.w	r1, r2, #15
  20207a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  20207c:	f2c0 80b0 	blt.w	2021e0 <_usb_ep0setup+0x270>
  ctl = usbp->otg->oe[ep].DOEPCTL;
  202080:	3158      	adds	r1, #88	; 0x58
  202082:	0149      	lsls	r1, r1, #5
  202084:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
  202086:	040d      	lsls	r5, r1, #16
  202088:	d5d6      	bpl.n	202038 <_usb_ep0setup+0xc8>
  if (ctl & DOEPCTL_STALL)
  20208a:	0289      	lsls	r1, r1, #10
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
  20208c:	f04f 0200 	mov.w	r2, #0
  202090:	f04f 0102 	mov.w	r1, #2
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
  202094:	bf4c      	ite	mi
  202096:	4db1      	ldrmi	r5, [pc, #708]	; (20235c <_usb_ep0setup+0x3ec>)
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
  202098:	4db1      	ldrpl	r5, [pc, #708]	; (202360 <_usb_ep0setup+0x3f0>)
  20209a:	65a2      	str	r2, [r4, #88]	; 0x58
  20209c:	e9c4 5114 	strd	r5, r1, [r4, #80]	; 0x50
        return true;
  2020a0:	e77f      	b.n	201fa2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  2020a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  2020a6:	f000 812c 	beq.w	202302 <_usb_ep0setup+0x392>
  2020aa:	d948      	bls.n	20213e <_usb_ep0setup+0x1ce>
  2020ac:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
  2020b0:	d139      	bne.n	202126 <_usb_ep0setup+0x1b6>
      if (usbp->state == USB_ACTIVE) {
  2020b2:	7823      	ldrb	r3, [r4, #0]
  2020b4:	2b04      	cmp	r3, #4
  2020b6:	f000 80a4 	beq.w	202202 <_usb_ep0setup+0x292>
      if (usbp->setup[2] != 0U) {
  2020ba:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  2020be:	b14b      	cbz	r3, 2020d4 <_usb_ep0setup+0x164>
        usbp->state = USB_ACTIVE;
  2020c0:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
  2020c2:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
  2020c4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
        usbp->state = USB_ACTIVE;
  2020c8:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
  2020ca:	6813      	ldr	r3, [r2, #0]
  2020cc:	b113      	cbz	r3, 2020d4 <_usb_ep0setup+0x164>
  2020ce:	2102      	movs	r1, #2
  2020d0:	4620      	mov	r0, r4
  2020d2:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
  2020d4:	2300      	movs	r3, #0
  2020d6:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  2020da:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  2020de:	65a3      	str	r3, [r4, #88]	; 0x58
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
  2020e0:	0603      	lsls	r3, r0, #24
  2020e2:	d467      	bmi.n	2021b4 <_usb_ep0setup+0x244>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
  2020e4:	220b      	movs	r2, #11
  2020e6:	2320      	movs	r3, #32
  2020e8:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  2020ec:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2020f0:	8922      	ldrh	r2, [r4, #8]
  isp->txbuf  = buf;
  2020f2:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
  2020f4:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_in(usbp, ep);
  2020f6:	4620      	mov	r0, r4
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2020f8:	f042 0201 	orr.w	r2, r2, #1
  usb_lld_start_in(usbp, ep);
  2020fc:	4629      	mov	r1, r5
  isp = usbp->epc[ep]->in_state;
  2020fe:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  202100:	8122      	strh	r2, [r4, #8]
  isp->txbuf  = buf;
  202102:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
  202104:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
  202108:	f7fe fad2 	bl	2006b0 <usb_lld_start_in>
  20210c:	f385 8811 	msr	BASEPRI, r5
}
  202110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  202112:	2b00      	cmp	r3, #0
  202114:	d18f      	bne.n	202036 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
  202116:	2202      	movs	r2, #2
  202118:	f104 0164 	add.w	r1, r4, #100	; 0x64
  20211c:	65a3      	str	r3, [r4, #88]	; 0x58
  20211e:	6521      	str	r1, [r4, #80]	; 0x50
  202120:	4613      	mov	r3, r2
  202122:	6562      	str	r2, [r4, #84]	; 0x54
    return true;
  202124:	e73d      	b.n	201fa2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  202126:	f640 4202 	movw	r2, #3074	; 0xc02
  20212a:	4293      	cmp	r3, r2
  20212c:	d183      	bne.n	202036 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
  20212e:	4b8d      	ldr	r3, [pc, #564]	; (202364 <_usb_ep0setup+0x3f4>)
  202130:	2202      	movs	r2, #2
  202132:	2100      	movs	r1, #0
  202134:	6523      	str	r3, [r4, #80]	; 0x50
  202136:	4613      	mov	r3, r2
  202138:	e9c4 2115 	strd	r2, r1, [r4, #84]	; 0x54
    return true;
  20213c:	e731      	b.n	201fa2 <_usb_ep0setup+0x32>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  20213e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
  202142:	f000 80c1 	beq.w	2022c8 <_usb_ep0setup+0x358>
  202146:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  20214a:	2b01      	cmp	r3, #1
  20214c:	f63f af73 	bhi.w	202036 <_usb_ep0setup+0xc6>
  hw |= (uint16_t)*p << 8U;
  202150:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
  202154:	4620      	mov	r0, r4
  202156:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
  202158:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
  20215c:	684d      	ldr	r5, [r1, #4]
  20215e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  202162:	f894 105f 	ldrb.w	r1, [r4, #95]	; 0x5f
  202166:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
  20216a:	47a8      	blx	r5
    if (dp == NULL) {
  20216c:	2800      	cmp	r0, #0
  20216e:	f43f af62 	beq.w	202036 <_usb_ep0setup+0xc6>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
  202172:	e9d0 3200 	ldrd	r3, r2, [r0]
  202176:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  20217a:	65a6      	str	r6, [r4, #88]	; 0x58
  20217c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
    return true;
  202180:	e70f      	b.n	201fa2 <_usb_ep0setup+0x32>
    if (usbp->ep0n != 0U) {
  202182:	b1bb      	cbz	r3, 2021b4 <_usb_ep0setup+0x244>
      usbp->ep0state = USB_EP0_IN_TX;
  202184:	2209      	movs	r2, #9
  202186:	2320      	movs	r3, #32
  202188:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  20218c:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  202190:	8922      	ldrh	r2, [r4, #8]
  isp->txcnt  = 0;
  202192:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
  202194:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_in(usbp, ep);
  202196:	4620      	mov	r0, r4
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  202198:	f042 0201 	orr.w	r2, r2, #1
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
  20219c:	6d26      	ldr	r6, [r4, #80]	; 0x50
  isp = usbp->epc[ep]->in_state;
  20219e:	695b      	ldr	r3, [r3, #20]
  usb_lld_start_in(usbp, ep);
  2021a0:	4629      	mov	r1, r5
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2021a2:	8122      	strh	r2, [r4, #8]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
  2021a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
  isp->txcnt  = 0;
  2021a6:	e883 0064 	stmia.w	r3, {r2, r5, r6}
  usb_lld_start_in(usbp, ep);
  2021aa:	f7fe fa81 	bl	2006b0 <usb_lld_start_in>
  2021ae:	f385 8811 	msr	BASEPRI, r5
}
  2021b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
  2021b4:	2214      	movs	r2, #20
  2021b6:	2320      	movs	r3, #32
  2021b8:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  2021bc:	f383 8811 	msr	BASEPRI, r3
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2021c0:	8962      	ldrh	r2, [r4, #10]
  osp->rxbuf  = buf;
  2021c2:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
  2021c4:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_out(usbp, ep);
  2021c6:	4620      	mov	r0, r4
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2021c8:	f042 0201 	orr.w	r2, r2, #1
  osp = usbp->epc[ep]->out_state;
  2021cc:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2021ce:	8162      	strh	r2, [r4, #10]
  osp->rxbuf  = buf;
  2021d0:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
  2021d2:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
  2021d6:	f7fe f8ab 	bl	200330 <usb_lld_start_out.constprop.0>
  2021da:	f385 8811 	msr	BASEPRI, r5
}
  2021de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ctl = usbp->otg->ie[ep].DIEPCTL;
  2021e0:	3148      	adds	r1, #72	; 0x48
  2021e2:	0149      	lsls	r1, r1, #5
  2021e4:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DIEPCTL_USBAEP))
  2021e6:	040e      	lsls	r6, r1, #16
  2021e8:	f57f af26 	bpl.w	202038 <_usb_ep0setup+0xc8>
  2021ec:	e74d      	b.n	20208a <_usb_ep0setup+0x11a>
      usbp->status |= 2U;
  2021ee:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
      usbSetupTransfer(usbp, NULL, 0, NULL);
  2021f2:	6526      	str	r6, [r4, #80]	; 0x50
      usbp->status |= 2U;
  2021f4:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
  2021f8:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
      usbp->status |= 2U;
  2021fc:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      return true;
  202200:	e76e      	b.n	2020e0 <_usb_ep0setup+0x170>
  202202:	2320      	movs	r3, #32
  202204:	f383 8811 	msr	BASEPRI, r3
  otg_ram_reset(usbp);
  202208:	6f20      	ldr	r0, [r4, #112]	; 0x70
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  20220a:	4631      	mov	r1, r6
  usbp->transmitting &= 1U;
  20220c:	68a3      	ldr	r3, [r4, #8]
    otgp->ie[i].DIEPCTL = 0;
  20220e:	4632      	mov	r2, r6
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
  202210:	6807      	ldr	r7, [r0, #0]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
  202212:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  202216:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    usbp->epc[i] = NULL;
  20221a:	6126      	str	r6, [r4, #16]
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
  20221c:	6767      	str	r7, [r4, #116]	; 0x74
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  20221e:	6887      	ldr	r7, [r0, #8]
  usbp->transmitting &= 1U;
  202220:	60a3      	str	r3, [r4, #8]
    usbp->epc[i] = NULL;
  202222:	e9c4 6605 	strd	r6, r6, [r4, #20]
  202226:	e9c4 6607 	strd	r6, r6, [r4, #28]
  otg_disable_ep(usbp);
  20222a:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    otgp->ie[i].DIEPTSIZ = 0;
  20222c:	eb06 1341 	add.w	r3, r6, r1, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  202230:	428f      	cmp	r7, r1
  202232:	f101 0101 	add.w	r1, r1, #1
    otgp->ie[i].DIEPCTL = 0;
  202236:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
  20223a:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
  20223e:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
  202242:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
  202246:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  20224a:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  20224e:	d1ed      	bne.n	20222c <_usb_ep0setup+0x2bc>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
  202250:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  202254:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
  202258:	f382 8811 	msr	BASEPRI, r2
        usbp->state = USB_SELECTED;
  20225c:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
  20225e:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
  202260:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
        usbp->state = USB_SELECTED;
  202264:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
  202266:	681b      	ldr	r3, [r3, #0]
  202268:	2b00      	cmp	r3, #0
  20226a:	f43f af26 	beq.w	2020ba <_usb_ep0setup+0x14a>
  20226e:	4620      	mov	r0, r4
  202270:	4798      	blx	r3
  202272:	e722      	b.n	2020ba <_usb_ep0setup+0x14a>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
  202274:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  202278:	2b01      	cmp	r3, #1
  20227a:	f47f aedc 	bne.w	202036 <_usb_ep0setup+0xc6>
      usbp->status &= ~2U;
  20227e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
      usbSetupTransfer(usbp, NULL, 0, NULL);
  202282:	6526      	str	r6, [r4, #80]	; 0x50
      usbp->status &= ~2U;
  202284:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
  202288:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
      usbp->status &= ~2U;
  20228c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      return true;
  202290:	e726      	b.n	2020e0 <_usb_ep0setup+0x170>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
  202292:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  202296:	2b00      	cmp	r3, #0
  202298:	f47f aecd 	bne.w	202036 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
  20229c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
  2022a0:	f013 020f 	ands.w	r2, r3, #15
  2022a4:	d00b      	beq.n	2022be <_usb_ep0setup+0x34e>
      if ((usbp->setup[4] & 0x80U) != 0U) {
  2022a6:	f013 0f80 	tst.w	r3, #128	; 0x80
  2022aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  2022ac:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  2022b0:	d146      	bne.n	202340 <_usb_ep0setup+0x3d0>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
  2022b2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
  2022b6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  2022ba:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    usbSetupTransfer(usbp, NULL, 0, NULL);
  2022be:	2300      	movs	r3, #0
  2022c0:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  2022c4:	65a3      	str	r3, [r4, #88]	; 0x58
    return true;
  2022c6:	e70b      	b.n	2020e0 <_usb_ep0setup+0x170>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
  2022c8:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
  2022cc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
  2022d0:	d1f5      	bne.n	2022be <_usb_ep0setup+0x34e>
  usbp->address = usbp->setup[2];
  2022d2:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
  stm32_otg_t *otgp = usbp->otg;
  2022d6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  2022d8:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
  2022dc:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
  2022e0:	6865      	ldr	r5, [r4, #4]
  2022e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  2022e6:	682d      	ldr	r5, [r5, #0]
  2022e8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  2022ec:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  2022f0:	b125      	cbz	r5, 2022fc <_usb_ep0setup+0x38c>
  2022f2:	4620      	mov	r0, r4
  2022f4:	2101      	movs	r1, #1
  2022f6:	47a8      	blx	r5
  2022f8:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
  usbp->state = USB_SELECTED;
  2022fc:	2303      	movs	r3, #3
  2022fe:	7023      	strb	r3, [r4, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
  202300:	e7dd      	b.n	2022be <_usb_ep0setup+0x34e>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
  202302:	f104 0367 	add.w	r3, r4, #103	; 0x67
  202306:	2201      	movs	r2, #1
  202308:	65a6      	str	r6, [r4, #88]	; 0x58
  20230a:	6523      	str	r3, [r4, #80]	; 0x50
  20230c:	4613      	mov	r3, r2
  20230e:	6562      	str	r2, [r4, #84]	; 0x54
    return true;
  202310:	e647      	b.n	201fa2 <_usb_ep0setup+0x32>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
  202312:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  202316:	2b00      	cmp	r3, #0
  202318:	f47f ae8d 	bne.w	202036 <_usb_ep0setup+0xc6>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
  20231c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
  202320:	f013 020f 	ands.w	r2, r3, #15
  202324:	d0cb      	beq.n	2022be <_usb_ep0setup+0x34e>
      if ((usbp->setup[4] & 0x80U) != 0U) {
  202326:	f013 0f80 	tst.w	r3, #128	; 0x80
  20232a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  20232c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  202330:	d10d      	bne.n	20234e <_usb_ep0setup+0x3de>
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
  202332:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
  202336:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  20233a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
  20233e:	e7be      	b.n	2022be <_usb_ep0setup+0x34e>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
  202340:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  202344:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  202348:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  20234c:	e7b7      	b.n	2022be <_usb_ep0setup+0x34e>
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
  20234e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  202352:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  202356:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  20235a:	e7b0      	b.n	2022be <_usb_ep0setup+0x34e>
  20235c:	0800324c 	.word	0x0800324c
  202360:	080031e4 	.word	0x080031e4
  202364:	08003328 	.word	0x08003328
	...

00202370 <main>:
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  202370:	4a73      	ldr	r2, [pc, #460]	; (202540 <main+0x1d0>)
#include "tests.h"

static void testsRoutines( void );

int main(void)
{
  202372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202376:	b087      	sub	sp, #28
  ch.rlist.prio = NOPRIO;
  202378:	2500      	movs	r5, #0
  20237a:	f102 031c 	add.w	r3, r2, #28
  ch.vtlist.delta = (systime_t)-1;
  20237e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  tmp->cumulative = (rttime_t)0;
  202382:	f04f 0800 	mov.w	r8, #0
  202386:	f04f 0900 	mov.w	r9, #0
  chTMStartMeasurementX(&tm);
  20238a:	4668      	mov	r0, sp
  tqp->next = (thread_t *)tqp;
  20238c:	6012      	str	r2, [r2, #0]
  tqp->prev = (thread_t *)tqp;
  20238e:	6052      	str	r2, [r2, #4]
  tqp->next = (thread_t *)tqp;
  202390:	4614      	mov	r4, r2
  202392:	6095      	str	r5, [r2, #8]
  ch.vtlist.lasttime = (systime_t)0;
  202394:	6295      	str	r5, [r2, #40]	; 0x28
  ch.tm.offset = (rtcnt_t)0;
  202396:	6755      	str	r5, [r2, #116]	; 0x74
  ch.vtlist.delta = (systime_t)-1;
  202398:	6256      	str	r6, [r2, #36]	; 0x24
  tmp->n          = (ucnt_t)0;
  20239a:	9503      	str	r5, [sp, #12]
  tmp->best       = (rtcnt_t)-1;
  20239c:	9600      	str	r6, [sp, #0]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  20239e:	e9c2 3307 	strd	r3, r3, [r2, #28]
  tmp->cumulative = (rttime_t)0;
  2023a2:	e9cd 8904 	strd	r8, r9, [sp, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  2023a6:	e9c2 2204 	strd	r2, r2, [r2, #16]
  tmp->last       = (rtcnt_t)0;
  2023aa:	e9cd 5501 	strd	r5, r5, [sp, #4]
  chTMStartMeasurementX(&tm);
  2023ae:	f7fd ffa7 	bl	200300 <chTMStartMeasurementX.constprop.0>
  chTMStopMeasurementX(&tm);
  2023b2:	4668      	mov	r0, sp
  2023b4:	f7fe ff2c 	bl	201210 <chTMStopMeasurementX>
  ch_memcore.nextmem = __heap_base__;
  2023b8:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 202588 <main+0x218>
  2023bc:	4961      	ldr	r1, [pc, #388]	; (202544 <main+0x1d4>)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  2023be:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  tp->flags     = CH_FLAG_MODE_STATIC;
  2023c2:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  REG_INSERT(tp);
  2023c6:	f104 0030 	add.w	r0, r4, #48	; 0x30
  2023ca:	f8ce 1000 	str.w	r1, [lr]
  tp->prio      = prio;
  2023ce:	f04f 0980 	mov.w	r9, #128	; 0x80
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  2023d2:	495d      	ldr	r1, [pc, #372]	; (202548 <main+0x1d8>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
  2023d4:	4b5d      	ldr	r3, [pc, #372]	; (20254c <main+0x1dc>)
  2023d6:	68cf      	ldr	r7, [r1, #12]
  2023d8:	4a5d      	ldr	r2, [pc, #372]	; (202550 <main+0x1e0>)
  2023da:	f103 080c 	add.w	r8, r3, #12
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  2023de:	ea07 0c0c 	and.w	ip, r7, ip
  tp->name      = name;
  2023e2:	4f5c      	ldr	r7, [pc, #368]	; (202554 <main+0x1e4>)
  2023e4:	601a      	str	r2, [r3, #0]
  2023e6:	64a7      	str	r7, [r4, #72]	; 0x48
  ch.tm.offset = tm.last;
  2023e8:	9a02      	ldr	r2, [sp, #8]
  reg_value  =  (reg_value                                   |
  2023ea:	4f5b      	ldr	r7, [pc, #364]	; (202558 <main+0x1e8>)
  2023ec:	6762      	str	r2, [r4, #116]	; 0x74
  tp->refs      = (trefs_t)1;
  2023ee:	2201      	movs	r2, #1
  2023f0:	ea4c 0707 	orr.w	r7, ip, r7
  REG_INSERT(tp);
  2023f4:	f8d4 c014 	ldr.w	ip, [r4, #20]
  tp->prio      = prio;
  2023f8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  tp->realprio  = prio;
  2023fc:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
  tlp->next = (thread_t *)tlp;
  202400:	f104 0958 	add.w	r9, r4, #88	; 0x58
  tp->epending  = (eventmask_t)0;
  202404:	6665      	str	r5, [r4, #100]	; 0x64
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  202406:	615d      	str	r5, [r3, #20]
  tqp->prev = (thread_t *)tqp;
  202408:	f8c3 8010 	str.w	r8, [r3, #16]
  tp->refs      = (trefs_t)1;
  20240c:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
  REG_INSERT(tp);
  202410:	f8c4 c044 	str.w	ip, [r4, #68]	; 0x44
  tp->mtxlist   = NULL;
  202414:	66a5      	str	r5, [r4, #104]	; 0x68
  REG_INSERT(tp);
  202416:	6424      	str	r4, [r4, #64]	; 0x40
  H_NEXT(&default_heap.header) = NULL;
  202418:	605d      	str	r5, [r3, #4]
  20241a:	f8cc 0010 	str.w	r0, [ip, #16]
  tqp->next = (thread_t *)tqp;
  20241e:	f104 0c5c 	add.w	ip, r4, #92	; 0x5c
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  202422:	60cf      	str	r7, [r1, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  202424:	4f4d      	ldr	r7, [pc, #308]	; (20255c <main+0x1ec>)
  202426:	e9c3 5802 	strd	r5, r8, [r3, #8]
  20242a:	68fb      	ldr	r3, [r7, #12]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  20242c:	f04f 0810 	mov.w	r8, #16
  202430:	6160      	str	r0, [r4, #20]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  202432:	61a0      	str	r0, [r4, #24]
  202434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  ch_memcore.endmem  = __heap_end__;
  202438:	4849      	ldr	r0, [pc, #292]	; (202560 <main+0x1f0>)
  currp->wabase = NULL;
  20243a:	64e5      	str	r5, [r4, #76]	; 0x4c
  currp->state = CH_STATE_CURRENT;
  20243c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  tlp->next = (thread_t *)tlp;
  202440:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
  202444:	60fb      	str	r3, [r7, #12]
  202446:	2720      	movs	r7, #32
  DWT->LAR = 0xC5ACCE55U;
  202448:	4b46      	ldr	r3, [pc, #280]	; (202564 <main+0x1f4>)
  20244a:	f8ce 0004 	str.w	r0, [lr, #4]
  20244e:	4846      	ldr	r0, [pc, #280]	; (202568 <main+0x1f8>)
  tqp->prev = (thread_t *)tqp;
  202450:	e9c4 cc17 	strd	ip, ip, [r4, #92]	; 0x5c
  202454:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  202458:	6818      	ldr	r0, [r3, #0]
  20245a:	4310      	orrs	r0, r2
  20245c:	6018      	str	r0, [r3, #0]
  20245e:	f881 801f 	strb.w	r8, [r1, #31]
  202462:	f881 7022 	strb.w	r7, [r1, #34]	; 0x22
  202466:	f385 8811 	msr	BASEPRI, r5
  __ASM volatile ("cpsie i" : : : "memory");
  20246a:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  20246c:	f387 8811 	msr	BASEPRI, r7
  tp->wabase = tdp->wbase;
  202470:	4b3e      	ldr	r3, [pc, #248]	; (20256c <main+0x1fc>)
  tp->state     = CH_STATE_WTSTART;
  202472:	f04f 0c02 	mov.w	ip, #2
  REG_INSERT(tp);
  202476:	6961      	ldr	r1, [r4, #20]
  202478:	f103 0090 	add.w	r0, r3, #144	; 0x90
  tp->prio      = prio;
  20247c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  tp->refs      = (trefs_t)1;
  202480:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  202484:	f103 086c 	add.w	r8, r3, #108	; 0x6c
  REG_INSERT(tp);
  202488:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tlp->next = (thread_t *)tlp;
  20248c:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
  tp->state     = CH_STATE_WTSTART;
  202490:	f8a3 c0b0 	strh.w	ip, [r3, #176]	; 0xb0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  202494:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 20258c <main+0x21c>
  tp->name      = name;
  202498:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 202590 <main+0x220>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  20249c:	4c34      	ldr	r4, [pc, #208]	; (202570 <main+0x200>)
  REG_INSERT(tp);
  20249e:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2024a2:	671d      	str	r5, [r3, #112]	; 0x70
  tp->epending  = (eventmask_t)0;
  2024a4:	f8c3 50c4 	str.w	r5, [r3, #196]	; 0xc4
  tp->wabase = tdp->wbase;
  2024a8:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2024ac:	f8c3 809c 	str.w	r8, [r3, #156]	; 0x9c
  2024b0:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
  tp->name      = name;
  2024b4:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2024b8:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  tp->mtxlist   = NULL;
  2024bc:	e9c3 5232 	strd	r5, r2, [r3, #200]	; 0xc8
  tqp->next = (thread_t *)tqp;
  2024c0:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
  REG_INSERT(tp);
  2024c4:	6108      	str	r0, [r1, #16]
  2024c6:	f849 0c44 	str.w	r0, [r9, #-68]
  tqp->prev = (thread_t *)tqp;
  2024ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  tqp->next = (thread_t *)tqp;
  2024ce:	e9c3 722e 	strd	r7, r2, [r3, #184]	; 0xb8
  chSchWakeupS(tp, MSG_OK);
  2024d2:	f7ff fae5 	bl	201aa0 <chSchWakeupS.constprop.0>
  2024d6:	f385 8811 	msr	BASEPRI, r5
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  2024da:	4b26      	ldr	r3, [pc, #152]	; (202574 <main+0x204>)
  PWR->CR1 |= PWR_CR1_DBP;
  2024dc:	4926      	ldr	r1, [pc, #152]	; (202578 <main+0x208>)
  rccResetAHB1(~0);
  2024de:	691a      	ldr	r2, [r3, #16]
  2024e0:	611e      	str	r6, [r3, #16]
  2024e2:	611d      	str	r5, [r3, #16]
  rccResetAHB2(~0);
  2024e4:	695a      	ldr	r2, [r3, #20]
  2024e6:	615e      	str	r6, [r3, #20]
  2024e8:	615d      	str	r5, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  2024ea:	6a1a      	ldr	r2, [r3, #32]
  2024ec:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
  2024f0:	621a      	str	r2, [r3, #32]
  2024f2:	621d      	str	r5, [r3, #32]
  rccResetAPB2(~0);
  2024f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  2024f6:	625e      	str	r6, [r3, #36]	; 0x24
  2024f8:	625d      	str	r5, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  2024fa:	680a      	ldr	r2, [r1, #0]
  2024fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  202500:	600a      	str	r2, [r1, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  202502:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  202504:	f402 7240 	and.w	r2, r2, #768	; 0x300
  202508:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  20250c:	d003      	beq.n	202516 <main+0x1a6>
    RCC->BDCR = RCC_BDCR_BDRST;
  20250e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  202512:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  202514:	671d      	str	r5, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  202516:	4b17      	ldr	r3, [pc, #92]	; (202574 <main+0x204>)
  202518:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  20251a:	4619      	mov	r1, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  20251c:	f042 0219 	orr.w	r2, r2, #25
  202520:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  202522:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  202524:	079b      	lsls	r3, r3, #30
  202526:	d5fc      	bpl.n	202522 <main+0x1b2>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  202528:	4813      	ldr	r0, [pc, #76]	; (202578 <main+0x208>)
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  20252a:	f04f 0b00 	mov.w	fp, #0
  20252e:	4913      	ldr	r1, [pc, #76]	; (20257c <main+0x20c>)
  202530:	6842      	ldr	r2, [r0, #4]
    _stm32_dma_streams[i].stream->CR = 0U;
  202532:	465b      	mov	r3, fp
  202534:	4d12      	ldr	r5, [pc, #72]	; (202580 <main+0x210>)
  202536:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  20253a:	4e12      	ldr	r6, [pc, #72]	; (202584 <main+0x214>)
  20253c:	6042      	str	r2, [r0, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  20253e:	e02b      	b.n	202598 <main+0x228>
  202540:	20000bb8 	.word	0x20000bb8
  202544:	20020048 	.word	0x20020048
  202548:	e000ed00 	.word	0xe000ed00
  20254c:	20000d10 	.word	0x20000d10
  202550:	00200471 	.word	0x00200471
  202554:	080031e8 	.word	0x080031e8
  202558:	05fa0300 	.word	0x05fa0300
  20255c:	e000edf0 	.word	0xe000edf0
  202560:	20080000 	.word	0x20080000
  202564:	e0001000 	.word	0xe0001000
  202568:	c5acce55 	.word	0xc5acce55
  20256c:	20000c30 	.word	0x20000c30
  202570:	002002e9 	.word	0x002002e9
  202574:	40023800 	.word	0x40023800
  202578:	40007000 	.word	0x40007000
  20257c:	08003130 	.word	0x08003130
  202580:	40026010 	.word	0x40026010
  202584:	20000d2c 	.word	0x20000d2c
  202588:	20000d08 	.word	0x20000d08
  20258c:	00201a81 	.word	0x00201a81
  202590:	08003114 	.word	0x08003114
  202594:	f851 5c0c 	ldr.w	r5, [r1, #-12]
    _stm32_dma_streams[i].stream->CR = 0U;
  202598:	602b      	str	r3, [r5, #0]
    dma_isr_redir[i].dma_func = NULL;
  20259a:	310c      	adds	r1, #12
  20259c:	f846 303b 	str.w	r3, [r6, fp, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  2025a0:	f10b 0b01 	add.w	fp, fp, #1
  2025a4:	f1bb 0f10 	cmp.w	fp, #16
  2025a8:	d1f4      	bne.n	202594 <main+0x224>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  2025aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  2025ae:	48d9      	ldr	r0, [pc, #868]	; (202914 <main+0x5a4>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  2025b0:	49d9      	ldr	r1, [pc, #868]	; (202918 <main+0x5a8>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2025b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
  DMA1->LIFCR = 0xFFFFFFFFU;
  2025b6:	6084      	str	r4, [r0, #8]
  gpiop->ODR     = config->odr;
  2025b8:	f64f 76ff 	movw	r6, #65535	; 0xffff
  DMA1->HIFCR = 0xFFFFFFFFU;
  2025bc:	60c4      	str	r4, [r0, #12]
  2025be:	f64b 787e 	movw	r8, #49022	; 0xbf7e
  DMA2->LIFCR = 0xFFFFFFFFU;
  2025c2:	608c      	str	r4, [r1, #8]
  gpiop->AFRH    = config->afrh;
  2025c4:	f44f 0e30 	mov.w	lr, #11534336	; 0xb00000
  DMA2->HIFCR = 0xFFFFFFFFU;
  2025c8:	60cc      	str	r4, [r1, #12]
  gpiop->OSPEEDR = config->ospeedr;
  2025ca:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2025ce:	4cd3      	ldr	r4, [pc, #844]	; (20291c <main+0x5ac>)
  gpiop->MODER   = config->moder;
  2025d0:	f640 2008 	movw	r0, #2568	; 0xa08
  gpiop->PUPDR   = config->pupdr;
  2025d4:	f04f 3955 	mov.w	r9, #1431655765	; 0x55555555
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  2025d8:	4dd1      	ldr	r5, [pc, #836]	; (202920 <main+0x5b0>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  2025da:	6b27      	ldr	r7, [r4, #48]	; 0x30
  sdp->vmt = &vmt;
  2025dc:	49d1      	ldr	r1, [pc, #836]	; (202924 <main+0x5b4>)
  2025de:	4317      	orrs	r7, r2
  2025e0:	6327      	str	r7, [r4, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  2025e2:	6d27      	ldr	r7, [r4, #80]	; 0x50
  2025e4:	ea47 0a02 	orr.w	sl, r7, r2
  gpiop->OTYPER  = config->otyper;
  2025e8:	4acf      	ldr	r2, [pc, #828]	; (202928 <main+0x5b8>)
 *
 * @init
 */
void dacObjectInit(DACDriver *dacp) {

  dacp->state = DAC_STOP;
  2025ea:	4fd0      	ldr	r7, [pc, #832]	; (20292c <main+0x5bc>)
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  2025ec:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
  2025f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
  2025f4:	f8df a374 	ldr.w	sl, [pc, #884]	; 20296c <main+0x5fc>
  gpiop->OTYPER  = config->otyper;
  2025f8:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2025fa:	6094      	str	r4, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
  2025fc:	f8c2 a00c 	str.w	sl, [r2, #12]
  gpiop->AFRL    = config->afrl;
  202600:	f8df a36c 	ldr.w	sl, [pc, #876]	; 202970 <main+0x600>
  gpiop->ODR     = config->odr;
  202604:	6156      	str	r6, [r2, #20]
  gpiop->AFRL    = config->afrl;
  202606:	f8c2 a020 	str.w	sl, [r2, #32]
  gpiop->AFRH    = config->afrh;
  20260a:	f8df a368 	ldr.w	sl, [pc, #872]	; 202974 <main+0x604>
  20260e:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202612:	f8df a364 	ldr.w	sl, [pc, #868]	; 202978 <main+0x608>
  202616:	f8c2 a000 	str.w	sl, [r2]
  gpiop->PUPDR   = config->pupdr;
  20261a:	f10a 5ad5 	add.w	sl, sl, #446693376	; 0x1aa00000
  gpiop->OTYPER  = config->otyper;
  20261e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  gpiop->PUPDR   = config->pupdr;
  202622:	f50a 2ad2 	add.w	sl, sl, #430080	; 0x69000
  gpiop->OSPEEDR = config->ospeedr;
  202626:	f8c2 4408 	str.w	r4, [r2, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  20262a:	f20a 5a2c 	addw	sl, sl, #1324	; 0x52c
  20262e:	f8c2 a40c 	str.w	sl, [r2, #1036]	; 0x40c
  202632:	468a      	mov	sl, r1
  gpiop->ODR     = config->odr;
  202634:	f8c2 8414 	str.w	r8, [r2, #1044]	; 0x414
  202638:	f105 0818 	add.w	r8, r5, #24
  gpiop->AFRL    = config->afrl;
  20263c:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  202640:	f8c2 e424 	str.w	lr, [r2, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  202644:	f8df e334 	ldr.w	lr, [pc, #820]	; 20297c <main+0x60c>
  202648:	f8c2 e400 	str.w	lr, [r2, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  20264c:	f8df e330 	ldr.w	lr, [pc, #816]	; 202980 <main+0x610>
  202650:	4ab7      	ldr	r2, [pc, #732]	; (202930 <main+0x5c0>)
  202652:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202656:	f8ce c008 	str.w	ip, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
  20265a:	f8df c328 	ldr.w	ip, [pc, #808]	; 202984 <main+0x614>
  20265e:	f8ce c00c 	str.w	ip, [lr, #12]
  gpiop->AFRL    = config->afrl;
  202662:	f8df c324 	ldr.w	ip, [pc, #804]	; 202988 <main+0x618>
  gpiop->ODR     = config->odr;
  202666:	f8ce 6014 	str.w	r6, [lr, #20]
  gpiop->AFRL    = config->afrl;
  20266a:	f8ce c020 	str.w	ip, [lr, #32]
  gpiop->OTYPER  = config->otyper;
  20266e:	f8df c31c 	ldr.w	ip, [pc, #796]	; 20298c <main+0x61c>
  gpiop->AFRH    = config->afrh;
  202672:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202676:	f8ce 0000 	str.w	r0, [lr]
  gpiop->OSPEEDR = config->ospeedr;
  20267a:	f46f 1e40 	mvn.w	lr, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  20267e:	f8cc 3004 	str.w	r3, [ip, #4]
  202682:	2001      	movs	r0, #1
  gpiop->OSPEEDR = config->ospeedr;
  202684:	f8cc e008 	str.w	lr, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
  202688:	f8df e304 	ldr.w	lr, [pc, #772]	; 202990 <main+0x620>
  20268c:	f8cc e00c 	str.w	lr, [ip, #12]
  gpiop->AFRH    = config->afrh;
  202690:	f04f 0e77 	mov.w	lr, #119	; 0x77
  gpiop->ODR     = config->odr;
  202694:	f8cc 6014 	str.w	r6, [ip, #20]
  gpiop->AFRL    = config->afrl;
  202698:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
  20269c:	f8cc e024 	str.w	lr, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2026a0:	f44f 2e20 	mov.w	lr, #655360	; 0xa0000
  2026a4:	4674      	mov	r4, lr
  2026a6:	f8cc e000 	str.w	lr, [ip]
  gpiop->OSPEEDR = config->ospeedr;
  2026aa:	f8df c2e8 	ldr.w	ip, [pc, #744]	; 202994 <main+0x624>
  gpiop->OTYPER  = config->otyper;
  2026ae:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
  2026b2:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 202998 <main+0x628>
  2026b6:	f5a4 24fe 	sub.w	r4, r4, #520192	; 0x7f000
  2026ba:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2026bc:	f8c4 c008 	str.w	ip, [r4, #8]
  2026c0:	f8df c2d8 	ldr.w	ip, [pc, #728]	; 20299c <main+0x62c>
  gpiop->PUPDR   = config->pupdr;
  2026c4:	f8c4 900c 	str.w	r9, [r4, #12]
  gpiop->ODR     = config->odr;
  2026c8:	6166      	str	r6, [r4, #20]
  gpiop->AFRL    = config->afrl;
  2026ca:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  2026cc:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2026ce:	6023      	str	r3, [r4, #0]
  gpiop->OTYPER  = config->otyper;
  2026d0:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2026d4:	f8ce c008 	str.w	ip, [lr, #8]
  gpiop->OTYPER  = config->otyper;
  2026d8:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 2029a0 <main+0x630>
  gpiop->PUPDR   = config->pupdr;
  2026dc:	f8ce 900c 	str.w	r9, [lr, #12]
  gpiop->ODR     = config->odr;
  2026e0:	f8ce 6014 	str.w	r6, [lr, #20]
  gpiop->AFRL    = config->afrl;
  2026e4:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
  2026e8:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2026ec:	f8ce 3000 	str.w	r3, [lr]
  gpiop->OSPEEDR = config->ospeedr;
  2026f0:	f8df e2b0 	ldr.w	lr, [pc, #688]	; 2029a4 <main+0x634>
  gpiop->OTYPER  = config->otyper;
  2026f4:	f8cc 3004 	str.w	r3, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2026f8:	f8cc e008 	str.w	lr, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
  2026fc:	f8df e2a8 	ldr.w	lr, [pc, #680]	; 2029a8 <main+0x638>
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  202700:	4c8c      	ldr	r4, [pc, #560]	; (202934 <main+0x5c4>)
  202702:	f8cc e00c 	str.w	lr, [ip, #12]
  gpiop->AFRH    = config->afrh;
  202706:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 2029ac <main+0x63c>
  gpiop->ODR     = config->odr;
  20270a:	f8cc 6014 	str.w	r6, [ip, #20]
  gpiop->AFRL    = config->afrl;
  20270e:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
  202712:	f8cc e024 	str.w	lr, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202716:	f04f 6e08 	mov.w	lr, #142606336	; 0x8800000
  20271a:	f8cc e000 	str.w	lr, [ip]
  gpiop->OSPEEDR = config->ospeedr;
  20271e:	f04f 0e0f 	mov.w	lr, #15
  gpiop->OTYPER  = config->otyper;
  202722:	f8cc 3404 	str.w	r3, [ip, #1028]	; 0x404
  202726:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  20272a:	f8cc e008 	str.w	lr, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
  20272e:	f8df e280 	ldr.w	lr, [pc, #640]	; 2029b0 <main+0x640>
  202732:	f8cc e00c 	str.w	lr, [ip, #12]
  gpiop->OTYPER  = config->otyper;
  202736:	f8df e27c 	ldr.w	lr, [pc, #636]	; 2029b4 <main+0x644>
  gpiop->ODR     = config->odr;
  20273a:	f8cc 6014 	str.w	r6, [ip, #20]
  gpiop->AFRL    = config->afrl;
  20273e:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
  202742:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202746:	f8cc 3000 	str.w	r3, [ip]
  gpiop->OTYPER  = config->otyper;
  20274a:	f8cc 3404 	str.w	r3, [ip, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  20274e:	f8cc 3408 	str.w	r3, [ip, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  202752:	f8cc 940c 	str.w	r9, [ip, #1036]	; 0x40c
  adcp->config   = NULL;
  202756:	606b      	str	r3, [r5, #4]
  gpiop->ODR     = config->odr;
  202758:	f8cc 6414 	str.w	r6, [ip, #1044]	; 0x414
  adcp->samples  = NULL;
  20275c:	60ab      	str	r3, [r5, #8]
  gpiop->AFRL    = config->afrl;
  20275e:	f8cc 3420 	str.w	r3, [ip, #1056]	; 0x420
  adcp->depth    = 0;
  202762:	60eb      	str	r3, [r5, #12]
  gpiop->AFRH    = config->afrh;
  202764:	f8cc 3424 	str.w	r3, [ip, #1060]	; 0x424
  adcp->grpp     = NULL;
  202768:	612b      	str	r3, [r5, #16]
  gpiop->MODER   = config->moder;
  20276a:	f8cc 3400 	str.w	r3, [ip, #1024]	; 0x400
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  20276e:	616b      	str	r3, [r5, #20]
  gpiop->OTYPER  = config->otyper;
  202770:	f8cc 3804 	str.w	r3, [ip, #2052]	; 0x804
  202774:	622b      	str	r3, [r5, #32]
  gpiop->OSPEEDR = config->ospeedr;
  202776:	f8cc 3808 	str.w	r3, [ip, #2056]	; 0x808
  20277a:	62ec      	str	r4, [r5, #44]	; 0x2c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20277c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  gpiop->PUPDR   = config->pupdr;
  202780:	f8cc 980c 	str.w	r9, [ip, #2060]	; 0x80c
  202784:	f8c5 8018 	str.w	r8, [r5, #24]
  gpiop->ODR     = config->odr;
  202788:	f8cc 6814 	str.w	r6, [ip, #2068]	; 0x814
  tqp->prev = (thread_t *)tqp;
  20278c:	f8c5 801c 	str.w	r8, [r5, #28]
  tqp->next = (thread_t *)tqp;
  202790:	f107 0818 	add.w	r8, r7, #24
  gpiop->AFRL    = config->afrl;
  202794:	f8cc 3820 	str.w	r3, [ip, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  202798:	f8cc 3824 	str.w	r3, [ip, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  20279c:	f8cc 3800 	str.w	r3, [ip, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
  2027a0:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2027a4:	f8ce 3008 	str.w	r3, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
  2027a8:	f8ce 900c 	str.w	r9, [lr, #12]
  PWMD1.channels = STM32_TIM1_CHANNELS;
  2027ac:	f04f 0906 	mov.w	r9, #6
  gpiop->ODR     = config->odr;
  2027b0:	f8ce 6014 	str.w	r6, [lr, #20]
  ADCD1.adc = ADC1;
  2027b4:	4e60      	ldr	r6, [pc, #384]	; (202938 <main+0x5c8>)
  gpiop->AFRL    = config->afrl;
  2027b6:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
  2027ba:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2027be:	f8ce 3000 	str.w	r3, [lr]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2027c2:	f04f 0e60 	mov.w	lr, #96	; 0x60
  2027c6:	62ae      	str	r6, [r5, #40]	; 0x28
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  2027c8:	4e5c      	ldr	r6, [pc, #368]	; (20293c <main+0x5cc>)
  adcp->state    = ADC_STOP;
  2027ca:	7028      	strb	r0, [r5, #0]
  2027cc:	632e      	str	r6, [r5, #48]	; 0x30
  2027ce:	f101 060c 	add.w	r6, r1, #12
  2027d2:	4d5b      	ldr	r5, [pc, #364]	; (202940 <main+0x5d0>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
  2027d4:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 2029b8 <main+0x648>
  2027d8:	f885 e312 	strb.w	lr, [r5, #786]	; 0x312
  2027dc:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 2029bc <main+0x64c>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2027e0:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2027e4:	602c      	str	r4, [r5, #0]
  2027e6:	f84a eb04 	str.w	lr, [sl], #4
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  2027ea:	f8c1 a004 	str.w	sl, [r1, #4]
 */
void dac_lld_init(void) {

#if STM32_DAC_USE_DAC1_CH1
  dacObjectInit(&DACD1);
  DACD1.params  = &dma1_ch1_params;
  2027ee:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 2029c0 <main+0x650>
  2027f2:	7038      	strb	r0, [r7, #0]
  2027f4:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
  2027f8:	623b      	str	r3, [r7, #32]
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
  2027fa:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 2029c4 <main+0x654>
  iqp->q_buffer  = bp;
  2027fe:	4c51      	ldr	r4, [pc, #324]	; (202944 <main+0x5d4>)
  202800:	f88a 0000 	strb.w	r0, [sl]
  extp->config = NULL;
  202804:	f8ca 3004 	str.w	r3, [sl, #4]
  ICUD8.tim = STM32_TIM8;
  202808:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 2029c8 <main+0x658>
  20280c:	60ce      	str	r6, [r1, #12]
  tqp->prev = (thread_t *)tqp;
  20280e:	610e      	str	r6, [r1, #16]
  iqp->q_top     = bp + size;
  202810:	4626      	mov	r6, r4
  sdp->state = SD_STOP;
  202812:	7208      	strb	r0, [r1, #8]
  202814:	3610      	adds	r6, #16
  iqp->q_buffer  = bp;
  202816:	618c      	str	r4, [r1, #24]
  iqp->q_rdptr   = bp;
  202818:	624c      	str	r4, [r1, #36]	; 0x24
  iqp->q_counter = 0;
  20281a:	614b      	str	r3, [r1, #20]
  20281c:	e9c7 8806 	strd	r8, r8, [r7, #24]
  dacp->config = NULL;
#if DAC_USE_WAIT
  dacp->thread = NULL;
  202820:	e9c7 3304 	strd	r3, r3, [r7, #16]
  GPTD4.tim = STM32_TIM4;
  202824:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 2029cc <main+0x65c>
  202828:	4f47      	ldr	r7, [pc, #284]	; (202948 <main+0x5d8>)
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  20282a:	7038      	strb	r0, [r7, #0]
  20282c:	f8c7 800c 	str.w	r8, [r7, #12]
  gptp->config = NULL;
  202830:	607b      	str	r3, [r7, #4]
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
  202832:	4f46      	ldr	r7, [pc, #280]	; (20294c <main+0x5dc>)
  202834:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2029d0 <main+0x660>
  202838:	7038      	strb	r0, [r7, #0]
  20283a:	f8c7 a00c 	str.w	sl, [r7, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20283e:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
  icup->config = NULL;
  202842:	607b      	str	r3, [r7, #4]
  ICUD9.tim = STM32_TIM9;
  202844:	4f42      	ldr	r7, [pc, #264]	; (202950 <main+0x5e0>)
  icup->state  = ICU_STOP;
  202846:	f888 0000 	strb.w	r0, [r8]
  20284a:	f8c8 700c 	str.w	r7, [r8, #12]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  20284e:	4f41      	ldr	r7, [pc, #260]	; (202954 <main+0x5e4>)
  icup->config = NULL;
  202850:	f8c8 3004 	str.w	r3, [r8, #4]
  202854:	f887 9010 	strb.w	r9, [r7, #16]
  PWMD1.tim = STM32_TIM1;
  202858:	f8df 9178 	ldr.w	r9, [pc, #376]	; 2029d4 <main+0x664>
  20285c:	7038      	strb	r0, [r7, #0]
  20285e:	f8c7 9018 	str.w	r9, [r7, #24]
  tqp->next = (thread_t *)tqp;
  202862:	f102 090c 	add.w	r9, r2, #12
  pwmp->config   = NULL;
  202866:	607b      	str	r3, [r7, #4]
  pwmp->enabled  = 0;
  202868:	60fb      	str	r3, [r7, #12]
  iqp->q_wrptr   = bp;
  20286a:	620c      	str	r4, [r1, #32]
  iqp->q_top     = bp + size;
  20286c:	61ce      	str	r6, [r1, #28]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20286e:	2680      	movs	r6, #128	; 0x80
  oqp->q_counter = size;
  202870:	f8c1 b038 	str.w	fp, [r1, #56]	; 0x38
  oqp->q_link    = link;
  202874:	6509      	str	r1, [r1, #80]	; 0x50
  iqp->q_link    = link;
  202876:	e9c1 310a 	strd	r3, r1, [r1, #40]	; 0x28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20287a:	f885 a327 	strb.w	sl, [r5, #807]	; 0x327
  20287e:	7210      	strb	r0, [r2, #8]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202880:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  iqp->q_notify  = infy;
  202884:	6293      	str	r3, [r2, #40]	; 0x28
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202886:	606e      	str	r6, [r5, #4]
  oqp->q_buffer  = bp;
  202888:	4e33      	ldr	r6, [pc, #204]	; (202958 <main+0x5e8>)
  iqp->q_counter = 0;
  20288a:	6153      	str	r3, [r2, #20]
  oqp->q_buffer  = bp;
  20288c:	4634      	mov	r4, r6
  20288e:	63ce      	str	r6, [r1, #60]	; 0x3c
  sdp->vmt = &vmt;
  202890:	4616      	mov	r6, r2
  oqp->q_counter = size;
  202892:	f8c2 b038 	str.w	fp, [r2, #56]	; 0x38
  oqp->q_rdptr   = bp;
  202896:	648c      	str	r4, [r1, #72]	; 0x48
  202898:	f102 0b30 	add.w	fp, r2, #48	; 0x30
  20289c:	f846 eb04 	str.w	lr, [r6], #4
  oqp->q_top     = bp + size;
  2028a0:	f104 0e10 	add.w	lr, r4, #16
  2028a4:	6056      	str	r6, [r2, #4]
  2028a6:	f8c1 e040 	str.w	lr, [r1, #64]	; 0x40
  oqp->q_notify  = onfy;
  2028aa:	f8df e12c 	ldr.w	lr, [pc, #300]	; 2029d8 <main+0x668>
  iqp->q_top     = bp + size;
  2028ae:	4e2b      	ldr	r6, [pc, #172]	; (20295c <main+0x5ec>)
  oqp->q_notify  = onfy;
  2028b0:	f8c1 e04c 	str.w	lr, [r1, #76]	; 0x4c

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3);
  iqObjectInit(&SD3.iqueue, sd_in_buf3, sizeof sd_in_buf3, NULL, &SD3);
  oqObjectInit(&SD3.oqueue, sd_out_buf3, sizeof sd_out_buf3, notify3, &SD3);
  SD3.usart = USART3;
  2028b4:	f8df e124 	ldr.w	lr, [pc, #292]	; 2029dc <main+0x66c>
  oqp->q_wrptr   = bp;
  2028b8:	644c      	str	r4, [r1, #68]	; 0x44
  iqp->q_top     = bp + size;
  2028ba:	4634      	mov	r4, r6
  2028bc:	f8c1 e054 	str.w	lr, [r1, #84]	; 0x54
  2028c0:	f101 0e30 	add.w	lr, r1, #48	; 0x30
  2028c4:	3610      	adds	r6, #16
  iqp->q_buffer  = bp;
  2028c6:	6194      	str	r4, [r2, #24]
  iqp->q_rdptr   = bp;
  2028c8:	6254      	str	r4, [r2, #36]	; 0x24
  iqp->q_wrptr   = bp;
  2028ca:	6214      	str	r4, [r2, #32]
  iqp->q_top     = bp + size;
  2028cc:	61d6      	str	r6, [r2, #28]
  2028ce:	f8c2 900c 	str.w	r9, [r2, #12]
  tqp->prev = (thread_t *)tqp;
  2028d2:	f8c2 9010 	str.w	r9, [r2, #16]
  iqp->q_link    = link;
  2028d6:	62d2      	str	r2, [r2, #44]	; 0x2c
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  2028d8:	4c21      	ldr	r4, [pc, #132]	; (202960 <main+0x5f0>)
  2028da:	4e22      	ldr	r6, [pc, #136]	; (202964 <main+0x5f4>)
  2028dc:	e9c1 ee0c 	strd	lr, lr, [r1, #48]	; 0x30
  SD3.clock = STM32_USART3CLK;
  2028e0:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 2029e0 <main+0x670>
  2028e4:	f8c1 e058 	str.w	lr, [r1, #88]	; 0x58
  oqp->q_top     = bp + size;
  2028e8:	491f      	ldr	r1, [pc, #124]	; (202968 <main+0x5f8>)
  2028ea:	e9c2 bb0c 	strd	fp, fp, [r2, #48]	; 0x30
  2028ee:	f101 0910 	add.w	r9, r1, #16
  oqp->q_buffer  = bp;
  2028f2:	63d1      	str	r1, [r2, #60]	; 0x3c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2028f4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2028f8:	f885 a352 	strb.w	sl, [r5, #850]	; 0x352
  2028fc:	f104 0b24 	add.w	fp, r4, #36	; 0x24
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  202900:	f104 0a30 	add.w	sl, r4, #48	; 0x30
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202904:	f8c5 1188 	str.w	r1, [r5, #392]	; 0x188
  oqp->q_rdptr   = bp;
  202908:	f1a9 0110 	sub.w	r1, r9, #16
  20290c:	6491      	str	r1, [r2, #72]	; 0x48
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20290e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  202912:	e067      	b.n	2029e4 <main+0x674>
  202914:	40026000 	.word	0x40026000
  202918:	40026400 	.word	0x40026400
  20291c:	40023800 	.word	0x40023800
  202920:	20000800 	.word	0x20000800
  202924:	200008c4 	.word	0x200008c4
  202928:	40020000 	.word	0x40020000
  20292c:	20000834 	.word	0x20000834
  202930:	20000924 	.word	0x20000924
  202934:	080031b4 	.word	0x080031b4
  202938:	40012000 	.word	0x40012000
  20293c:	00022c16 	.word	0x00022c16
  202940:	e000e100 	.word	0xe000e100
  202944:	20000dc8 	.word	0x20000dc8
  202948:	20000868 	.word	0x20000868
  20294c:	20000878 	.word	0x20000878
  202950:	40014000 	.word	0x40014000
  202954:	200008a8 	.word	0x200008a8
  202958:	20000de8 	.word	0x20000de8
  20295c:	20000dd8 	.word	0x20000dd8
  202960:	08003124 	.word	0x08003124
  202964:	200009b4 	.word	0x200009b4
  202968:	20000df8 	.word	0x20000df8
  20296c:	40005551 	.word	0x40005551
  202970:	b0000bb0 	.word	0xb0000bb0
  202974:	000aaa0a 	.word	0x000aaa0a
  202978:	2aae8028 	.word	0x2aae8028
  20297c:	18004001 	.word	0x18004001
  202980:	40020800 	.word	0x40020800
  202984:	01555051 	.word	0x01555051
  202988:	00bb00b0 	.word	0x00bb00b0
  20298c:	40020c00 	.word	0x40020c00
  202990:	55505555 	.word	0x55505555
  202994:	cffffff3 	.word	0xcffffff3
  202998:	40021400 	.word	0x40021400
  20299c:	003fcfff 	.word	0x003fcfff
  2029a0:	40021800 	.word	0x40021800
  2029a4:	3cccf000 	.word	0x3cccf000
  2029a8:	51155555 	.word	0x51155555
  2029ac:	00b0b000 	.word	0x00b0b000
  2029b0:	55555550 	.word	0x55555550
  2029b4:	40022800 	.word	0x40022800
  2029b8:	20000984 	.word	0x20000984
  2029bc:	08003308 	.word	0x08003308
  2029c0:	08003200 	.word	0x08003200
  2029c4:	20000860 	.word	0x20000860
  2029c8:	40010400 	.word	0x40010400
  2029cc:	40000800 	.word	0x40000800
  2029d0:	20000890 	.word	0x20000890
  2029d4:	40010000 	.word	0x40010000
  2029d8:	00200451 	.word	0x00200451
  2029dc:	40004800 	.word	0x40004800
  2029e0:	0337f980 	.word	0x0337f980
  2029e4:	60a9      	str	r1, [r5, #8]
  oqp->q_wrptr   = bp;
  2029e6:	f1a9 0110 	sub.w	r1, r9, #16
#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  SD7.clock = STM32_UART7CLK;
  2029ea:	f8c2 e058 	str.w	lr, [r2, #88]	; 0x58
  oqp->q_notify  = onfy;
  2029ee:	f8df e2bc 	ldr.w	lr, [pc, #700]	; 202cac <main+0x93c>
  oqp->q_wrptr   = bp;
  2029f2:	6451      	str	r1, [r2, #68]	; 0x44
  tqp->next = (thread_t *)tqp;
  2029f4:	f10c 010c 	add.w	r1, ip, #12
  oqp->q_notify  = onfy;
  2029f8:	f8c2 e04c 	str.w	lr, [r2, #76]	; 0x4c
  SD7.usart = UART7;
  2029fc:	f8df e2b0 	ldr.w	lr, [pc, #688]	; 202cb0 <main+0x940>
  oqp->q_top     = bp + size;
  202a00:	f8c2 9040 	str.w	r9, [r2, #64]	; 0x40

#if STM32_SPI_USE_SPI3
  spiObjectInit(&SPID3);
  SPID3.spi       = SPI3;
  SPID3.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI3_RX_DMA_STREAM);
  SPID3.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI3_TX_DMA_STREAM);
  202a04:	f104 0954 	add.w	r9, r4, #84	; 0x54
  202a08:	f8c2 e054 	str.w	lr, [r2, #84]	; 0x54

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  202a0c:	f240 4e37 	movw	lr, #1079	; 0x437
  oqp->q_link    = link;
  202a10:	6512      	str	r2, [r2, #80]	; 0x50
  SPID2.spi       = SPI2;
  202a12:	4a93      	ldr	r2, [pc, #588]	; (202c60 <main+0x8f0>)
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  202a14:	f8cc b020 	str.w	fp, [ip, #32]
  202a18:	f106 0b0c 	add.w	fp, r6, #12
  SPID2.spi       = SPI2;
  202a1c:	f8cc 201c 	str.w	r2, [ip, #28]
  SPID3.spi       = SPI3;
  202a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  202a24:	f8cc a024 	str.w	sl, [ip, #36]	; 0x24
  SPID3.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI3_TX_DMA_STREAM);
  202a28:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
  202a2c:	f8df a284 	ldr.w	sl, [pc, #644]	; 202cb4 <main+0x944>
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
  202a30:	f8df 9284 	ldr.w	r9, [pc, #644]	; 202cb8 <main+0x948>
  SPID3.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI3_RX_DMA_STREAM);
  202a34:	6234      	str	r4, [r6, #32]
  SPID3.spi       = SPI3;
  202a36:	61f2      	str	r2, [r6, #28]
  ST_ENABLE_CLOCK();
  202a38:	4c8a      	ldr	r4, [pc, #552]	; (202c64 <main+0x8f4>)
  usbp->state        = USB_STOP;
  202a3a:	4a8b      	ldr	r2, [pc, #556]	; (202c68 <main+0x8f8>)
  202a3c:	f88c 0000 	strb.w	r0, [ip]
  202a40:	7030      	strb	r0, [r6, #0]
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
  202a42:	f8cc a028 	str.w	sl, [ip, #40]	; 0x28
  SPID3.rxdmamode = STM32_DMA_CR_CHSEL(SPI3_RX_DMA_CHANNEL) |
  202a46:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
  202a4a:	f8cc 902c 	str.w	r9, [ip, #44]	; 0x2c
                    STM32_DMA_CR_PL(STM32_SPI_SPI3_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID3.txdmamode = STM32_DMA_CR_CHSEL(SPI3_TX_DMA_CHANNEL) |
  202a4e:	f8c6 902c 	str.w	r9, [r6, #44]	; 0x2c
  202a52:	f8cc 3014 	str.w	r3, [ip, #20]
  202a56:	6173      	str	r3, [r6, #20]
  ST_ENABLE_STOP();
  202a58:	f8df a260 	ldr.w	sl, [pc, #608]	; 202cbc <main+0x94c>
  tqp->prev = (thread_t *)tqp;
  202a5c:	e9cc 1103 	strd	r1, r1, [ip, #12]
  spip->config = NULL;
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
  202a60:	e9cc 3301 	strd	r3, r3, [ip, #4]
  202a64:	e9c6 3301 	strd	r3, r3, [r6, #4]
  202a68:	e9c6 bb03 	strd	fp, fp, [r6, #12]
  202a6c:	7010      	strb	r0, [r2, #0]
  USBD1.otg       = OTG_FS;
  202a6e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  ST_ENABLE_CLOCK();
  202a72:	6c26      	ldr	r6, [r4, #64]	; 0x40
    usbp->in_params[i]  = NULL;
  202a74:	6253      	str	r3, [r2, #36]	; 0x24
  202a76:	f046 0608 	orr.w	r6, r6, #8
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  202a7a:	f8df c22c 	ldr.w	ip, [pc, #556]	; 202ca8 <main+0x938>
  ST_ENABLE_CLOCK();
  202a7e:	6426      	str	r6, [r4, #64]	; 0x40
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  202a80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  ST_ENABLE_STOP();
  202a84:	f8da 9008 	ldr.w	r9, [sl, #8]
 * @brief   Initialize periphery connected to driver control
 * @note    Stable for repeated calls
 */
void lldControlInit( void )
{
    if ( isInitialized )
  202a88:	4e78      	ldr	r6, [pc, #480]	; (202c6c <main+0x8fc>)
  202a8a:	f049 0908 	orr.w	r9, r9, #8
    usbp->out_params[i] = NULL;
  202a8e:	6393      	str	r3, [r2, #56]	; 0x38
    usbp->in_params[i]  = NULL;
  202a90:	6293      	str	r3, [r2, #40]	; 0x28
  202a92:	f8ca 9008 	str.w	r9, [sl, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  202a96:	f8cc e028 	str.w	lr, [ip, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  202a9a:	f8cc 402c 	str.w	r4, [ip, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
  202a9e:	f8cc 3018 	str.w	r3, [ip, #24]
  STM32_ST_TIM->CCR[0] = 0;
  202aa2:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
  202aa6:	f8cc 300c 	str.w	r3, [ip, #12]
  STM32_ST_TIM->CR2    = 0;
  202aaa:	f8cc 3004 	str.w	r3, [ip, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  202aae:	f8cc 0014 	str.w	r0, [ip, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
  202ab2:	f8cc 0000 	str.w	r0, [ip]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202ab6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
  USBD1.otgparams = &fsparams;
  202aba:	f8df a204 	ldr.w	sl, [pc, #516]	; 202cc0 <main+0x950>
  202abe:	f885 0332 	strb.w	r0, [r5, #818]	; 0x332
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202ac2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  202ac6:	f896 9000 	ldrb.w	r9, [r6]
  202aca:	f8c5 0184 	str.w	r0, [r5, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202ace:	6068      	str	r0, [r5, #4]
    usbp->out_params[i] = NULL;
  202ad0:	63d3      	str	r3, [r2, #60]	; 0x3c
    usbp->in_params[i]  = NULL;
  202ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
    usbp->out_params[i] = NULL;
  202ad4:	6413      	str	r3, [r2, #64]	; 0x40
    usbp->in_params[i]  = NULL;
  202ad6:	6313      	str	r3, [r2, #48]	; 0x30
    usbp->out_params[i] = NULL;
  202ad8:	6453      	str	r3, [r2, #68]	; 0x44
    usbp->in_params[i]  = NULL;
  202ada:	6353      	str	r3, [r2, #52]	; 0x34
    usbp->out_params[i] = NULL;
  202adc:	6493      	str	r3, [r2, #72]	; 0x48
  usbp->transmitting = 0;
  202ade:	e9c2 3301 	strd	r3, r3, [r2, #4]
  USBD1.tr = NULL;
  202ae2:	e9c2 331f 	strd	r3, r3, [r2, #124]	; 0x7c
  USBD1.otgparams = &fsparams;
  202ae6:	e9c2 1a1b 	strd	r1, sl, [r2, #108]	; 0x6c
  202aea:	f1b9 0f00 	cmp.w	r9, #0
  202aee:	f000 80f1 	beq.w	202cd4 <main+0x964>
 * @param   prio defines priority of inside thread
 *          IMPORTANT! NORMALPRIO + prio
 */
void remoteControlInit( tprio_t prio )
{
    if ( isInitialized )
  202af2:	4f5f      	ldr	r7, [pc, #380]	; (202c70 <main+0x900>)
  202af4:	783d      	ldrb	r5, [r7, #0]
  202af6:	2d00      	cmp	r5, #0
  202af8:	f040 809c 	bne.w	202c34 <main+0x8c4>
                           float         out_max)
{
    if ( !ctx )
        return;

    ctx->k = (out_max - out_min)/(in_max - in_min);
  202afc:	4a5d      	ldr	r2, [pc, #372]	; (202c74 <main+0x904>)
  202afe:	2620      	movs	r6, #32
  202b00:	4b5d      	ldr	r3, [pc, #372]	; (202c78 <main+0x908>)
  202b02:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 202cc4 <main+0x954>
    ctx->b = (out_min - ctx->k * in_min);
  202b06:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 202cc8 <main+0x958>
    ctx->k = (out_max - out_min)/(in_max - in_min);
  202b0a:	485c      	ldr	r0, [pc, #368]	; (202c7c <main+0x90c>)
    ctx->b = (out_min - ctx->k * in_min);
  202b0c:	495c      	ldr	r1, [pc, #368]	; (202c80 <main+0x910>)
    ctx->k = (out_max - out_min)/(in_max - in_min);
  202b0e:	f8c2 e000 	str.w	lr, [r2]
    ctx->b = (out_min - ctx->k * in_min);
  202b12:	f8c2 c004 	str.w	ip, [r2, #4]
    ctx->k = (out_max - out_min)/(in_max - in_min);
  202b16:	6018      	str	r0, [r3, #0]
    ctx->b = (out_min - ctx->k * in_min);
  202b18:	6059      	str	r1, [r3, #4]
  202b1a:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
  202b1e:	4b59      	ldr	r3, [pc, #356]	; (202c84 <main+0x914>)
  icu_lld_start(icup);
  icup->state = ICU_READY;
  202b20:	f04f 0902 	mov.w	r9, #2
  icu_lld_start(icup);
  202b24:	4858      	ldr	r0, [pc, #352]	; (202c88 <main+0x918>)
  icup->config = config;
  202b26:	f8c8 3004 	str.w	r3, [r8, #4]
  icu_lld_start(icup);
  202b2a:	f7fd fd31 	bl	200590 <icu_lld_start>
  icup->state = ICU_READY;
  202b2e:	f888 9000 	strb.w	r9, [r8]
  202b32:	f385 8811 	msr	BASEPRI, r5
    /* Swapped for inverse */
    range_map_init(&steer_map, RC_STEER_MIN, RC_STEER_MAX, CONTROL_MAX, CONTROL_MIN);
    range_map_init(&speed_map, RC_SPEED_MIN, RC_SPEED_MAX, CONTROL_MIN, CONTROL_MAX);

    icuStart( icuSteerDriver, &icucfg_steer );
    palSetLineMode( icuSteering, PAL_MODE_ALTERNATE(3) );
  202b36:	f44f 72c1 	mov.w	r2, #386	; 0x182
  202b3a:	4631      	mov	r1, r6
  202b3c:	4853      	ldr	r0, [pc, #332]	; (202c8c <main+0x91c>)
  202b3e:	f7fd fe0f 	bl	200760 <_pal_lld_setgroupmode>
  202b42:	f386 8811 	msr	BASEPRI, r6
  icup->tim->EGR |= STM32_TIM_EGR_UG;
  202b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  202b4a:	f04f 0b05 	mov.w	fp, #5

  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert(icup->state == ICU_READY, "invalid state");
  icuStartCaptureI(icup);
  202b4e:	f04f 0a03 	mov.w	sl, #3
  icup->tim->EGR |= STM32_TIM_EGR_UG;
  202b52:	695a      	ldr	r2, [r3, #20]
  202b54:	f042 0201 	orr.w	r2, r2, #1
  202b58:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
  202b5a:	611d      	str	r5, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  202b5c:	f8c3 b000 	str.w	fp, [r3]
  202b60:	f888 a000 	strb.w	sl, [r8]
  202b64:	f385 8811 	msr	BASEPRI, r5
  202b68:	f386 8811 	msr	BASEPRI, r6
  osalDbgCheck(icup != NULL);

  osalSysLock();
  osalDbgAssert((icup->state == ICU_WAITING) || (icup->state == ICU_ACTIVE),
                "invalid state");
  icuEnableNotificationsI(icup);
  202b6c:	4846      	ldr	r0, [pc, #280]	; (202c88 <main+0x918>)
  202b6e:	f7fd fcef 	bl	200550 <icu_lld_enable_notifications>
  202b72:	f385 8811 	msr	BASEPRI, r5
  202b76:	f386 8811 	msr	BASEPRI, r6
  icu_lld_start(icup);
  202b7a:	4845      	ldr	r0, [pc, #276]	; (202c90 <main+0x920>)
  icup->config = config;
  202b7c:	4b45      	ldr	r3, [pc, #276]	; (202c94 <main+0x924>)
  202b7e:	4604      	mov	r4, r0
  202b80:	6043      	str	r3, [r0, #4]
  icu_lld_start(icup);
  202b82:	f7fd fd05 	bl	200590 <icu_lld_start>
  icup->state = ICU_READY;
  202b86:	f880 9000 	strb.w	r9, [r0]
  202b8a:	f385 8811 	msr	BASEPRI, r5
    icuStartCapture( icuSteerDriver );
    icuEnableNotifications( icuSteerDriver );

    icuStart( icuSpeedDriver, &icucfg_speed );
    palSetLineMode( icuSpeed, PAL_MODE_ALTERNATE(3) );
  202b8e:	f44f 72c1 	mov.w	r2, #386	; 0x182
  202b92:	2140      	movs	r1, #64	; 0x40
  202b94:	4840      	ldr	r0, [pc, #256]	; (202c98 <main+0x928>)
  202b96:	f7fd fde3 	bl	200760 <_pal_lld_setgroupmode>
  202b9a:	f386 8811 	msr	BASEPRI, r6
  icup->tim->EGR |= STM32_TIM_EGR_UG;
  202b9e:	68e3      	ldr	r3, [r4, #12]
  202ba0:	695a      	ldr	r2, [r3, #20]
  202ba2:	f042 0201 	orr.w	r2, r2, #1
  202ba6:	615a      	str	r2, [r3, #20]
  icup->tim->SR = 0;
  202ba8:	611d      	str	r5, [r3, #16]
  icup->tim->CR1 = STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  202baa:	f8c3 b000 	str.w	fp, [r3]
  icuStartCaptureI(icup);
  202bae:	f884 a000 	strb.w	sl, [r4]
  202bb2:	f385 8811 	msr	BASEPRI, r5
  202bb6:	f386 8811 	msr	BASEPRI, r6
  icuEnableNotificationsI(icup);
  202bba:	4620      	mov	r0, r4
  202bbc:	f7fd fcc8 	bl	200550 <icu_lld_enable_notifications>
  202bc0:	f385 8811 	msr	BASEPRI, r5
  202bc4:	f386 8811 	msr	BASEPRI, r6
  tp->wabase = (stkalign_t *)wsp;
  202bc8:	4b34      	ldr	r3, [pc, #208]	; (202c9c <main+0x92c>)
  tp->prio      = prio;
  202bca:	f04f 0c80 	mov.w	ip, #128	; 0x80
  REG_INSERT(tp);
  202bce:	4c34      	ldr	r4, [pc, #208]	; (202ca0 <main+0x930>)
  tp->refs      = (trefs_t)1;
  202bd0:	2601      	movs	r6, #1
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202bd2:	4a34      	ldr	r2, [pc, #208]	; (202ca4 <main+0x934>)
  REG_INSERT(tp);
  202bd4:	f503 70c0 	add.w	r0, r3, #384	; 0x180
  202bd8:	6961      	ldr	r1, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202bda:	f503 7bae 	add.w	fp, r3, #348	; 0x15c
  202bde:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
  tlp->next = (thread_t *)tlp;
  202be2:	f503 7ed4 	add.w	lr, r3, #424	; 0x1a8
  tqp->next = (thread_t *)tqp;
  202be6:	f503 72d6 	add.w	r2, r3, #428	; 0x1ac
  202bea:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 202ccc <main+0x95c>
  tp->name      = name;
  202bee:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 202cd0 <main+0x960>
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202bf2:	f8c3 5160 	str.w	r5, [r3, #352]	; 0x160
  tp->state     = CH_STATE_WTSTART;
  202bf6:	f8a3 91a0 	strh.w	r9, [r3, #416]	; 0x1a0
  REG_INSERT(tp);
  202bfa:	f8c3 4190 	str.w	r4, [r3, #400]	; 0x190
  tp->wabase = (stkalign_t *)wsp;
  202bfe:	f8c3 319c 	str.w	r3, [r3, #412]	; 0x19c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202c02:	f8c3 b18c 	str.w	fp, [r3, #396]	; 0x18c
  202c06:	f8c3 a15c 	str.w	sl, [r3, #348]	; 0x15c
  tp->prio      = prio;
  202c0a:	f8c3 c188 	str.w	ip, [r3, #392]	; 0x188
  tp->realprio  = prio;
  202c0e:	f8c3 c1bc 	str.w	ip, [r3, #444]	; 0x1bc
  tp->refs      = (trefs_t)1;
  202c12:	f883 61a2 	strb.w	r6, [r3, #418]	; 0x1a2
  tp->epending  = (eventmask_t)0;
  202c16:	e9c3 556d 	strd	r5, r5, [r3, #436]	; 0x1b4
  REG_INSERT(tp);
  202c1a:	e9c3 1865 	strd	r1, r8, [r3, #404]	; 0x194
  202c1e:	6108      	str	r0, [r1, #16]
  tqp->prev = (thread_t *)tqp;
  202c20:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
  202c24:	6160      	str	r0, [r4, #20]
  tqp->next = (thread_t *)tqp;
  202c26:	e9c3 e26a 	strd	lr, r2, [r3, #424]	; 0x1a8
  chSchWakeupS(tp, MSG_OK);
  202c2a:	f7fe ff39 	bl	201aa0 <chSchWakeupS.constprop.0>
  202c2e:	f385 8811 	msr	BASEPRI, r5

    chThdCreateStatic( waRCModeDetect, sizeof(waRCModeDetect), prio , RCModeDetect, NULL );

    /* Set initialization flag */

    isInitialized = true;
  202c32:	703e      	strb	r6, [r7, #0]
  202c34:	4c1c      	ldr	r4, [pc, #112]	; (202ca8 <main+0x938>)
  202c36:	2620      	movs	r6, #32
  202c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
  202c3a:	e003      	b.n	202c44 <main+0x8d4>
  202c3c:	2300      	movs	r3, #0
  202c3e:	f383 8811 	msr	BASEPRI, r3

    systime_t time = chVTGetSystemTimeX();
    while(1)
    {

    	time = chThdSleepUntilWindowed( time, time + MS2ST( 10 ) );
  202c42:	462b      	mov	r3, r5
  202c44:	f503 757a 	add.w	r5, r3, #1000	; 0x3e8
  202c48:	f386 8811 	msr	BASEPRI, r6
  202c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
  202c4e:	1acb      	subs	r3, r1, r3
  if (chVTIsTimeWithinX(time, prev, next)) {
  202c50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  202c54:	d2f2      	bcs.n	202c3c <main+0x8cc>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  202c56:	1a69      	subs	r1, r5, r1
  202c58:	2008      	movs	r0, #8
  202c5a:	f7fe ff69 	bl	201b30 <chSchGoSleepTimeoutS>
  202c5e:	e7ed      	b.n	202c3c <main+0x8cc>
  202c60:	40003800 	.word	0x40003800
  202c64:	40023800 	.word	0x40023800
  202c68:	200009e8 	.word	0x200009e8
  202c6c:	20000dc4 	.word	0x20000dc4
  202c70:	20000dc5 	.word	0x20000dc5
  202c74:	20000e28 	.word	0x20000e28
  202c78:	20000e18 	.word	0x20000e18
  202c7c:	3e6a0ea1 	.word	0x3e6a0ea1
  202c80:	c3ab2492 	.word	0xc3ab2492
  202c84:	0800326c 	.word	0x0800326c
  202c88:	20000890 	.word	0x20000890
  202c8c:	40021000 	.word	0x40021000
  202c90:	20000878 	.word	0x20000878
  202c94:	08003250 	.word	0x08003250
  202c98:	40020800 	.word	0x40020800
  202c9c:	20000e40 	.word	0x20000e40
  202ca0:	20000bb8 	.word	0x20000bb8
  202ca4:	002002e9 	.word	0x002002e9
  202ca8:	40000c00 	.word	0x40000c00
  202cac:	00200461 	.word	0x00200461
  202cb0:	40007800 	.word	0x40007800
  202cb4:	00010016 	.word	0x00010016
  202cb8:	00010046 	.word	0x00010046
  202cbc:	e0042000 	.word	0xe0042000
  202cc0:	08003240 	.word	0x08003240
  202cc4:	beaaaaab 	.word	0xbeaaaaab
  202cc8:	43e95556 	.word	0x43e95556
  202ccc:	00201c41 	.word	0x00201c41
  202cd0:	0800311c 	.word	0x0800311c
        return;

    /*** PWM pins configuration ***/
    palSetLineMode( pwm1LineCh0,  PAL_MODE_ALTERNATE(1) );
  202cd4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
  202cd8:	2282      	movs	r2, #130	; 0x82
  202cda:	f44f 7100 	mov.w	r1, #512	; 0x200
  202cde:	f5a0 30f8 	sub.w	r0, r0, #126976	; 0x1f000
  202ce2:	f7fd fd3d 	bl	200760 <_pal_lld_setgroupmode>
    palSetLineMode( pwm1LineCh1,  PAL_MODE_ALTERNATE(1) );
  202ce6:	485b      	ldr	r0, [pc, #364]	; (202e54 <main+0xae4>)
  202ce8:	2282      	movs	r2, #130	; 0x82
  202cea:	f44f 6100 	mov.w	r1, #2048	; 0x800
  202cee:	f7fd fd37 	bl	200760 <_pal_lld_setgroupmode>
  202cf2:	2320      	movs	r3, #32
  202cf4:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  202cf8:	4b57      	ldr	r3, [pc, #348]	; (202e58 <main+0xae8>)
  if (pwmp->state == PWM_STOP) {
  202cfa:	7839      	ldrb	r1, [r7, #0]
  pwmp->period = config->period;
  202cfc:	685a      	ldr	r2, [r3, #4]
  202cfe:	2901      	cmp	r1, #1
  202d00:	e9c7 3201 	strd	r3, r2, [r7, #4]
  202d04:	d07b      	beq.n	202dfe <main+0xa8e>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
  202d06:	69b9      	ldr	r1, [r7, #24]
  202d08:	f8c1 9000 	str.w	r9, [r1]
    if (pwmp->channels > 4) {
  202d0c:	7c38      	ldrb	r0, [r7, #16]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  202d0e:	f8c1 9034 	str.w	r9, [r1, #52]	; 0x34
    if (pwmp->channels > 4) {
  202d12:	2804      	cmp	r0, #4
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  202d14:	f8c1 9038 	str.w	r9, [r1, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
  202d18:	f8c1 903c 	str.w	r9, [r1, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
  202d1c:	f8c1 9040 	str.w	r9, [r1, #64]	; 0x40
    if (pwmp->channels > 4) {
  202d20:	d868      	bhi.n	202df4 <main+0xa84>
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  202d22:	2000      	movs	r0, #0
  202d24:	6248      	str	r0, [r1, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  202d26:	697d      	ldr	r5, [r7, #20]
  pwmp->tim->ARR  = pwmp->period - 1;
  202d28:	3a01      	subs	r2, #1
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  202d2a:	6818      	ldr	r0, [r3, #0]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202d2c:	68d9      	ldr	r1, [r3, #12]
  pwmp->tim->CR2  = pwmp->config->cr2;
  202d2e:	f8d3 c03c 	ldr.w	ip, [r3, #60]	; 0x3c
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202d32:	f001 010f 	and.w	r1, r1, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  202d36:	fbb5 f5f0 	udiv	r5, r5, r0
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202d3a:	2901      	cmp	r1, #1
  pwmp->tim->PSC  = psc;
  202d3c:	69b8      	ldr	r0, [r7, #24]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  202d3e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
  pwmp->tim->PSC  = psc;
  202d42:	6285      	str	r5, [r0, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
  202d44:	62c2      	str	r2, [r0, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
  202d46:	f8c0 c004 	str.w	ip, [r0, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  202d4a:	d04f      	beq.n	202dec <main+0xa7c>
  202d4c:	2902      	cmp	r1, #2
  202d4e:	d04e      	beq.n	202dee <main+0xa7e>
  202d50:	2100      	movs	r1, #0
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  202d52:	695a      	ldr	r2, [r3, #20]
  202d54:	f002 020f 	and.w	r2, r2, #15
  202d58:	2a01      	cmp	r2, #1
  202d5a:	d003      	beq.n	202d64 <main+0x9f4>
  202d5c:	2a02      	cmp	r2, #2
  202d5e:	d103      	bne.n	202d68 <main+0x9f8>
    ccer |= STM32_TIM_CCER_CC2P;
  202d60:	f041 0120 	orr.w	r1, r1, #32
    ccer |= STM32_TIM_CCER_CC2E;
  202d64:	f041 0110 	orr.w	r1, r1, #16
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  202d68:	69da      	ldr	r2, [r3, #28]
  202d6a:	f002 020f 	and.w	r2, r2, #15
  202d6e:	2a01      	cmp	r2, #1
  202d70:	d003      	beq.n	202d7a <main+0xa0a>
  202d72:	2a02      	cmp	r2, #2
  202d74:	d103      	bne.n	202d7e <main+0xa0e>
    ccer |= STM32_TIM_CCER_CC3P;
  202d76:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
  202d7a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
  202d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  202d80:	f002 020f 	and.w	r2, r2, #15
  202d84:	2a01      	cmp	r2, #1
  202d86:	d003      	beq.n	202d90 <main+0xa20>
  202d88:	2a02      	cmp	r2, #2
  202d8a:	d103      	bne.n	202d94 <main+0xa24>
    ccer |= STM32_TIM_CCER_CC4P;
  202d8c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
  202d90:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  202d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  202d96:	f04f 0c01 	mov.w	ip, #1
  pwmp->tim->CCER  = ccer;
  202d9a:	6201      	str	r1, [r0, #32]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  202d9c:	2300      	movs	r3, #0
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  202d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
  202da2:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  202da6:	2585      	movs	r5, #133	; 0x85
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
  202da8:	2102      	movs	r1, #2
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  202daa:	f8c0 c014 	str.w	ip, [r0, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  202dae:	6103      	str	r3, [r0, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  202db0:	60c2      	str	r2, [r0, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
  202db2:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  202db6:	6005      	str	r5, [r0, #0]
  pwmp->enabled = 0;
  202db8:	60fb      	str	r3, [r7, #12]
  pwmp->state = PWM_READY;
  202dba:	7039      	strb	r1, [r7, #0]
  202dbc:	f383 8811 	msr	BASEPRI, r3
    ctx->k = (out_max - out_min)/(in_max - in_min);
  202dc0:	4b26      	ldr	r3, [pc, #152]	; (202e5c <main+0xaec>)
  202dc2:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    ctx->b = (out_min - ctx->k * in_min);
  202dc6:	4a26      	ldr	r2, [pc, #152]	; (202e60 <main+0xaf0>)
    ctx->k = (out_max - out_min)/(in_max - in_min);
  202dc8:	4826      	ldr	r0, [pc, #152]	; (202e64 <main+0xaf4>)
    ctx->b = (out_min - ctx->k * in_min);
  202dca:	605a      	str	r2, [r3, #4]
    ctx->k = (out_max - out_min)/(in_max - in_min);
  202dcc:	601d      	str	r5, [r3, #0]
  202dce:	4926      	ldr	r1, [pc, #152]	; (202e68 <main+0xaf8>)
    ctx->b = (out_min - ctx->k * in_min);
  202dd0:	4a26      	ldr	r2, [pc, #152]	; (202e6c <main+0xafc>)
    ctx->k = (out_max - out_min)/(in_max - in_min);
  202dd2:	4b27      	ldr	r3, [pc, #156]	; (202e70 <main+0xb00>)
    ctx->b = (out_min - ctx->k * in_min);
  202dd4:	4f27      	ldr	r7, [pc, #156]	; (202e74 <main+0xb04>)
    range_map_init( &speed_backward_map, CONTROL_MIN, CONTROL_NULL, SPEED_MIN, SPEED_NULL_BACK );
    range_map_init( &steer_left_map, CONTROL_NULL, CONTROL_MAX, STEER_PWM_NULL, STEER_PWM_MAX );
    range_map_init( &steer_right_map, CONTROL_MIN, CONTROL_NULL, STEER_PWM_MIN, STEER_PWM_NULL );

    /* Set initialization flag */
    isInitialized = true;
  202dd6:	f886 c000 	strb.w	ip, [r6]
    ctx->k = (out_max - out_min)/(in_max - in_min);
  202dda:	6005      	str	r5, [r0, #0]
  202ddc:	4e26      	ldr	r6, [pc, #152]	; (202e78 <main+0xb08>)
  202dde:	4d27      	ldr	r5, [pc, #156]	; (202e7c <main+0xb0c>)
    ctx->b = (out_min - ctx->k * in_min);
  202de0:	6047      	str	r7, [r0, #4]
    ctx->k = (out_max - out_min)/(in_max - in_min);
  202de2:	600e      	str	r6, [r1, #0]
    ctx->b = (out_min - ctx->k * in_min);
  202de4:	604a      	str	r2, [r1, #4]
  202de6:	605a      	str	r2, [r3, #4]
    ctx->k = (out_max - out_min)/(in_max - in_min);
  202de8:	601d      	str	r5, [r3, #0]
  202dea:	e682      	b.n	202af2 <main+0x782>
  ccer = 0;
  202dec:	2100      	movs	r1, #0
    ccer |= STM32_TIM_CCER_CC1E;
  202dee:	f041 0101 	orr.w	r1, r1, #1
  202df2:	e7ae      	b.n	202d52 <main+0x9e2>
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
  202df4:	f8c1 9058 	str.w	r9, [r1, #88]	; 0x58
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
  202df8:	f8c1 905c 	str.w	r9, [r1, #92]	; 0x5c
  202dfc:	e791      	b.n	202d22 <main+0x9b2>
      rccEnableTIM1(FALSE);
  202dfe:	4c20      	ldr	r4, [pc, #128]	; (202e80 <main+0xb10>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202e00:	f04f 0e70 	mov.w	lr, #112	; 0x70
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202e04:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
  202e08:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  202e0c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  202e0e:	f041 0101 	orr.w	r1, r1, #1
  202e12:	6461      	str	r1, [r4, #68]	; 0x44
      rccResetTIM1();
  202e14:	6a60      	ldr	r0, [r4, #36]	; 0x24
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  202e16:	69b9      	ldr	r1, [r7, #24]
      rccResetTIM1();
  202e18:	f040 0001 	orr.w	r0, r0, #1
  202e1c:	6260      	str	r0, [r4, #36]	; 0x24
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  202e1e:	f646 0068 	movw	r0, #26728	; 0x6868
      rccResetTIM1();
  202e22:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202e26:	f885 e319 	strb.w	lr, [r5, #793]	; 0x319
      pwmp->clock = STM32_TIMCLK2;
  202e2a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 202e84 <main+0xb14>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202e2e:	f8c5 a180 	str.w	sl, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202e32:	f8c5 a000 	str.w	sl, [r5]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202e36:	f885 e31b 	strb.w	lr, [r5, #795]	; 0x31b
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  202e3a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 202e88 <main+0xb18>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202e3e:	f8c5 c180 	str.w	ip, [r5, #384]	; 0x180
      pwmp->clock = STM32_TIMCLK2;
  202e42:	f8c7 9014 	str.w	r9, [r7, #20]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202e46:	f8c5 c000 	str.w	ip, [r5]
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  202e4a:	6188      	str	r0, [r1, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
  202e4c:	61c8      	str	r0, [r1, #28]
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  202e4e:	f8c1 e054 	str.w	lr, [r1, #84]	; 0x54
  202e52:	e768      	b.n	202d26 <main+0x9b6>
  202e54:	40021000 	.word	0x40021000
  202e58:	20020000 	.word	0x20020000
  202e5c:	20000e10 	.word	0x20000e10
  202e60:	44c1c000 	.word	0x44c1c000
  202e64:	20000e08 	.word	0x20000e08
  202e68:	20000e20 	.word	0x20000e20
  202e6c:	448e8000 	.word	0x448e8000
  202e70:	20000e30 	.word	0x20000e30
  202e74:	44b54000 	.word	0x44b54000
  202e78:	40a33333 	.word	0x40a33333
  202e7c:	40cccccd 	.word	0x40cccccd
  202e80:	40023800 	.word	0x40023800
  202e84:	0cdfe600 	.word	0x0cdfe600
  202e88:	01016868 	.word	0x01016868
  202e8c:	00000000 	.word	0x00000000

00202e90 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  202e90:	4b33      	ldr	r3, [pc, #204]	; (202f60 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  202e92:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  202e96:	4933      	ldr	r1, [pc, #204]	; (202f64 <__early_init+0xd4>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  202e98:	461a      	mov	r2, r3
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  202e9a:	b430      	push	{r4, r5}
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  202e9c:	4c32      	ldr	r4, [pc, #200]	; (202f68 <__early_init+0xd8>)
  202e9e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  202ea0:	6008      	str	r0, [r1, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  202ea2:	6819      	ldr	r1, [r3, #0]
  202ea4:	f041 0101 	orr.w	r1, r1, #1
  202ea8:	6019      	str	r1, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  202eaa:	6813      	ldr	r3, [r2, #0]
  202eac:	0799      	lsls	r1, r3, #30
  202eae:	d5fc      	bpl.n	202eaa <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
  202eb0:	6891      	ldr	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  202eb2:	4b2b      	ldr	r3, [pc, #172]	; (202f60 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
  202eb4:	f021 0103 	bic.w	r1, r1, #3
  202eb8:	6091      	str	r1, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  202eba:	6899      	ldr	r1, [r3, #8]
  202ebc:	f011 010c 	ands.w	r1, r1, #12
  202ec0:	d1fb      	bne.n	202eba <__early_init+0x2a>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  202ec2:	6818      	ldr	r0, [r3, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  202ec4:	4a26      	ldr	r2, [pc, #152]	; (202f60 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  202ec6:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  202eca:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  202ecc:	6099      	str	r1, [r3, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  202ece:	6819      	ldr	r1, [r3, #0]
  202ed0:	f441 21a0 	orr.w	r1, r1, #327680	; 0x50000
  202ed4:	6019      	str	r1, [r3, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  202ed6:	6813      	ldr	r3, [r2, #0]
  202ed8:	039b      	lsls	r3, r3, #14
  202eda:	d5fc      	bpl.n	202ed6 <__early_init+0x46>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  202edc:	4b23      	ldr	r3, [pc, #140]	; (202f6c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  202ede:	4921      	ldr	r1, [pc, #132]	; (202f64 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  202ee0:	6053      	str	r3, [r2, #4]
  RCC->CR |= RCC_CR_PLLON;
  202ee2:	6813      	ldr	r3, [r2, #0]
  202ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  202ee8:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  202eea:	684b      	ldr	r3, [r1, #4]
  202eec:	045d      	lsls	r5, r3, #17
  202eee:	d5fc      	bpl.n	202eea <__early_init+0x5a>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  202ef0:	680a      	ldr	r2, [r1, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  202ef2:	4b1c      	ldr	r3, [pc, #112]	; (202f64 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  202ef4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  202ef8:	600a      	str	r2, [r1, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  202efa:	685a      	ldr	r2, [r3, #4]
  202efc:	03d4      	lsls	r4, r2, #15
  202efe:	d5fc      	bpl.n	202efa <__early_init+0x6a>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  202f00:	681a      	ldr	r2, [r3, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  202f02:	4918      	ldr	r1, [pc, #96]	; (202f64 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  202f04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  202f08:	601a      	str	r2, [r3, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  202f0a:	684b      	ldr	r3, [r1, #4]
  202f0c:	0398      	lsls	r0, r3, #14
  202f0e:	d5fc      	bpl.n	202f0a <__early_init+0x7a>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  202f10:	4b13      	ldr	r3, [pc, #76]	; (202f60 <__early_init+0xd0>)
  202f12:	681a      	ldr	r2, [r3, #0]
  202f14:	0192      	lsls	r2, r2, #6
  202f16:	d5fc      	bpl.n	202f12 <__early_init+0x82>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  202f18:	4a15      	ldr	r2, [pc, #84]	; (202f70 <__early_init+0xe0>)
  202f1a:	f240 3107 	movw	r1, #775	; 0x307
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  202f1e:	4d15      	ldr	r5, [pc, #84]	; (202f74 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  202f20:	f240 1401 	movw	r4, #257	; 0x101
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  202f24:	2000      	movs	r0, #0

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  202f26:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  202f2a:	609d      	str	r5, [r3, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  202f2c:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  202f30:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  202f34:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  202f38:	6899      	ldr	r1, [r3, #8]
  202f3a:	f041 0102 	orr.w	r1, r1, #2
  202f3e:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  202f40:	6893      	ldr	r3, [r2, #8]
  202f42:	f003 030c 	and.w	r3, r3, #12
  202f46:	2b08      	cmp	r3, #8
  202f48:	d1fa      	bne.n	202f40 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  202f4a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  202f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  202f50:	6453      	str	r3, [r2, #68]	; 0x44
  202f52:	6e53      	ldr	r3, [r2, #100]	; 0x64
  202f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  202f58:	bc30      	pop	{r4, r5}
  202f5a:	6653      	str	r3, [r2, #100]	; 0x64
  202f5c:	4770      	bx	lr
  202f5e:	bf00      	nop
  202f60:	40023800 	.word	0x40023800
  202f64:	40007000 	.word	0x40007000
  202f68:	10000400 	.word	0x10000400
  202f6c:	09406c08 	.word	0x09406c08
  202f70:	40023c00 	.word	0x40023c00
  202f74:	30999400 	.word	0x30999400
	...

00202f80 <chThdExit>:
void chThdExit(msg_t msg) {
  202f80:	b538      	push	{r3, r4, r5, lr}
  202f82:	2220      	movs	r2, #32
  202f84:	4603      	mov	r3, r0
  202f86:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  202f8a:	4a0f      	ldr	r2, [pc, #60]	; (202fc8 <chThdExit+0x48>)
  202f8c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  202f8e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  202f92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  202f94:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  202f96:	42a8      	cmp	r0, r5
  202f98:	d006      	beq.n	202fa8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  202f9a:	6803      	ldr	r3, [r0, #0]
  202f9c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  202f9e:	f7fe f997 	bl	2012d0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  202fa2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  202fa4:	42a8      	cmp	r0, r5
  202fa6:	d1f8      	bne.n	202f9a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  202fa8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  202fac:	b93b      	cbnz	r3, 202fbe <chThdExit+0x3e>
  202fae:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  202fb2:	079b      	lsls	r3, r3, #30
  202fb4:	d103      	bne.n	202fbe <chThdExit+0x3e>
    REG_REMOVE(tp);
  202fb6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
  202fba:	6113      	str	r3, [r2, #16]
  202fbc:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  202fbe:	200f      	movs	r0, #15
}
  202fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  202fc4:	f7fe bd9c 	b.w	201b00 <chSchGoSleepS>
  202fc8:	20000bb8 	.word	0x20000bb8
  202fcc:	00000000 	.word	0x00000000

00202fd0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  202fd0:	4a0d      	ldr	r2, [pc, #52]	; (203008 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
  202fd2:	6810      	ldr	r0, [r2, #0]
  202fd4:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
  202fd6:	6803      	ldr	r3, [r0, #0]
void chSchDoReschedule(void) {
  202fd8:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  202fda:	2401      	movs	r4, #1
  tp->state = CH_STATE_READY;
  202fdc:	2500      	movs	r5, #0
  tqp->next->queue.prev = (thread_t *)tqp;
  202fde:	605a      	str	r2, [r3, #4]
  tqp->next             = tp->queue.next;
  202fe0:	6013      	str	r3, [r2, #0]
  currp->state = CH_STATE_CURRENT;
  202fe2:	f880 4020 	strb.w	r4, [r0, #32]
  tp->state = CH_STATE_READY;
  202fe6:	f881 5020 	strb.w	r5, [r1, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  202fea:	688c      	ldr	r4, [r1, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  202fec:	6190      	str	r0, [r2, #24]
  cp = (thread_t *)&ch.rlist.queue;
  202fee:	e000      	b.n	202ff2 <chSchDoReschedule+0x22>
  202ff0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  202ff2:	689a      	ldr	r2, [r3, #8]
  202ff4:	4294      	cmp	r4, r2
  202ff6:	d3fb      	bcc.n	202ff0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  202ff8:	685a      	ldr	r2, [r3, #4]
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
  202ffa:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
  202ffc:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
  203000:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
  203002:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
  203004:	f7fd b968 	b.w	2002d8 <_port_switch>
  203008:	20000bb8 	.word	0x20000bb8
  20300c:	00000000 	.word	0x00000000

00203010 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  203010:	b4f0      	push	{r4, r5, r6, r7}
  203012:	4f14      	ldr	r7, [pc, #80]	; (203064 <__init_ram_areas+0x54>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  203014:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  203016:	4d14      	ldr	r5, [pc, #80]	; (203068 <__init_ram_areas+0x58>)
  203018:	f107 0c70 	add.w	ip, r7, #112	; 0x70
  20301c:	4813      	ldr	r0, [pc, #76]	; (20306c <__init_ram_areas+0x5c>)
  20301e:	4b14      	ldr	r3, [pc, #80]	; (203070 <__init_ram_areas+0x60>)
  203020:	4914      	ldr	r1, [pc, #80]	; (203074 <__init_ram_areas+0x64>)
    while (p < rap->clear_area) {
  203022:	4298      	cmp	r0, r3
  203024:	d911      	bls.n	20304a <__init_ram_areas+0x3a>
  203026:	3904      	subs	r1, #4
  203028:	461a      	mov	r2, r3
      *p = *tp;
  20302a:	f851 4f04 	ldr.w	r4, [r1, #4]!
  20302e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
  203032:	4290      	cmp	r0, r2
  203034:	d8f9      	bhi.n	20302a <__init_ram_areas+0x1a>
  203036:	1e42      	subs	r2, r0, #1
  203038:	1ad2      	subs	r2, r2, r3
  20303a:	f022 0203 	bic.w	r2, r2, #3
  20303e:	3204      	adds	r2, #4
  203040:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
  203042:	429d      	cmp	r5, r3
  203044:	d903      	bls.n	20304e <__init_ram_areas+0x3e>
      *p = 0;
  203046:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  20304a:	429d      	cmp	r5, r3
  20304c:	d8fb      	bhi.n	203046 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  20304e:	4567      	cmp	r7, ip
  203050:	d005      	beq.n	20305e <__init_ram_areas+0x4e>
  203052:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
  203056:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
  20305a:	3710      	adds	r7, #16
  20305c:	e7e1      	b.n	203022 <__init_ram_areas+0x12>
#endif
}
  20305e:	bcf0      	pop	{r4, r5, r6, r7}
  203060:	4770      	bx	lr
  203062:	bf00      	nop
  203064:	08003288 	.word	0x08003288
  203068:	20020044 	.word	0x20020044
  20306c:	20020044 	.word	0x20020044
  203070:	20020044 	.word	0x20020044
  203074:	08003370 	.word	0x08003370
	...

00203080 <__default_exit>:
  while (true) {
  203080:	e7fe      	b.n	203080 <__default_exit>
  203082:	bf00      	nop
	...

00203090 <__late_init>:
void __late_init(void) {}
  203090:	4770      	bx	lr
  203092:	bf00      	nop
	...

002030a0 <__core_init>:
void __core_init(void) {
  2030a0:	b470      	push	{r4, r5, r6}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  2030a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2030a6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  2030aa:	4b19      	ldr	r3, [pc, #100]	; (203110 <__core_init+0x70>)
  2030ac:	2100      	movs	r1, #0
  2030ae:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  2030b2:	695a      	ldr	r2, [r3, #20]
  2030b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  2030b8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  2030ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2030be:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  2030c2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  2030c6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  2030ca:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2030ce:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  2030d2:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2030d6:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  2030da:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2030dc:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2030e0:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2030e2:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  2030e6:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2030e8:	f8c3 6260 	str.w	r6, [r3, #608]	; 0x260
      } while (ways--);
  2030ec:	1c46      	adds	r6, r0, #1
  2030ee:	d1f8      	bne.n	2030e2 <__core_init+0x42>
    } while(sets--);
  2030f0:	3a20      	subs	r2, #32
  2030f2:	f112 0f20 	cmn.w	r2, #32
  2030f6:	d1f1      	bne.n	2030dc <__core_init+0x3c>
  2030f8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  2030fc:	695a      	ldr	r2, [r3, #20]
  2030fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  203102:	615a      	str	r2, [r3, #20]
  203104:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  203108:	f3bf 8f6f 	isb	sy
}
  20310c:	bc70      	pop	{r4, r5, r6}
  20310e:	4770      	bx	lr
  203110:	e000ed00 	.word	0xe000ed00
