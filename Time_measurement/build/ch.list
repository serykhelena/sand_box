
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

00200200 <Reset_Handler>:
  200200:	b672      	cpsid	i
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <endfiniloop+0x6>)
  200204:	f380 8809 	msr	PSP, r0
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <endfiniloop+0xa>)
  20020a:	f64e 5108 	movw	r1, #60680	; 0xed08
  20020e:	f2ce 0100 	movt	r1, #57344	; 0xe000
  200212:	6008      	str	r0, [r1, #0]
  200214:	2002      	movs	r0, #2
  200216:	f380 8814 	msr	CONTROL, r0
  20021a:	f3bf 8f6f 	isb	sy
  20021e:	f002 fa27 	bl	202670 <__core_init>
  200222:	f002 f925 	bl	202470 <__early_init>
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
  20022a:	491e      	ldr	r1, [pc, #120]	; (2002a4 <endfiniloop+0xe>)
  20022c:	4a1e      	ldr	r2, [pc, #120]	; (2002a8 <endfiniloop+0x12>)

0020022e <msloop>:
  20022e:	4291      	cmp	r1, r2
  200230:	bf3c      	itt	cc
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
  200236:	e7fa      	bcc.n	20022e <msloop>
  200238:	491c      	ldr	r1, [pc, #112]	; (2002ac <endfiniloop+0x16>)
  20023a:	4a18      	ldr	r2, [pc, #96]	; (20029c <endfiniloop+0x6>)

0020023c <psloop>:
  20023c:	4291      	cmp	r1, r2
  20023e:	bf3c      	itt	cc
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
  200244:	e7fa      	bcc.n	20023c <psloop>
  200246:	491a      	ldr	r1, [pc, #104]	; (2002b0 <endfiniloop+0x1a>)
  200248:	4a1a      	ldr	r2, [pc, #104]	; (2002b4 <endfiniloop+0x1e>)
  20024a:	4b1b      	ldr	r3, [pc, #108]	; (2002b8 <endfiniloop+0x22>)

0020024c <dloop>:
  20024c:	429a      	cmp	r2, r3
  20024e:	bf3e      	ittt	cc
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
  200258:	e7f8      	bcc.n	20024c <dloop>
  20025a:	2000      	movs	r0, #0
  20025c:	4917      	ldr	r1, [pc, #92]	; (2002bc <endfiniloop+0x26>)
  20025e:	4a18      	ldr	r2, [pc, #96]	; (2002c0 <endfiniloop+0x2a>)

00200260 <bloop>:
  200260:	4291      	cmp	r1, r2
  200262:	bf3c      	itt	cc
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
  200268:	e7fa      	bcc.n	200260 <bloop>
  20026a:	f002 f9c1 	bl	2025f0 <__init_ram_areas>
  20026e:	f002 f9f7 	bl	202660 <__late_init>
  200272:	4c14      	ldr	r4, [pc, #80]	; (2002c4 <endfiniloop+0x2e>)
  200274:	4d14      	ldr	r5, [pc, #80]	; (2002c8 <endfiniloop+0x32>)

00200276 <initloop>:
  200276:	42ac      	cmp	r4, r5
  200278:	da03      	bge.n	200282 <endinitloop>
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
  20027e:	4788      	blx	r1
  200280:	e7f9      	b.n	200276 <initloop>

00200282 <endinitloop>:
  200282:	f001 fd95 	bl	201db0 <main>
  200286:	4c11      	ldr	r4, [pc, #68]	; (2002cc <endfiniloop+0x36>)
  200288:	4d11      	ldr	r5, [pc, #68]	; (2002d0 <endfiniloop+0x3a>)

0020028a <finiloop>:
  20028a:	42ac      	cmp	r4, r5
  20028c:	da03      	bge.n	200296 <endfiniloop>
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
  200292:	4788      	blx	r1
  200294:	e7f9      	b.n	20028a <finiloop>

00200296 <endfiniloop>:
  200296:	f002 b9db 	b.w	202650 <__default_exit>
  20029a:	0000      	.short	0x0000
  20029c:	20000800 	.word	0x20000800
  2002a0:	00200000 	.word	0x00200000
  2002a4:	20000000 	.word	0x20000000
  2002a8:	20000400 	.word	0x20000400
  2002ac:	20000400 	.word	0x20000400
  2002b0:	080027dc 	.word	0x080027dc
  2002b4:	20020000 	.word	0x20020000
  2002b8:	20020000 	.word	0x20020000
  2002bc:	20000800 	.word	0x20000800
  2002c0:	20000a0c 	.word	0x20000a0c
  2002c4:	00200200 	.word	0x00200200
  2002c8:	00200200 	.word	0x00200200
  2002cc:	00200200 	.word	0x00200200
  2002d0:	00200200 	.word	0x00200200

002002d4 <_port_switch>:
  2002d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
  2002dc:	f8d0 d00c 	ldr.w	sp, [r0, #12]
  2002e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002e4 <_port_thread_start>:
  2002e4:	2300      	movs	r3, #0
  2002e6:	f383 8811 	msr	BASEPRI, r3
  2002ea:	4628      	mov	r0, r5
  2002ec:	47a0      	blx	r4
  2002ee:	2000      	movs	r0, #0
  2002f0:	f002 f936 	bl	202560 <chThdExit>

002002f4 <_port_switch_from_isr>:
  2002f4:	f002 f95c 	bl	2025b0 <chSchDoReschedule>

002002f8 <_port_exit_from_isr>:
  2002f8:	df00      	svc	0
  2002fa:	e7fe      	b.n	2002fa <_port_exit_from_isr+0x2>

002002fc <__aeabi_drsub>:
  2002fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  200300:	e002      	b.n	200308 <__adddf3>
  200302:	bf00      	nop

00200304 <__aeabi_dsub>:
  200304:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00200308 <__adddf3>:
  200308:	b530      	push	{r4, r5, lr}
  20030a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  20030e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  200312:	ea94 0f05 	teq	r4, r5
  200316:	bf08      	it	eq
  200318:	ea90 0f02 	teqeq	r0, r2
  20031c:	bf1f      	itttt	ne
  20031e:	ea54 0c00 	orrsne.w	ip, r4, r0
  200322:	ea55 0c02 	orrsne.w	ip, r5, r2
  200326:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  20032a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  20032e:	f000 80e2 	beq.w	2004f6 <__adddf3+0x1ee>
  200332:	ea4f 5454 	mov.w	r4, r4, lsr #21
  200336:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  20033a:	bfb8      	it	lt
  20033c:	426d      	neglt	r5, r5
  20033e:	dd0c      	ble.n	20035a <__adddf3+0x52>
  200340:	442c      	add	r4, r5
  200342:	ea80 0202 	eor.w	r2, r0, r2
  200346:	ea81 0303 	eor.w	r3, r1, r3
  20034a:	ea82 0000 	eor.w	r0, r2, r0
  20034e:	ea83 0101 	eor.w	r1, r3, r1
  200352:	ea80 0202 	eor.w	r2, r0, r2
  200356:	ea81 0303 	eor.w	r3, r1, r3
  20035a:	2d36      	cmp	r5, #54	; 0x36
  20035c:	bf88      	it	hi
  20035e:	bd30      	pophi	{r4, r5, pc}
  200360:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200364:	ea4f 3101 	mov.w	r1, r1, lsl #12
  200368:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  20036c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  200370:	d002      	beq.n	200378 <__adddf3+0x70>
  200372:	4240      	negs	r0, r0
  200374:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200378:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  20037c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  200380:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  200384:	d002      	beq.n	20038c <__adddf3+0x84>
  200386:	4252      	negs	r2, r2
  200388:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  20038c:	ea94 0f05 	teq	r4, r5
  200390:	f000 80a7 	beq.w	2004e2 <__adddf3+0x1da>
  200394:	f1a4 0401 	sub.w	r4, r4, #1
  200398:	f1d5 0e20 	rsbs	lr, r5, #32
  20039c:	db0d      	blt.n	2003ba <__adddf3+0xb2>
  20039e:	fa02 fc0e 	lsl.w	ip, r2, lr
  2003a2:	fa22 f205 	lsr.w	r2, r2, r5
  2003a6:	1880      	adds	r0, r0, r2
  2003a8:	f141 0100 	adc.w	r1, r1, #0
  2003ac:	fa03 f20e 	lsl.w	r2, r3, lr
  2003b0:	1880      	adds	r0, r0, r2
  2003b2:	fa43 f305 	asr.w	r3, r3, r5
  2003b6:	4159      	adcs	r1, r3
  2003b8:	e00e      	b.n	2003d8 <__adddf3+0xd0>
  2003ba:	f1a5 0520 	sub.w	r5, r5, #32
  2003be:	f10e 0e20 	add.w	lr, lr, #32
  2003c2:	2a01      	cmp	r2, #1
  2003c4:	fa03 fc0e 	lsl.w	ip, r3, lr
  2003c8:	bf28      	it	cs
  2003ca:	f04c 0c02 	orrcs.w	ip, ip, #2
  2003ce:	fa43 f305 	asr.w	r3, r3, r5
  2003d2:	18c0      	adds	r0, r0, r3
  2003d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  2003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2003dc:	d507      	bpl.n	2003ee <__adddf3+0xe6>
  2003de:	f04f 0e00 	mov.w	lr, #0
  2003e2:	f1dc 0c00 	rsbs	ip, ip, #0
  2003e6:	eb7e 0000 	sbcs.w	r0, lr, r0
  2003ea:	eb6e 0101 	sbc.w	r1, lr, r1
  2003ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  2003f2:	d31b      	bcc.n	20042c <__adddf3+0x124>
  2003f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  2003f8:	d30c      	bcc.n	200414 <__adddf3+0x10c>
  2003fa:	0849      	lsrs	r1, r1, #1
  2003fc:	ea5f 0030 	movs.w	r0, r0, rrx
  200400:	ea4f 0c3c 	mov.w	ip, ip, rrx
  200404:	f104 0401 	add.w	r4, r4, #1
  200408:	ea4f 5244 	mov.w	r2, r4, lsl #21
  20040c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  200410:	f080 809a 	bcs.w	200548 <__adddf3+0x240>
  200414:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200418:	bf08      	it	eq
  20041a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  20041e:	f150 0000 	adcs.w	r0, r0, #0
  200422:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200426:	ea41 0105 	orr.w	r1, r1, r5
  20042a:	bd30      	pop	{r4, r5, pc}
  20042c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  200430:	4140      	adcs	r0, r0
  200432:	eb41 0101 	adc.w	r1, r1, r1
  200436:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20043a:	f1a4 0401 	sub.w	r4, r4, #1
  20043e:	d1e9      	bne.n	200414 <__adddf3+0x10c>
  200440:	f091 0f00 	teq	r1, #0
  200444:	bf04      	itt	eq
  200446:	4601      	moveq	r1, r0
  200448:	2000      	moveq	r0, #0
  20044a:	fab1 f381 	clz	r3, r1
  20044e:	bf08      	it	eq
  200450:	3320      	addeq	r3, #32
  200452:	f1a3 030b 	sub.w	r3, r3, #11
  200456:	f1b3 0220 	subs.w	r2, r3, #32
  20045a:	da0c      	bge.n	200476 <__adddf3+0x16e>
  20045c:	320c      	adds	r2, #12
  20045e:	dd08      	ble.n	200472 <__adddf3+0x16a>
  200460:	f102 0c14 	add.w	ip, r2, #20
  200464:	f1c2 020c 	rsb	r2, r2, #12
  200468:	fa01 f00c 	lsl.w	r0, r1, ip
  20046c:	fa21 f102 	lsr.w	r1, r1, r2
  200470:	e00c      	b.n	20048c <__adddf3+0x184>
  200472:	f102 0214 	add.w	r2, r2, #20
  200476:	bfd8      	it	le
  200478:	f1c2 0c20 	rsble	ip, r2, #32
  20047c:	fa01 f102 	lsl.w	r1, r1, r2
  200480:	fa20 fc0c 	lsr.w	ip, r0, ip
  200484:	bfdc      	itt	le
  200486:	ea41 010c 	orrle.w	r1, r1, ip
  20048a:	4090      	lslle	r0, r2
  20048c:	1ae4      	subs	r4, r4, r3
  20048e:	bfa2      	ittt	ge
  200490:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  200494:	4329      	orrge	r1, r5
  200496:	bd30      	popge	{r4, r5, pc}
  200498:	ea6f 0404 	mvn.w	r4, r4
  20049c:	3c1f      	subs	r4, #31
  20049e:	da1c      	bge.n	2004da <__adddf3+0x1d2>
  2004a0:	340c      	adds	r4, #12
  2004a2:	dc0e      	bgt.n	2004c2 <__adddf3+0x1ba>
  2004a4:	f104 0414 	add.w	r4, r4, #20
  2004a8:	f1c4 0220 	rsb	r2, r4, #32
  2004ac:	fa20 f004 	lsr.w	r0, r0, r4
  2004b0:	fa01 f302 	lsl.w	r3, r1, r2
  2004b4:	ea40 0003 	orr.w	r0, r0, r3
  2004b8:	fa21 f304 	lsr.w	r3, r1, r4
  2004bc:	ea45 0103 	orr.w	r1, r5, r3
  2004c0:	bd30      	pop	{r4, r5, pc}
  2004c2:	f1c4 040c 	rsb	r4, r4, #12
  2004c6:	f1c4 0220 	rsb	r2, r4, #32
  2004ca:	fa20 f002 	lsr.w	r0, r0, r2
  2004ce:	fa01 f304 	lsl.w	r3, r1, r4
  2004d2:	ea40 0003 	orr.w	r0, r0, r3
  2004d6:	4629      	mov	r1, r5
  2004d8:	bd30      	pop	{r4, r5, pc}
  2004da:	fa21 f004 	lsr.w	r0, r1, r4
  2004de:	4629      	mov	r1, r5
  2004e0:	bd30      	pop	{r4, r5, pc}
  2004e2:	f094 0f00 	teq	r4, #0
  2004e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  2004ea:	bf06      	itte	eq
  2004ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  2004f0:	3401      	addeq	r4, #1
  2004f2:	3d01      	subne	r5, #1
  2004f4:	e74e      	b.n	200394 <__adddf3+0x8c>
  2004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  2004fa:	bf18      	it	ne
  2004fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  200500:	d029      	beq.n	200556 <__adddf3+0x24e>
  200502:	ea94 0f05 	teq	r4, r5
  200506:	bf08      	it	eq
  200508:	ea90 0f02 	teqeq	r0, r2
  20050c:	d005      	beq.n	20051a <__adddf3+0x212>
  20050e:	ea54 0c00 	orrs.w	ip, r4, r0
  200512:	bf04      	itt	eq
  200514:	4619      	moveq	r1, r3
  200516:	4610      	moveq	r0, r2
  200518:	bd30      	pop	{r4, r5, pc}
  20051a:	ea91 0f03 	teq	r1, r3
  20051e:	bf1e      	ittt	ne
  200520:	2100      	movne	r1, #0
  200522:	2000      	movne	r0, #0
  200524:	bd30      	popne	{r4, r5, pc}
  200526:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  20052a:	d105      	bne.n	200538 <__adddf3+0x230>
  20052c:	0040      	lsls	r0, r0, #1
  20052e:	4149      	adcs	r1, r1
  200530:	bf28      	it	cs
  200532:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  200536:	bd30      	pop	{r4, r5, pc}
  200538:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  20053c:	bf3c      	itt	cc
  20053e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  200542:	bd30      	popcc	{r4, r5, pc}
  200544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  200548:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  20054c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  200550:	f04f 0000 	mov.w	r0, #0
  200554:	bd30      	pop	{r4, r5, pc}
  200556:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  20055a:	bf1a      	itte	ne
  20055c:	4619      	movne	r1, r3
  20055e:	4610      	movne	r0, r2
  200560:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  200564:	bf1c      	itt	ne
  200566:	460b      	movne	r3, r1
  200568:	4602      	movne	r2, r0
  20056a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  20056e:	bf06      	itte	eq
  200570:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  200574:	ea91 0f03 	teqeq	r1, r3
  200578:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  20057c:	bd30      	pop	{r4, r5, pc}
  20057e:	bf00      	nop

00200580 <__aeabi_ui2d>:
  200580:	f090 0f00 	teq	r0, #0
  200584:	bf04      	itt	eq
  200586:	2100      	moveq	r1, #0
  200588:	4770      	bxeq	lr
  20058a:	b530      	push	{r4, r5, lr}
  20058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  200590:	f104 0432 	add.w	r4, r4, #50	; 0x32
  200594:	f04f 0500 	mov.w	r5, #0
  200598:	f04f 0100 	mov.w	r1, #0
  20059c:	e750      	b.n	200440 <__adddf3+0x138>
  20059e:	bf00      	nop

002005a0 <__aeabi_i2d>:
  2005a0:	f090 0f00 	teq	r0, #0
  2005a4:	bf04      	itt	eq
  2005a6:	2100      	moveq	r1, #0
  2005a8:	4770      	bxeq	lr
  2005aa:	b530      	push	{r4, r5, lr}
  2005ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  2005b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  2005b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  2005b8:	bf48      	it	mi
  2005ba:	4240      	negmi	r0, r0
  2005bc:	f04f 0100 	mov.w	r1, #0
  2005c0:	e73e      	b.n	200440 <__adddf3+0x138>
  2005c2:	bf00      	nop

002005c4 <__aeabi_f2d>:
  2005c4:	0042      	lsls	r2, r0, #1
  2005c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  2005ca:	ea4f 0131 	mov.w	r1, r1, rrx
  2005ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  2005d2:	bf1f      	itttt	ne
  2005d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  2005d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  2005e0:	4770      	bxne	lr
  2005e2:	f092 0f00 	teq	r2, #0
  2005e6:	bf14      	ite	ne
  2005e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  2005ec:	4770      	bxeq	lr
  2005ee:	b530      	push	{r4, r5, lr}
  2005f0:	f44f 7460 	mov.w	r4, #896	; 0x380
  2005f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  2005f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  2005fc:	e720      	b.n	200440 <__adddf3+0x138>
  2005fe:	bf00      	nop

00200600 <__aeabi_ul2d>:
  200600:	ea50 0201 	orrs.w	r2, r0, r1
  200604:	bf08      	it	eq
  200606:	4770      	bxeq	lr
  200608:	b530      	push	{r4, r5, lr}
  20060a:	f04f 0500 	mov.w	r5, #0
  20060e:	e00a      	b.n	200626 <__aeabi_l2d+0x16>

00200610 <__aeabi_l2d>:
  200610:	ea50 0201 	orrs.w	r2, r0, r1
  200614:	bf08      	it	eq
  200616:	4770      	bxeq	lr
  200618:	b530      	push	{r4, r5, lr}
  20061a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  20061e:	d502      	bpl.n	200626 <__aeabi_l2d+0x16>
  200620:	4240      	negs	r0, r0
  200622:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200626:	f44f 6480 	mov.w	r4, #1024	; 0x400
  20062a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  20062e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  200632:	f43f aedc 	beq.w	2003ee <__adddf3+0xe6>
  200636:	f04f 0203 	mov.w	r2, #3
  20063a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  20063e:	bf18      	it	ne
  200640:	3203      	addne	r2, #3
  200642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  200646:	bf18      	it	ne
  200648:	3203      	addne	r2, #3
  20064a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  20064e:	f1c2 0320 	rsb	r3, r2, #32
  200652:	fa00 fc03 	lsl.w	ip, r0, r3
  200656:	fa20 f002 	lsr.w	r0, r0, r2
  20065a:	fa01 fe03 	lsl.w	lr, r1, r3
  20065e:	ea40 000e 	orr.w	r0, r0, lr
  200662:	fa21 f102 	lsr.w	r1, r1, r2
  200666:	4414      	add	r4, r2
  200668:	e6c1      	b.n	2003ee <__adddf3+0xe6>
  20066a:	bf00      	nop

0020066c <__aeabi_dmul>:
  20066c:	b570      	push	{r4, r5, r6, lr}
  20066e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200672:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  200676:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  20067a:	bf1d      	ittte	ne
  20067c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  200680:	ea94 0f0c 	teqne	r4, ip
  200684:	ea95 0f0c 	teqne	r5, ip
  200688:	f000 f8de 	bleq	200848 <__aeabi_dmul+0x1dc>
  20068c:	442c      	add	r4, r5
  20068e:	ea81 0603 	eor.w	r6, r1, r3
  200692:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  200696:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  20069a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  20069e:	bf18      	it	ne
  2006a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  2006a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  2006a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  2006ac:	d038      	beq.n	200720 <__aeabi_dmul+0xb4>
  2006ae:	fba0 ce02 	umull	ip, lr, r0, r2
  2006b2:	f04f 0500 	mov.w	r5, #0
  2006b6:	fbe1 e502 	umlal	lr, r5, r1, r2
  2006ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  2006be:	fbe0 e503 	umlal	lr, r5, r0, r3
  2006c2:	f04f 0600 	mov.w	r6, #0
  2006c6:	fbe1 5603 	umlal	r5, r6, r1, r3
  2006ca:	f09c 0f00 	teq	ip, #0
  2006ce:	bf18      	it	ne
  2006d0:	f04e 0e01 	orrne.w	lr, lr, #1
  2006d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  2006d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  2006dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  2006e0:	d204      	bcs.n	2006ec <__aeabi_dmul+0x80>
  2006e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  2006e6:	416d      	adcs	r5, r5
  2006e8:	eb46 0606 	adc.w	r6, r6, r6
  2006ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  2006f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  2006f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  2006f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  2006fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  200700:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  200704:	bf88      	it	hi
  200706:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  20070a:	d81e      	bhi.n	20074a <__aeabi_dmul+0xde>
  20070c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  200710:	bf08      	it	eq
  200712:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  200716:	f150 0000 	adcs.w	r0, r0, #0
  20071a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  20071e:	bd70      	pop	{r4, r5, r6, pc}
  200720:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  200724:	ea46 0101 	orr.w	r1, r6, r1
  200728:	ea40 0002 	orr.w	r0, r0, r2
  20072c:	ea81 0103 	eor.w	r1, r1, r3
  200730:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  200734:	bfc2      	ittt	gt
  200736:	ebd4 050c 	rsbsgt	r5, r4, ip
  20073a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  20073e:	bd70      	popgt	{r4, r5, r6, pc}
  200740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200744:	f04f 0e00 	mov.w	lr, #0
  200748:	3c01      	subs	r4, #1
  20074a:	f300 80ab 	bgt.w	2008a4 <__aeabi_dmul+0x238>
  20074e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  200752:	bfde      	ittt	le
  200754:	2000      	movle	r0, #0
  200756:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  20075a:	bd70      	pople	{r4, r5, r6, pc}
  20075c:	f1c4 0400 	rsb	r4, r4, #0
  200760:	3c20      	subs	r4, #32
  200762:	da35      	bge.n	2007d0 <__aeabi_dmul+0x164>
  200764:	340c      	adds	r4, #12
  200766:	dc1b      	bgt.n	2007a0 <__aeabi_dmul+0x134>
  200768:	f104 0414 	add.w	r4, r4, #20
  20076c:	f1c4 0520 	rsb	r5, r4, #32
  200770:	fa00 f305 	lsl.w	r3, r0, r5
  200774:	fa20 f004 	lsr.w	r0, r0, r4
  200778:	fa01 f205 	lsl.w	r2, r1, r5
  20077c:	ea40 0002 	orr.w	r0, r0, r2
  200780:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  200784:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  200788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  20078c:	fa21 f604 	lsr.w	r6, r1, r4
  200790:	eb42 0106 	adc.w	r1, r2, r6
  200794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200798:	bf08      	it	eq
  20079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  20079e:	bd70      	pop	{r4, r5, r6, pc}
  2007a0:	f1c4 040c 	rsb	r4, r4, #12
  2007a4:	f1c4 0520 	rsb	r5, r4, #32
  2007a8:	fa00 f304 	lsl.w	r3, r0, r4
  2007ac:	fa20 f005 	lsr.w	r0, r0, r5
  2007b0:	fa01 f204 	lsl.w	r2, r1, r4
  2007b4:	ea40 0002 	orr.w	r0, r0, r2
  2007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  2007c0:	f141 0100 	adc.w	r1, r1, #0
  2007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  2007c8:	bf08      	it	eq
  2007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  2007ce:	bd70      	pop	{r4, r5, r6, pc}
  2007d0:	f1c4 0520 	rsb	r5, r4, #32
  2007d4:	fa00 f205 	lsl.w	r2, r0, r5
  2007d8:	ea4e 0e02 	orr.w	lr, lr, r2
  2007dc:	fa20 f304 	lsr.w	r3, r0, r4
  2007e0:	fa01 f205 	lsl.w	r2, r1, r5
  2007e4:	ea43 0302 	orr.w	r3, r3, r2
  2007e8:	fa21 f004 	lsr.w	r0, r1, r4
  2007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007f0:	fa21 f204 	lsr.w	r2, r1, r4
  2007f4:	ea20 0002 	bic.w	r0, r0, r2
  2007f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  2007fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200800:	bf08      	it	eq
  200802:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  200806:	bd70      	pop	{r4, r5, r6, pc}
  200808:	f094 0f00 	teq	r4, #0
  20080c:	d10f      	bne.n	20082e <__aeabi_dmul+0x1c2>
  20080e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  200812:	0040      	lsls	r0, r0, #1
  200814:	eb41 0101 	adc.w	r1, r1, r1
  200818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20081c:	bf08      	it	eq
  20081e:	3c01      	subeq	r4, #1
  200820:	d0f7      	beq.n	200812 <__aeabi_dmul+0x1a6>
  200822:	ea41 0106 	orr.w	r1, r1, r6
  200826:	f095 0f00 	teq	r5, #0
  20082a:	bf18      	it	ne
  20082c:	4770      	bxne	lr
  20082e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  200832:	0052      	lsls	r2, r2, #1
  200834:	eb43 0303 	adc.w	r3, r3, r3
  200838:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  20083c:	bf08      	it	eq
  20083e:	3d01      	subeq	r5, #1
  200840:	d0f7      	beq.n	200832 <__aeabi_dmul+0x1c6>
  200842:	ea43 0306 	orr.w	r3, r3, r6
  200846:	4770      	bx	lr
  200848:	ea94 0f0c 	teq	r4, ip
  20084c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200850:	bf18      	it	ne
  200852:	ea95 0f0c 	teqne	r5, ip
  200856:	d00c      	beq.n	200872 <__aeabi_dmul+0x206>
  200858:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  20085c:	bf18      	it	ne
  20085e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200862:	d1d1      	bne.n	200808 <__aeabi_dmul+0x19c>
  200864:	ea81 0103 	eor.w	r1, r1, r3
  200868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  20086c:	f04f 0000 	mov.w	r0, #0
  200870:	bd70      	pop	{r4, r5, r6, pc}
  200872:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200876:	bf06      	itte	eq
  200878:	4610      	moveq	r0, r2
  20087a:	4619      	moveq	r1, r3
  20087c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200880:	d019      	beq.n	2008b6 <__aeabi_dmul+0x24a>
  200882:	ea94 0f0c 	teq	r4, ip
  200886:	d102      	bne.n	20088e <__aeabi_dmul+0x222>
  200888:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  20088c:	d113      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  20088e:	ea95 0f0c 	teq	r5, ip
  200892:	d105      	bne.n	2008a0 <__aeabi_dmul+0x234>
  200894:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  200898:	bf1c      	itt	ne
  20089a:	4610      	movne	r0, r2
  20089c:	4619      	movne	r1, r3
  20089e:	d10a      	bne.n	2008b6 <__aeabi_dmul+0x24a>
  2008a0:	ea81 0103 	eor.w	r1, r1, r3
  2008a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2008a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  2008b0:	f04f 0000 	mov.w	r0, #0
  2008b4:	bd70      	pop	{r4, r5, r6, pc}
  2008b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2008ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  2008be:	bd70      	pop	{r4, r5, r6, pc}

002008c0 <__aeabi_ddiv>:
  2008c0:	b570      	push	{r4, r5, r6, lr}
  2008c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  2008c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  2008ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  2008ce:	bf1d      	ittte	ne
  2008d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  2008d4:	ea94 0f0c 	teqne	r4, ip
  2008d8:	ea95 0f0c 	teqne	r5, ip
  2008dc:	f000 f8a7 	bleq	200a2e <__aeabi_ddiv+0x16e>
  2008e0:	eba4 0405 	sub.w	r4, r4, r5
  2008e4:	ea81 0e03 	eor.w	lr, r1, r3
  2008e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  2008ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  2008f0:	f000 8088 	beq.w	200a04 <__aeabi_ddiv+0x144>
  2008f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  2008f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  2008fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  200900:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  200904:	ea4f 2202 	mov.w	r2, r2, lsl #8
  200908:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  20090c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  200910:	ea4f 2600 	mov.w	r6, r0, lsl #8
  200914:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  200918:	429d      	cmp	r5, r3
  20091a:	bf08      	it	eq
  20091c:	4296      	cmpeq	r6, r2
  20091e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  200922:	f504 7440 	add.w	r4, r4, #768	; 0x300
  200926:	d202      	bcs.n	20092e <__aeabi_ddiv+0x6e>
  200928:	085b      	lsrs	r3, r3, #1
  20092a:	ea4f 0232 	mov.w	r2, r2, rrx
  20092e:	1ab6      	subs	r6, r6, r2
  200930:	eb65 0503 	sbc.w	r5, r5, r3
  200934:	085b      	lsrs	r3, r3, #1
  200936:	ea4f 0232 	mov.w	r2, r2, rrx
  20093a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  20093e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  200942:	ebb6 0e02 	subs.w	lr, r6, r2
  200946:	eb75 0e03 	sbcs.w	lr, r5, r3
  20094a:	bf22      	ittt	cs
  20094c:	1ab6      	subcs	r6, r6, r2
  20094e:	4675      	movcs	r5, lr
  200950:	ea40 000c 	orrcs.w	r0, r0, ip
  200954:	085b      	lsrs	r3, r3, #1
  200956:	ea4f 0232 	mov.w	r2, r2, rrx
  20095a:	ebb6 0e02 	subs.w	lr, r6, r2
  20095e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200962:	bf22      	ittt	cs
  200964:	1ab6      	subcs	r6, r6, r2
  200966:	4675      	movcs	r5, lr
  200968:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  20096c:	085b      	lsrs	r3, r3, #1
  20096e:	ea4f 0232 	mov.w	r2, r2, rrx
  200972:	ebb6 0e02 	subs.w	lr, r6, r2
  200976:	eb75 0e03 	sbcs.w	lr, r5, r3
  20097a:	bf22      	ittt	cs
  20097c:	1ab6      	subcs	r6, r6, r2
  20097e:	4675      	movcs	r5, lr
  200980:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  200984:	085b      	lsrs	r3, r3, #1
  200986:	ea4f 0232 	mov.w	r2, r2, rrx
  20098a:	ebb6 0e02 	subs.w	lr, r6, r2
  20098e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200992:	bf22      	ittt	cs
  200994:	1ab6      	subcs	r6, r6, r2
  200996:	4675      	movcs	r5, lr
  200998:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  20099c:	ea55 0e06 	orrs.w	lr, r5, r6
  2009a0:	d018      	beq.n	2009d4 <__aeabi_ddiv+0x114>
  2009a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  2009a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  2009aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  2009ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  2009b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  2009b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  2009ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  2009be:	d1c0      	bne.n	200942 <__aeabi_ddiv+0x82>
  2009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009c4:	d10b      	bne.n	2009de <__aeabi_ddiv+0x11e>
  2009c6:	ea41 0100 	orr.w	r1, r1, r0
  2009ca:	f04f 0000 	mov.w	r0, #0
  2009ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  2009d2:	e7b6      	b.n	200942 <__aeabi_ddiv+0x82>
  2009d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2009d8:	bf04      	itt	eq
  2009da:	4301      	orreq	r1, r0
  2009dc:	2000      	moveq	r0, #0
  2009de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  2009e2:	bf88      	it	hi
  2009e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  2009e8:	f63f aeaf 	bhi.w	20074a <__aeabi_dmul+0xde>
  2009ec:	ebb5 0c03 	subs.w	ip, r5, r3
  2009f0:	bf04      	itt	eq
  2009f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  2009f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  2009fa:	f150 0000 	adcs.w	r0, r0, #0
  2009fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200a02:	bd70      	pop	{r4, r5, r6, pc}
  200a04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  200a08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  200a0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  200a10:	bfc2      	ittt	gt
  200a12:	ebd4 050c 	rsbsgt	r5, r4, ip
  200a16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  200a1a:	bd70      	popgt	{r4, r5, r6, pc}
  200a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200a20:	f04f 0e00 	mov.w	lr, #0
  200a24:	3c01      	subs	r4, #1
  200a26:	e690      	b.n	20074a <__aeabi_dmul+0xde>
  200a28:	ea45 0e06 	orr.w	lr, r5, r6
  200a2c:	e68d      	b.n	20074a <__aeabi_dmul+0xde>
  200a2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200a32:	ea94 0f0c 	teq	r4, ip
  200a36:	bf08      	it	eq
  200a38:	ea95 0f0c 	teqeq	r5, ip
  200a3c:	f43f af3b 	beq.w	2008b6 <__aeabi_dmul+0x24a>
  200a40:	ea94 0f0c 	teq	r4, ip
  200a44:	d10a      	bne.n	200a5c <__aeabi_ddiv+0x19c>
  200a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  200a4a:	f47f af34 	bne.w	2008b6 <__aeabi_dmul+0x24a>
  200a4e:	ea95 0f0c 	teq	r5, ip
  200a52:	f47f af25 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a56:	4610      	mov	r0, r2
  200a58:	4619      	mov	r1, r3
  200a5a:	e72c      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a5c:	ea95 0f0c 	teq	r5, ip
  200a60:	d106      	bne.n	200a70 <__aeabi_ddiv+0x1b0>
  200a62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  200a66:	f43f aefd 	beq.w	200864 <__aeabi_dmul+0x1f8>
  200a6a:	4610      	mov	r0, r2
  200a6c:	4619      	mov	r1, r3
  200a6e:	e722      	b.n	2008b6 <__aeabi_dmul+0x24a>
  200a70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200a74:	bf18      	it	ne
  200a76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200a7a:	f47f aec5 	bne.w	200808 <__aeabi_dmul+0x19c>
  200a7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  200a82:	f47f af0d 	bne.w	2008a0 <__aeabi_dmul+0x234>
  200a86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  200a8a:	f47f aeeb 	bne.w	200864 <__aeabi_dmul+0x1f8>
  200a8e:	e712      	b.n	2008b6 <__aeabi_dmul+0x24a>

00200a90 <__aeabi_d2iz>:
  200a90:	ea4f 0241 	mov.w	r2, r1, lsl #1
  200a94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  200a98:	d215      	bcs.n	200ac6 <__aeabi_d2iz+0x36>
  200a9a:	d511      	bpl.n	200ac0 <__aeabi_d2iz+0x30>
  200a9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  200aa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  200aa4:	d912      	bls.n	200acc <__aeabi_d2iz+0x3c>
  200aa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  200aaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  200aae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  200ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200ab6:	fa23 f002 	lsr.w	r0, r3, r2
  200aba:	bf18      	it	ne
  200abc:	4240      	negne	r0, r0
  200abe:	4770      	bx	lr
  200ac0:	f04f 0000 	mov.w	r0, #0
  200ac4:	4770      	bx	lr
  200ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  200aca:	d105      	bne.n	200ad8 <__aeabi_d2iz+0x48>
  200acc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  200ad0:	bf08      	it	eq
  200ad2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  200ad6:	4770      	bx	lr
  200ad8:	f04f 0000 	mov.w	r0, #0
  200adc:	4770      	bx	lr
  200ade:	bf00      	nop

00200ae0 <__aeabi_d2f>:
  200ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  200ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  200ae8:	bf24      	itt	cs
  200aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  200aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  200af2:	d90d      	bls.n	200b10 <__aeabi_d2f+0x30>
  200af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  200af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  200afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  200b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  200b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  200b08:	bf08      	it	eq
  200b0a:	f020 0001 	biceq.w	r0, r0, #1
  200b0e:	4770      	bx	lr
  200b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  200b14:	d121      	bne.n	200b5a <__aeabi_d2f+0x7a>
  200b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  200b1a:	bfbc      	itt	lt
  200b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  200b20:	4770      	bxlt	lr
  200b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
  200b2a:	f1c2 0218 	rsb	r2, r2, #24
  200b2e:	f1c2 0c20 	rsb	ip, r2, #32
  200b32:	fa10 f30c 	lsls.w	r3, r0, ip
  200b36:	fa20 f002 	lsr.w	r0, r0, r2
  200b3a:	bf18      	it	ne
  200b3c:	f040 0001 	orrne.w	r0, r0, #1
  200b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  200b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  200b48:	fa03 fc0c 	lsl.w	ip, r3, ip
  200b4c:	ea40 000c 	orr.w	r0, r0, ip
  200b50:	fa23 f302 	lsr.w	r3, r3, r2
  200b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
  200b58:	e7cc      	b.n	200af4 <__aeabi_d2f+0x14>
  200b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  200b5e:	d107      	bne.n	200b70 <__aeabi_d2f+0x90>
  200b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  200b64:	bf1e      	ittt	ne
  200b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  200b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  200b6e:	4770      	bxne	lr
  200b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  200b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  200b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200b7c:	4770      	bx	lr
  200b7e:	bf00      	nop

00200b80 <__aeabi_frsub>:
  200b80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  200b84:	e002      	b.n	200b8c <__addsf3>
  200b86:	bf00      	nop

00200b88 <__aeabi_fsub>:
  200b88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00200b8c <__addsf3>:
  200b8c:	0042      	lsls	r2, r0, #1
  200b8e:	bf1f      	itttt	ne
  200b90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  200b94:	ea92 0f03 	teqne	r2, r3
  200b98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  200b9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  200ba0:	d06a      	beq.n	200c78 <__addsf3+0xec>
  200ba2:	ea4f 6212 	mov.w	r2, r2, lsr #24
  200ba6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  200baa:	bfc1      	itttt	gt
  200bac:	18d2      	addgt	r2, r2, r3
  200bae:	4041      	eorgt	r1, r0
  200bb0:	4048      	eorgt	r0, r1
  200bb2:	4041      	eorgt	r1, r0
  200bb4:	bfb8      	it	lt
  200bb6:	425b      	neglt	r3, r3
  200bb8:	2b19      	cmp	r3, #25
  200bba:	bf88      	it	hi
  200bbc:	4770      	bxhi	lr
  200bbe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  200bc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200bc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  200bca:	bf18      	it	ne
  200bcc:	4240      	negne	r0, r0
  200bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200bd2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  200bd6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  200bda:	bf18      	it	ne
  200bdc:	4249      	negne	r1, r1
  200bde:	ea92 0f03 	teq	r2, r3
  200be2:	d03f      	beq.n	200c64 <__addsf3+0xd8>
  200be4:	f1a2 0201 	sub.w	r2, r2, #1
  200be8:	fa41 fc03 	asr.w	ip, r1, r3
  200bec:	eb10 000c 	adds.w	r0, r0, ip
  200bf0:	f1c3 0320 	rsb	r3, r3, #32
  200bf4:	fa01 f103 	lsl.w	r1, r1, r3
  200bf8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  200bfc:	d502      	bpl.n	200c04 <__addsf3+0x78>
  200bfe:	4249      	negs	r1, r1
  200c00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  200c04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  200c08:	d313      	bcc.n	200c32 <__addsf3+0xa6>
  200c0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  200c0e:	d306      	bcc.n	200c1e <__addsf3+0x92>
  200c10:	0840      	lsrs	r0, r0, #1
  200c12:	ea4f 0131 	mov.w	r1, r1, rrx
  200c16:	f102 0201 	add.w	r2, r2, #1
  200c1a:	2afe      	cmp	r2, #254	; 0xfe
  200c1c:	d251      	bcs.n	200cc2 <__addsf3+0x136>
  200c1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  200c22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  200c26:	bf08      	it	eq
  200c28:	f020 0001 	biceq.w	r0, r0, #1
  200c2c:	ea40 0003 	orr.w	r0, r0, r3
  200c30:	4770      	bx	lr
  200c32:	0049      	lsls	r1, r1, #1
  200c34:	eb40 0000 	adc.w	r0, r0, r0
  200c38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  200c3c:	f1a2 0201 	sub.w	r2, r2, #1
  200c40:	d1ed      	bne.n	200c1e <__addsf3+0x92>
  200c42:	fab0 fc80 	clz	ip, r0
  200c46:	f1ac 0c08 	sub.w	ip, ip, #8
  200c4a:	ebb2 020c 	subs.w	r2, r2, ip
  200c4e:	fa00 f00c 	lsl.w	r0, r0, ip
  200c52:	bfaa      	itet	ge
  200c54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  200c58:	4252      	neglt	r2, r2
  200c5a:	4318      	orrge	r0, r3
  200c5c:	bfbc      	itt	lt
  200c5e:	40d0      	lsrlt	r0, r2
  200c60:	4318      	orrlt	r0, r3
  200c62:	4770      	bx	lr
  200c64:	f092 0f00 	teq	r2, #0
  200c68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  200c6c:	bf06      	itte	eq
  200c6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  200c72:	3201      	addeq	r2, #1
  200c74:	3b01      	subne	r3, #1
  200c76:	e7b5      	b.n	200be4 <__addsf3+0x58>
  200c78:	ea4f 0341 	mov.w	r3, r1, lsl #1
  200c7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  200c80:	bf18      	it	ne
  200c82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  200c86:	d021      	beq.n	200ccc <__addsf3+0x140>
  200c88:	ea92 0f03 	teq	r2, r3
  200c8c:	d004      	beq.n	200c98 <__addsf3+0x10c>
  200c8e:	f092 0f00 	teq	r2, #0
  200c92:	bf08      	it	eq
  200c94:	4608      	moveq	r0, r1
  200c96:	4770      	bx	lr
  200c98:	ea90 0f01 	teq	r0, r1
  200c9c:	bf1c      	itt	ne
  200c9e:	2000      	movne	r0, #0
  200ca0:	4770      	bxne	lr
  200ca2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  200ca6:	d104      	bne.n	200cb2 <__addsf3+0x126>
  200ca8:	0040      	lsls	r0, r0, #1
  200caa:	bf28      	it	cs
  200cac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  200cb0:	4770      	bx	lr
  200cb2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  200cb6:	bf3c      	itt	cc
  200cb8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  200cbc:	4770      	bxcc	lr
  200cbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  200cc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  200cc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200cca:	4770      	bx	lr
  200ccc:	ea7f 6222 	mvns.w	r2, r2, asr #24
  200cd0:	bf16      	itet	ne
  200cd2:	4608      	movne	r0, r1
  200cd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  200cd8:	4601      	movne	r1, r0
  200cda:	0242      	lsls	r2, r0, #9
  200cdc:	bf06      	itte	eq
  200cde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  200ce2:	ea90 0f01 	teqeq	r0, r1
  200ce6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  200cea:	4770      	bx	lr

00200cec <__aeabi_ui2f>:
  200cec:	f04f 0300 	mov.w	r3, #0
  200cf0:	e004      	b.n	200cfc <__aeabi_i2f+0x8>
  200cf2:	bf00      	nop

00200cf4 <__aeabi_i2f>:
  200cf4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  200cf8:	bf48      	it	mi
  200cfa:	4240      	negmi	r0, r0
  200cfc:	ea5f 0c00 	movs.w	ip, r0
  200d00:	bf08      	it	eq
  200d02:	4770      	bxeq	lr
  200d04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  200d08:	4601      	mov	r1, r0
  200d0a:	f04f 0000 	mov.w	r0, #0
  200d0e:	e01c      	b.n	200d4a <__aeabi_l2f+0x2a>

00200d10 <__aeabi_ul2f>:
  200d10:	ea50 0201 	orrs.w	r2, r0, r1
  200d14:	bf08      	it	eq
  200d16:	4770      	bxeq	lr
  200d18:	f04f 0300 	mov.w	r3, #0
  200d1c:	e00a      	b.n	200d34 <__aeabi_l2f+0x14>
  200d1e:	bf00      	nop

00200d20 <__aeabi_l2f>:
  200d20:	ea50 0201 	orrs.w	r2, r0, r1
  200d24:	bf08      	it	eq
  200d26:	4770      	bxeq	lr
  200d28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  200d2c:	d502      	bpl.n	200d34 <__aeabi_l2f+0x14>
  200d2e:	4240      	negs	r0, r0
  200d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200d34:	ea5f 0c01 	movs.w	ip, r1
  200d38:	bf02      	ittt	eq
  200d3a:	4684      	moveq	ip, r0
  200d3c:	4601      	moveq	r1, r0
  200d3e:	2000      	moveq	r0, #0
  200d40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  200d44:	bf08      	it	eq
  200d46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  200d4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  200d4e:	fabc f28c 	clz	r2, ip
  200d52:	3a08      	subs	r2, #8
  200d54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  200d58:	db10      	blt.n	200d7c <__aeabi_l2f+0x5c>
  200d5a:	fa01 fc02 	lsl.w	ip, r1, r2
  200d5e:	4463      	add	r3, ip
  200d60:	fa00 fc02 	lsl.w	ip, r0, r2
  200d64:	f1c2 0220 	rsb	r2, r2, #32
  200d68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200d6c:	fa20 f202 	lsr.w	r2, r0, r2
  200d70:	eb43 0002 	adc.w	r0, r3, r2
  200d74:	bf08      	it	eq
  200d76:	f020 0001 	biceq.w	r0, r0, #1
  200d7a:	4770      	bx	lr
  200d7c:	f102 0220 	add.w	r2, r2, #32
  200d80:	fa01 fc02 	lsl.w	ip, r1, r2
  200d84:	f1c2 0220 	rsb	r2, r2, #32
  200d88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  200d8c:	fa21 f202 	lsr.w	r2, r1, r2
  200d90:	eb43 0002 	adc.w	r0, r3, r2
  200d94:	bf08      	it	eq
  200d96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  200d9a:	4770      	bx	lr

00200d9c <__aeabi_fmul>:
  200d9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200da0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  200da4:	bf1e      	ittt	ne
  200da6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  200daa:	ea92 0f0c 	teqne	r2, ip
  200dae:	ea93 0f0c 	teqne	r3, ip
  200db2:	d06f      	beq.n	200e94 <__aeabi_fmul+0xf8>
  200db4:	441a      	add	r2, r3
  200db6:	ea80 0c01 	eor.w	ip, r0, r1
  200dba:	0240      	lsls	r0, r0, #9
  200dbc:	bf18      	it	ne
  200dbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  200dc2:	d01e      	beq.n	200e02 <__aeabi_fmul+0x66>
  200dc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  200dc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  200dcc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  200dd0:	fba0 3101 	umull	r3, r1, r0, r1
  200dd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  200dd8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  200ddc:	bf3e      	ittt	cc
  200dde:	0049      	lslcc	r1, r1, #1
  200de0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  200de4:	005b      	lslcc	r3, r3, #1
  200de6:	ea40 0001 	orr.w	r0, r0, r1
  200dea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  200dee:	2afd      	cmp	r2, #253	; 0xfd
  200df0:	d81d      	bhi.n	200e2e <__aeabi_fmul+0x92>
  200df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  200df6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  200dfa:	bf08      	it	eq
  200dfc:	f020 0001 	biceq.w	r0, r0, #1
  200e00:	4770      	bx	lr
  200e02:	f090 0f00 	teq	r0, #0
  200e06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  200e0a:	bf08      	it	eq
  200e0c:	0249      	lsleq	r1, r1, #9
  200e0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  200e12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  200e16:	3a7f      	subs	r2, #127	; 0x7f
  200e18:	bfc2      	ittt	gt
  200e1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  200e1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  200e22:	4770      	bxgt	lr
  200e24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200e28:	f04f 0300 	mov.w	r3, #0
  200e2c:	3a01      	subs	r2, #1
  200e2e:	dc5d      	bgt.n	200eec <__aeabi_fmul+0x150>
  200e30:	f112 0f19 	cmn.w	r2, #25
  200e34:	bfdc      	itt	le
  200e36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  200e3a:	4770      	bxle	lr
  200e3c:	f1c2 0200 	rsb	r2, r2, #0
  200e40:	0041      	lsls	r1, r0, #1
  200e42:	fa21 f102 	lsr.w	r1, r1, r2
  200e46:	f1c2 0220 	rsb	r2, r2, #32
  200e4a:	fa00 fc02 	lsl.w	ip, r0, r2
  200e4e:	ea5f 0031 	movs.w	r0, r1, rrx
  200e52:	f140 0000 	adc.w	r0, r0, #0
  200e56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  200e5a:	bf08      	it	eq
  200e5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  200e60:	4770      	bx	lr
  200e62:	f092 0f00 	teq	r2, #0
  200e66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  200e6a:	bf02      	ittt	eq
  200e6c:	0040      	lsleq	r0, r0, #1
  200e6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  200e72:	3a01      	subeq	r2, #1
  200e74:	d0f9      	beq.n	200e6a <__aeabi_fmul+0xce>
  200e76:	ea40 000c 	orr.w	r0, r0, ip
  200e7a:	f093 0f00 	teq	r3, #0
  200e7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  200e82:	bf02      	ittt	eq
  200e84:	0049      	lsleq	r1, r1, #1
  200e86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  200e8a:	3b01      	subeq	r3, #1
  200e8c:	d0f9      	beq.n	200e82 <__aeabi_fmul+0xe6>
  200e8e:	ea41 010c 	orr.w	r1, r1, ip
  200e92:	e78f      	b.n	200db4 <__aeabi_fmul+0x18>
  200e94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  200e98:	ea92 0f0c 	teq	r2, ip
  200e9c:	bf18      	it	ne
  200e9e:	ea93 0f0c 	teqne	r3, ip
  200ea2:	d00a      	beq.n	200eba <__aeabi_fmul+0x11e>
  200ea4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  200ea8:	bf18      	it	ne
  200eaa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  200eae:	d1d8      	bne.n	200e62 <__aeabi_fmul+0xc6>
  200eb0:	ea80 0001 	eor.w	r0, r0, r1
  200eb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  200eb8:	4770      	bx	lr
  200eba:	f090 0f00 	teq	r0, #0
  200ebe:	bf17      	itett	ne
  200ec0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  200ec4:	4608      	moveq	r0, r1
  200ec6:	f091 0f00 	teqne	r1, #0
  200eca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  200ece:	d014      	beq.n	200efa <__aeabi_fmul+0x15e>
  200ed0:	ea92 0f0c 	teq	r2, ip
  200ed4:	d101      	bne.n	200eda <__aeabi_fmul+0x13e>
  200ed6:	0242      	lsls	r2, r0, #9
  200ed8:	d10f      	bne.n	200efa <__aeabi_fmul+0x15e>
  200eda:	ea93 0f0c 	teq	r3, ip
  200ede:	d103      	bne.n	200ee8 <__aeabi_fmul+0x14c>
  200ee0:	024b      	lsls	r3, r1, #9
  200ee2:	bf18      	it	ne
  200ee4:	4608      	movne	r0, r1
  200ee6:	d108      	bne.n	200efa <__aeabi_fmul+0x15e>
  200ee8:	ea80 0001 	eor.w	r0, r0, r1
  200eec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  200ef0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  200ef4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200ef8:	4770      	bx	lr
  200efa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  200efe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  200f02:	4770      	bx	lr

00200f04 <__aeabi_fdiv>:
  200f04:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200f08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  200f0c:	bf1e      	ittt	ne
  200f0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  200f12:	ea92 0f0c 	teqne	r2, ip
  200f16:	ea93 0f0c 	teqne	r3, ip
  200f1a:	d069      	beq.n	200ff0 <__aeabi_fdiv+0xec>
  200f1c:	eba2 0203 	sub.w	r2, r2, r3
  200f20:	ea80 0c01 	eor.w	ip, r0, r1
  200f24:	0249      	lsls	r1, r1, #9
  200f26:	ea4f 2040 	mov.w	r0, r0, lsl #9
  200f2a:	d037      	beq.n	200f9c <__aeabi_fdiv+0x98>
  200f2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  200f30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  200f34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  200f38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  200f3c:	428b      	cmp	r3, r1
  200f3e:	bf38      	it	cc
  200f40:	005b      	lslcc	r3, r3, #1
  200f42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  200f46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  200f4a:	428b      	cmp	r3, r1
  200f4c:	bf24      	itt	cs
  200f4e:	1a5b      	subcs	r3, r3, r1
  200f50:	ea40 000c 	orrcs.w	r0, r0, ip
  200f54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  200f58:	bf24      	itt	cs
  200f5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  200f5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  200f62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  200f66:	bf24      	itt	cs
  200f68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  200f6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  200f70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  200f74:	bf24      	itt	cs
  200f76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  200f7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  200f7e:	011b      	lsls	r3, r3, #4
  200f80:	bf18      	it	ne
  200f82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  200f86:	d1e0      	bne.n	200f4a <__aeabi_fdiv+0x46>
  200f88:	2afd      	cmp	r2, #253	; 0xfd
  200f8a:	f63f af50 	bhi.w	200e2e <__aeabi_fmul+0x92>
  200f8e:	428b      	cmp	r3, r1
  200f90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  200f94:	bf08      	it	eq
  200f96:	f020 0001 	biceq.w	r0, r0, #1
  200f9a:	4770      	bx	lr
  200f9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  200fa0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  200fa4:	327f      	adds	r2, #127	; 0x7f
  200fa6:	bfc2      	ittt	gt
  200fa8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  200fac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  200fb0:	4770      	bxgt	lr
  200fb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200fb6:	f04f 0300 	mov.w	r3, #0
  200fba:	3a01      	subs	r2, #1
  200fbc:	e737      	b.n	200e2e <__aeabi_fmul+0x92>
  200fbe:	f092 0f00 	teq	r2, #0
  200fc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  200fc6:	bf02      	ittt	eq
  200fc8:	0040      	lsleq	r0, r0, #1
  200fca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  200fce:	3a01      	subeq	r2, #1
  200fd0:	d0f9      	beq.n	200fc6 <__aeabi_fdiv+0xc2>
  200fd2:	ea40 000c 	orr.w	r0, r0, ip
  200fd6:	f093 0f00 	teq	r3, #0
  200fda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  200fde:	bf02      	ittt	eq
  200fe0:	0049      	lsleq	r1, r1, #1
  200fe2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  200fe6:	3b01      	subeq	r3, #1
  200fe8:	d0f9      	beq.n	200fde <__aeabi_fdiv+0xda>
  200fea:	ea41 010c 	orr.w	r1, r1, ip
  200fee:	e795      	b.n	200f1c <__aeabi_fdiv+0x18>
  200ff0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  200ff4:	ea92 0f0c 	teq	r2, ip
  200ff8:	d108      	bne.n	20100c <__aeabi_fdiv+0x108>
  200ffa:	0242      	lsls	r2, r0, #9
  200ffc:	f47f af7d 	bne.w	200efa <__aeabi_fmul+0x15e>
  201000:	ea93 0f0c 	teq	r3, ip
  201004:	f47f af70 	bne.w	200ee8 <__aeabi_fmul+0x14c>
  201008:	4608      	mov	r0, r1
  20100a:	e776      	b.n	200efa <__aeabi_fmul+0x15e>
  20100c:	ea93 0f0c 	teq	r3, ip
  201010:	d104      	bne.n	20101c <__aeabi_fdiv+0x118>
  201012:	024b      	lsls	r3, r1, #9
  201014:	f43f af4c 	beq.w	200eb0 <__aeabi_fmul+0x114>
  201018:	4608      	mov	r0, r1
  20101a:	e76e      	b.n	200efa <__aeabi_fmul+0x15e>
  20101c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  201020:	bf18      	it	ne
  201022:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  201026:	d1ca      	bne.n	200fbe <__aeabi_fdiv+0xba>
  201028:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  20102c:	f47f af5c 	bne.w	200ee8 <__aeabi_fmul+0x14c>
  201030:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  201034:	f47f af3c 	bne.w	200eb0 <__aeabi_fmul+0x114>
  201038:	e75f      	b.n	200efa <__aeabi_fmul+0x15e>
  20103a:	bf00      	nop

0020103c <__aeabi_f2iz>:
  20103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  201040:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  201044:	d30f      	bcc.n	201066 <__aeabi_f2iz+0x2a>
  201046:	f04f 039e 	mov.w	r3, #158	; 0x9e
  20104a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  20104e:	d90d      	bls.n	20106c <__aeabi_f2iz+0x30>
  201050:	ea4f 2300 	mov.w	r3, r0, lsl #8
  201054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  201058:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  20105c:	fa23 f002 	lsr.w	r0, r3, r2
  201060:	bf18      	it	ne
  201062:	4240      	negne	r0, r0
  201064:	4770      	bx	lr
  201066:	f04f 0000 	mov.w	r0, #0
  20106a:	4770      	bx	lr
  20106c:	f112 0f61 	cmn.w	r2, #97	; 0x61
  201070:	d101      	bne.n	201076 <__aeabi_f2iz+0x3a>
  201072:	0242      	lsls	r2, r0, #9
  201074:	d105      	bne.n	201082 <__aeabi_f2iz+0x46>
  201076:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  20107a:	bf08      	it	eq
  20107c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  201080:	4770      	bx	lr
  201082:	f04f 0000 	mov.w	r0, #0
  201086:	4770      	bx	lr
	...

00201090 <chTMStartMeasurementX.constprop.24>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  201090:	4b01      	ldr	r3, [pc, #4]	; (201098 <chTMStartMeasurementX.constprop.24+0x8>)
  201092:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
  201094:	6083      	str	r3, [r0, #8]
  201096:	4770      	bx	lr
  201098:	e0001000 	.word	0xe0001000
  20109c:	00000000 	.word	0x00000000

002010a0 <_pal_lld_setgroupmode.constprop.4>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
  2010a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  2010a4:	2100      	movs	r1, #0
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  2010a6:	2502      	movs	r5, #2
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
  2010a8:	f04f 0808 	mov.w	r8, #8
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
  2010ac:	f04f 0c0f 	mov.w	ip, #15
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2010b0:	4c1f      	ldr	r4, [pc, #124]	; (201130 <_pal_lld_setgroupmode.constprop.4+0x90>)
      m1 = 1 << bit;
  2010b2:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
  2010b6:	2703      	movs	r7, #3
  2010b8:	e00f      	b.n	2010da <_pal_lld_setgroupmode.constprop.4+0x3a>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  2010ba:	6a26      	ldr	r6, [r4, #32]
  2010bc:	ea26 0202 	bic.w	r2, r6, r2
  2010c0:	ea42 0209 	orr.w	r2, r2, r9
  2010c4:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
  2010c6:	6822      	ldr	r2, [r4, #0]
  2010c8:	4013      	ands	r3, r2
  2010ca:	432b      	orrs	r3, r5
  2010cc:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  2010ce:	0840      	lsrs	r0, r0, #1
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  2010d0:	f101 0101 	add.w	r1, r1, #1
    moder <<= 2;
  2010d4:	ea4f 0585 	mov.w	r5, r5, lsl #2
    if (!mask)
  2010d8:	d027      	beq.n	20112a <_pal_lld_setgroupmode.constprop.4+0x8a>
      m2 = 3 << (bit * 2);
  2010da:	004b      	lsls	r3, r1, #1
      altrmask = altr << ((bit & 7) * 4);
  2010dc:	f001 0207 	and.w	r2, r1, #7
    if ((mask & 1) != 0) {
  2010e0:	f010 0f01 	tst.w	r0, #1
      m1 = 1 << bit;
  2010e4:	fa0e f601 	lsl.w	r6, lr, r1
      m2 = 3 << (bit * 2);
  2010e8:	fa07 f303 	lsl.w	r3, r7, r3
      altrmask = altr << ((bit & 7) * 4);
  2010ec:	ea4f 0282 	mov.w	r2, r2, lsl #2
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  2010f0:	ea6f 0303 	mvn.w	r3, r3
    if ((mask & 1) != 0) {
  2010f4:	d0eb      	beq.n	2010ce <_pal_lld_setgroupmode.constprop.4+0x2e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2010f6:	f8d4 a004 	ldr.w	sl, [r4, #4]
        if (bit < 8)
  2010fa:	2907      	cmp	r1, #7
      altrmask = altr << ((bit & 7) * 4);
  2010fc:	fa08 f902 	lsl.w	r9, r8, r2
      m4 = 15 << ((bit & 7) * 4);
  201100:	fa0c f202 	lsl.w	r2, ip, r2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  201104:	ea2a 0606 	bic.w	r6, sl, r6
  201108:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  20110a:	68a6      	ldr	r6, [r4, #8]
  20110c:	ea06 0603 	and.w	r6, r6, r3
  201110:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  201112:	68e6      	ldr	r6, [r4, #12]
  201114:	ea06 0603 	and.w	r6, r6, r3
  201118:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
  20111a:	d9ce      	bls.n	2010ba <_pal_lld_setgroupmode.constprop.4+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  20111c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  20111e:	ea26 0202 	bic.w	r2, r6, r2
  201122:	ea42 0209 	orr.w	r2, r2, r9
  201126:	6262      	str	r2, [r4, #36]	; 0x24
  201128:	e7cd      	b.n	2010c6 <_pal_lld_setgroupmode.constprop.4+0x26>
  }
}
  20112a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  20112e:	bf00      	nop
  201130:	40021000 	.word	0x40021000
	...

00201140 <notify7>:

#if STM32_SERIAL_USE_UART7 || defined(__DOXYGEN__)
static void notify7(io_queue_t *qp) {

  (void)qp;
  UART7->CR1 |= USART_CR1_TXEIE;
  201140:	4a02      	ldr	r2, [pc, #8]	; (20114c <notify7+0xc>)
  201142:	6813      	ldr	r3, [r2, #0]
  201144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  201148:	6013      	str	r3, [r2, #0]
  20114a:	4770      	bx	lr
  20114c:	40007800 	.word	0x40007800

00201150 <chCoreAllocAligned>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocAligned(size_t size, unsigned align) {
  201150:	b470      	push	{r4, r5, r6}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201152:	2320      	movs	r3, #32
  201154:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201158:	4e0d      	ldr	r6, [pc, #52]	; (201190 <chCoreAllocAligned+0x40>)
  size = MEM_ALIGN_NEXT(size, align);
  20115a:	1e4a      	subs	r2, r1, #1
  20115c:	424d      	negs	r5, r1
  if (((size_t)endmem - (size_t)p) < size) {
  20115e:	4c0d      	ldr	r4, [pc, #52]	; (201194 <chCoreAllocAligned+0x44>)
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201160:	6833      	ldr	r3, [r6, #0]
  size = MEM_ALIGN_NEXT(size, align);
  201162:	4402      	add	r2, r0
  if (((size_t)endmem - (size_t)p) < size) {
  201164:	6824      	ldr	r4, [r4, #0]
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  201166:	3b01      	subs	r3, #1
  size = MEM_ALIGN_NEXT(size, align);
  201168:	402a      	ands	r2, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(nextmem, align);
  20116a:	1858      	adds	r0, r3, r1
  20116c:	4028      	ands	r0, r5
  if (((size_t)endmem - (size_t)p) < size) {
  20116e:	1a23      	subs	r3, r4, r0
  201170:	429a      	cmp	r2, r3
  201172:	d806      	bhi.n	201182 <chCoreAllocAligned+0x32>
  nextmem = p + size;
  201174:	4402      	add	r2, r0
  201176:	2300      	movs	r3, #0
  201178:	6032      	str	r2, [r6, #0]
  20117a:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedI(size, align);
  chSysUnlock();

  return p;
}
  20117e:	bc70      	pop	{r4, r5, r6}
  201180:	4770      	bx	lr
    return NULL;
  201182:	2000      	movs	r0, #0
  201184:	2300      	movs	r3, #0
  201186:	f383 8811 	msr	BASEPRI, r3
}
  20118a:	bc70      	pop	{r4, r5, r6}
  20118c:	4770      	bx	lr
  20118e:	bf00      	nop
  201190:	200009e8 	.word	0x200009e8
  201194:	200009e0 	.word	0x200009e0
	...

002011a0 <gpt_cb>:
};

static void gpt_cb (GPTDriver *gptd)
{
    gptd = gptd;
    gpt_ticks += gpt5cfg.frequency/20;
  2011a0:	4a03      	ldr	r2, [pc, #12]	; (2011b0 <gpt_cb+0x10>)
  2011a2:	f242 7310 	movw	r3, #10000	; 0x2710
  2011a6:	6811      	ldr	r1, [r2, #0]
  2011a8:	440b      	add	r3, r1
  2011aa:	6013      	str	r3, [r2, #0]
  2011ac:	4770      	bx	lr
  2011ae:	bf00      	nop
  2011b0:	200009e4 	.word	0x200009e4
	...

002011c0 <_port_irq_epilogue>:
  2011c0:	2320      	movs	r3, #32
  2011c2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  2011c6:	4b11      	ldr	r3, [pc, #68]	; (20120c <_port_irq_epilogue+0x4c>)
  2011c8:	685b      	ldr	r3, [r3, #4]
  2011ca:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  2011ce:	d102      	bne.n	2011d6 <_port_irq_epilogue+0x16>
  2011d0:	f383 8811 	msr	BASEPRI, r3
  2011d4:	4770      	bx	lr
void _port_irq_epilogue(void) {
  2011d6:	b480      	push	{r7}
  2011d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  2011da:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  2011de:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  2011e2:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  2011e6:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  2011ea:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  2011ee:	4a08      	ldr	r2, [pc, #32]	; (201210 <_port_irq_epilogue+0x50>)
  2011f0:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  2011f2:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  2011f4:	6889      	ldr	r1, [r1, #8]
  2011f6:	6892      	ldr	r2, [r2, #8]
  2011f8:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  2011fa:	bf8c      	ite	hi
  2011fc:	4a05      	ldrhi	r2, [pc, #20]	; (201214 <_port_irq_epilogue+0x54>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  2011fe:	4a06      	ldrls	r2, [pc, #24]	; (201218 <_port_irq_epilogue+0x58>)
  201200:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  201204:	46bd      	mov	sp, r7
  201206:	bc80      	pop	{r7}
  201208:	4770      	bx	lr
  20120a:	bf00      	nop
  20120c:	e000ed00 	.word	0xe000ed00
  201210:	20000870 	.word	0x20000870
  201214:	002002f5 	.word	0x002002f5
  201218:	002002f8 	.word	0x002002f8
  20121c:	00000000 	.word	0x00000000

00201220 <Vector108>:
/**
 * @brief   TIM5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
  201220:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  201222:	4b0b      	ldr	r3, [pc, #44]	; (201250 <Vector108+0x30>)
  201224:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  201226:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  201228:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  20122a:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  20122c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  20122e:	d107      	bne.n	201240 <Vector108+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  201230:	2002      	movs	r0, #2
  201232:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  201234:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  201236:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  201238:	68d1      	ldr	r1, [r2, #12]
  20123a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  20123e:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  201240:	685b      	ldr	r3, [r3, #4]
  201242:	4803      	ldr	r0, [pc, #12]	; (201250 <Vector108+0x30>)
  201244:	685b      	ldr	r3, [r3, #4]
  201246:	4798      	blx	r3
}
  201248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20124c:	f7ff bfb8 	b.w	2011c0 <_port_irq_epilogue>
  201250:	20000800 	.word	0x20000800
	...

00201260 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
  201260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201262:	2720      	movs	r7, #32
  201264:	f387 8811 	msr	BASEPRI, r7
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime++;
  201268:	4d12      	ldr	r5, [pc, #72]	; (2012b4 <SysTick_Handler+0x54>)
  20126a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20126c:	462e      	mov	r6, r5
  ch.vtlist.systime++;
  20126e:	3201      	adds	r2, #1
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  201270:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  ch.vtlist.systime++;
  201274:	b292      	uxth	r2, r2
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  201276:	42b3      	cmp	r3, r6
  ch.vtlist.systime++;
  201278:	84ea      	strh	r2, [r5, #38]	; 0x26
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.next) {
  20127a:	d013      	beq.n	2012a4 <SysTick_Handler+0x44>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.next->delta;
  20127c:	891c      	ldrh	r4, [r3, #8]
  20127e:	3c01      	subs	r4, #1
  201280:	b2a4      	uxth	r4, r4
  201282:	811c      	strh	r4, [r3, #8]
    while (ch.vtlist.next->delta == (systime_t)0) {
  201284:	b974      	cbnz	r4, 2012a4 <SysTick_Handler+0x44>
      vtfunc_t fn;

      vtp = ch.vtlist.next;
      fn = vtp->func;
      vtp->func = NULL;
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  201286:	681a      	ldr	r2, [r3, #0]
      fn = vtp->func;
  201288:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;
  20128a:	60dc      	str	r4, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  20128c:	6056      	str	r6, [r2, #4]
      ch.vtlist.next = vtp->next;
  20128e:	61ea      	str	r2, [r5, #28]
  201290:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->par);
  201294:	6918      	ldr	r0, [r3, #16]
  201296:	4788      	blx	r1
  201298:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.next->delta == (systime_t)0) {
  20129c:	69eb      	ldr	r3, [r5, #28]
  20129e:	891a      	ldrh	r2, [r3, #8]
  2012a0:	2a00      	cmp	r2, #0
  2012a2:	d0f0      	beq.n	201286 <SysTick_Handler+0x26>
  2012a4:	2300      	movs	r3, #0
  2012a6:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
  2012aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  2012ae:	f7ff bf87 	b.w	2011c0 <_port_irq_epilogue>
  2012b2:	bf00      	nop
  2012b4:	20000870 	.word	0x20000870
	...

002012c0 <SVC_Handler>:
void SVC_Handler(void) {
  2012c0:	b480      	push	{r7}
  2012c2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  2012c4:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  2012c8:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  2012ca:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  2012ce:	2300      	movs	r3, #0
  2012d0:	f383 8811 	msr	BASEPRI, r3
}
  2012d4:	46bd      	mov	sp, r7
  2012d6:	bc80      	pop	{r7}
  2012d8:	4770      	bx	lr
  2012da:	bf00      	nop
  2012dc:	0000      	movs	r0, r0
	...

002012e0 <chTMStopMeasurementX>:
  2012e0:	4b0e      	ldr	r3, [pc, #56]	; (20131c <chTMStopMeasurementX+0x3c>)
  tmp->last = (now - tmp->last) - offset;
  2012e2:	6882      	ldr	r2, [r0, #8]
  2012e4:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2012e6:	490e      	ldr	r1, [pc, #56]	; (201320 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  2012e8:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  2012ea:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  2012ec:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  2012ee:	6f0c      	ldr	r4, [r1, #112]	; 0x70
  tmp->n++;
  2012f0:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  2012f2:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  2012f4:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  2012f6:	6083      	str	r3, [r0, #8]
  tmp->n++;
  2012f8:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  2012fa:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  2012fe:	18e4      	adds	r4, r4, r3
  201300:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  201304:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  201306:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  201308:	bf88      	it	hi
  20130a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  20130c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  20130e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  201312:	bf38      	it	cc
  201314:	6003      	strcc	r3, [r0, #0]
}
  201316:	bc30      	pop	{r4, r5}
  201318:	4770      	bx	lr
  20131a:	bf00      	nop
  20131c:	e0001000 	.word	0xe0001000
  201320:	20000870 	.word	0x20000870
	...

00201330 <wakeup>:
  201330:	2320      	movs	r3, #32
  201332:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  201336:	f890 3020 	ldrb.w	r3, [r0, #32]
  20133a:	2b07      	cmp	r3, #7
  20133c:	d80e      	bhi.n	20135c <wakeup+0x2c>
  20133e:	e8df f003 	tbb	[pc, r3]
  201342:	0d28      	.short	0x0d28
  201344:	0408240d 	.word	0x0408240d
  201348:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  20134a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20134c:	6893      	ldr	r3, [r2, #8]
  20134e:	3301      	adds	r3, #1
  201350:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  201352:	e890 000c 	ldmia.w	r0, {r2, r3}
  201356:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  201358:	6802      	ldr	r2, [r0, #0]
  20135a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20135c:	2200      	movs	r2, #0
  20135e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  201360:	4b0e      	ldr	r3, [pc, #56]	; (20139c <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  201362:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  201366:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  201368:	f04f 34ff 	mov.w	r4, #4294967295
  20136c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20136e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201370:	689a      	ldr	r2, [r3, #8]
  201372:	428a      	cmp	r2, r1
  201374:	d2fb      	bcs.n	20136e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  201376:	685a      	ldr	r2, [r3, #4]
  201378:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  20137a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  20137c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  20137e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  201380:	6058      	str	r0, [r3, #4]
  201382:	f381 8811 	msr	BASEPRI, r1
}
  201386:	bc10      	pop	{r4}
  201388:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  20138a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  20138c:	2200      	movs	r2, #0
  20138e:	601a      	str	r2, [r3, #0]
  201390:	e7e4      	b.n	20135c <wakeup+0x2c>
  201392:	2300      	movs	r3, #0
  201394:	f383 8811 	msr	BASEPRI, r3
  201398:	4770      	bx	lr
  20139a:	bf00      	nop
  20139c:	20000870 	.word	0x20000870

002013a0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  2013a0:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  2013a2:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  2013a4:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  2013a6:	4b08      	ldr	r3, [pc, #32]	; (2013c8 <chSchReadyI+0x28>)
  2013a8:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  2013aa:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  2013ae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2013b0:	689a      	ldr	r2, [r3, #8]
  2013b2:	428a      	cmp	r2, r1
  2013b4:	d2fb      	bcs.n	2013ae <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  2013b6:	685a      	ldr	r2, [r3, #4]
}
  2013b8:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  2013ba:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2013bc:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2013be:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2013c0:	605c      	str	r4, [r3, #4]
}
  2013c2:	bc10      	pop	{r4}
  2013c4:	4770      	bx	lr
  2013c6:	bf00      	nop
  2013c8:	20000870 	.word	0x20000870
  2013cc:	00000000 	.word	0x00000000

002013d0 <chEvtBroadcastFlagsI.constprop.20>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  2013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  2013d2:	4f17      	ldr	r7, [pc, #92]	; (201430 <chEvtBroadcastFlagsI.constprop.20+0x60>)
  2013d4:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  2013d8:	42bc      	cmp	r4, r7
  2013da:	d021      	beq.n	201420 <chEvtBroadcastFlagsI.constprop.20+0x50>
  2013dc:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  2013de:	2600      	movs	r6, #0
  2013e0:	e002      	b.n	2013e8 <chEvtBroadcastFlagsI.constprop.20+0x18>
    elp = elp->next;
  2013e2:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2013e4:	42bc      	cmp	r4, r7
  2013e6:	d01b      	beq.n	201420 <chEvtBroadcastFlagsI.constprop.20+0x50>
    elp->flags |= flags;
  2013e8:	68e3      	ldr	r3, [r4, #12]
  2013ea:	432b      	orrs	r3, r5
  2013ec:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  2013ee:	b115      	cbz	r5, 2013f6 <chEvtBroadcastFlagsI.constprop.20+0x26>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  2013f0:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  2013f2:	4213      	tst	r3, r2
  2013f4:	d0f5      	beq.n	2013e2 <chEvtBroadcastFlagsI.constprop.20+0x12>
      chEvtSignalI(elp->listener, elp->events);
  2013f6:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  2013f8:	68a3      	ldr	r3, [r4, #8]
  2013fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2013fc:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  201400:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  201402:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  201404:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  201406:	d00c      	beq.n	201422 <chEvtBroadcastFlagsI.constprop.20+0x52>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201408:	2a0b      	cmp	r2, #11
  20140a:	d1ea      	bne.n	2013e2 <chEvtBroadcastFlagsI.constprop.20+0x12>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  20140c:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  20140e:	ea32 0303 	bics.w	r3, r2, r3
  201412:	d1e6      	bne.n	2013e2 <chEvtBroadcastFlagsI.constprop.20+0x12>
    tp->u.rdymsg = MSG_OK;
  201414:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  201416:	f7ff ffc3 	bl	2013a0 <chSchReadyI>
    elp = elp->next;
  20141a:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  20141c:	42bc      	cmp	r4, r7
  20141e:	d1e3      	bne.n	2013e8 <chEvtBroadcastFlagsI.constprop.20+0x18>
  201420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201422:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  201424:	4213      	tst	r3, r2
  201426:	d0dc      	beq.n	2013e2 <chEvtBroadcastFlagsI.constprop.20+0x12>
    tp->u.rdymsg = MSG_OK;
  201428:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  20142a:	f7ff ffb9 	bl	2013a0 <chSchReadyI>
  20142e:	e7f4      	b.n	20141a <chEvtBroadcastFlagsI.constprop.20+0x4a>
  201430:	20000810 	.word	0x20000810
	...

00201440 <Vector188>:
/**
 * @brief   UART7 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  201440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  201444:	4c5f      	ldr	r4, [pc, #380]	; (2015c4 <Vector188+0x184>)
  201446:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
  201448:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  20144a:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  20144c:	072a      	lsls	r2, r5, #28
  u->ICR = isr;
  20144e:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  201450:	d152      	bne.n	2014f8 <Vector188+0xb8>
  if (isr & USART_ISR_LBDF) {
  201452:	05eb      	lsls	r3, r5, #23
  201454:	d445      	bmi.n	2014e2 <Vector188+0xa2>
  if (isr & USART_ISR_RXNE) {
  201456:	06a8      	lsls	r0, r5, #26
  201458:	d417      	bmi.n	20148a <Vector188+0x4a>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  20145a:	0639      	lsls	r1, r7, #24
  20145c:	d501      	bpl.n	201462 <Vector188+0x22>
  20145e:	062a      	lsls	r2, r5, #24
  201460:	d465      	bmi.n	20152e <Vector188+0xee>
  if (isr & USART_ISR_TC) {
  201462:	066b      	lsls	r3, r5, #25
  201464:	d50d      	bpl.n	201482 <Vector188+0x42>
  201466:	2320      	movs	r3, #32
  201468:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue))
  20146c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  20146e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  201470:	429a      	cmp	r2, r3
  201472:	f000 8086 	beq.w	201582 <Vector188+0x142>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  201476:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  20147a:	2300      	movs	r3, #0
  20147c:	6037      	str	r7, [r6, #0]
  20147e:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD7);

  OSAL_IRQ_EPILOGUE();
}
  201482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  OSAL_IRQ_EPILOGUE();
  201486:	f7ff be9b 	b.w	2011c0 <_port_irq_epilogue>
  20148a:	2320      	movs	r3, #32
  20148c:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  201490:	6a72      	ldr	r2, [r6, #36]	; 0x24
  201492:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  201496:	6963      	ldr	r3, [r4, #20]
  201498:	ea01 0802 	and.w	r8, r1, r2
  20149c:	2b00      	cmp	r3, #0
  20149e:	d078      	beq.n	201592 <Vector188+0x152>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
  2014a0:	6a23      	ldr	r3, [r4, #32]
  2014a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
  2014a4:	4293      	cmp	r3, r2
  2014a6:	d078      	beq.n	20159a <Vector188+0x15a>
    return MSG_TIMEOUT;
  }

  iqp->q_counter++;
  2014a8:	6962      	ldr	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  2014aa:	1c59      	adds	r1, r3, #1
  iqp->q_counter++;
  2014ac:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
  2014ae:	6221      	str	r1, [r4, #32]
  iqp->q_counter++;
  2014b0:	6162      	str	r2, [r4, #20]
  *iqp->q_wrptr++ = b;
  2014b2:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
  2014b6:	6a22      	ldr	r2, [r4, #32]
  2014b8:	69e3      	ldr	r3, [r4, #28]
  2014ba:	429a      	cmp	r2, r3
  2014bc:	d25e      	bcs.n	20157c <Vector188+0x13c>
  return (bool)(tqp->next != (const thread_t *)tqp);
  2014be:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  2014c0:	4a41      	ldr	r2, [pc, #260]	; (2015c8 <Vector188+0x188>)
  2014c2:	4293      	cmp	r3, r2
  2014c4:	d009      	beq.n	2014da <Vector188+0x9a>
  tqp->next             = tp->queue.next;
  2014c6:	6819      	ldr	r1, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  2014c8:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  2014cc:	4618      	mov	r0, r3
  2014ce:	60e1      	str	r1, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  2014d0:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  2014d2:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2014d6:	f7ff ff63 	bl	2013a0 <chSchReadyI>
  2014da:	2300      	movs	r3, #0
  2014dc:	f383 8811 	msr	BASEPRI, r3
  2014e0:	e7bb      	b.n	20145a <Vector188+0x1a>
  2014e2:	2320      	movs	r3, #32
  2014e4:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  2014e8:	f44f 7000 	mov.w	r0, #512	; 0x200
  2014ec:	f7ff ff70 	bl	2013d0 <chEvtBroadcastFlagsI.constprop.20>
  2014f0:	2300      	movs	r3, #0
  2014f2:	f383 8811 	msr	BASEPRI, r3
  2014f6:	e7ae      	b.n	201456 <Vector188+0x16>
    sts |= SD_OVERRUN_ERROR;
  2014f8:	f015 0f08 	tst.w	r5, #8
  2014fc:	bf0c      	ite	eq
  2014fe:	2000      	moveq	r0, #0
  201500:	2080      	movne	r0, #128	; 0x80
  if (isr & USART_ISR_PE)
  201502:	07eb      	lsls	r3, r5, #31
  201504:	f04f 0320 	mov.w	r3, #32
    sts |= SD_PARITY_ERROR;
  201508:	bf48      	it	mi
  20150a:	f040 0020 	orrmi.w	r0, r0, #32
  if (isr & USART_ISR_FE)
  20150e:	07a9      	lsls	r1, r5, #30
    sts |= SD_FRAMING_ERROR;
  201510:	bf48      	it	mi
  201512:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (isr & USART_ISR_NE)
  201516:	076a      	lsls	r2, r5, #29
    sts |= SD_NOISE_ERROR;
  201518:	bf48      	it	mi
  20151a:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  20151e:	f383 8811 	msr	BASEPRI, r3
  201522:	f7ff ff55 	bl	2013d0 <chEvtBroadcastFlagsI.constprop.20>
  201526:	2300      	movs	r3, #0
  201528:	f383 8811 	msr	BASEPRI, r3
  20152c:	e791      	b.n	201452 <Vector188+0x12>
  20152e:	2320      	movs	r3, #32
  201530:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
  201534:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  201536:	6c62      	ldr	r2, [r4, #68]	; 0x44
  201538:	429a      	cmp	r2, r3
  20153a:	d036      	beq.n	2015aa <Vector188+0x16a>
    return MSG_TIMEOUT;
  }

  oqp->q_counter++;
  20153c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20153e:	1c58      	adds	r0, r3, #1
  if (oqp->q_rdptr >= oqp->q_top) {
  201540:	6c21      	ldr	r1, [r4, #64]	; 0x40
  oqp->q_counter++;
  201542:	3201      	adds	r2, #1
  b = *oqp->q_rdptr++;
  201544:	64a0      	str	r0, [r4, #72]	; 0x48
  if (oqp->q_rdptr >= oqp->q_top) {
  201546:	4288      	cmp	r0, r1
  oqp->q_counter++;
  201548:	63a2      	str	r2, [r4, #56]	; 0x38
  b = *oqp->q_rdptr++;
  20154a:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
  20154e:	d301      	bcc.n	201554 <Vector188+0x114>
    oqp->q_rdptr = oqp->q_buffer;
  201550:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  201552:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  201554:	6b23      	ldr	r3, [r4, #48]	; 0x30
  201556:	4a1d      	ldr	r2, [pc, #116]	; (2015cc <Vector188+0x18c>)
  201558:	4293      	cmp	r3, r2
  20155a:	d009      	beq.n	201570 <Vector188+0x130>
  tqp->next             = tp->queue.next;
  20155c:	6819      	ldr	r1, [r3, #0]
  tp->u.rdymsg = msg;
  20155e:	f04f 0e00 	mov.w	lr, #0
  (void) chSchReadyI(tp);
  201562:	4618      	mov	r0, r3
  201564:	6321      	str	r1, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  201566:	604a      	str	r2, [r1, #4]
  tp->u.rdymsg = msg;
  201568:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  20156c:	f7ff ff18 	bl	2013a0 <chSchReadyI>
      u->TDR = b;
  201570:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  201574:	2300      	movs	r3, #0
  201576:	f383 8811 	msr	BASEPRI, r3
  20157a:	e772      	b.n	201462 <Vector188+0x22>
    iqp->q_wrptr = iqp->q_buffer;
  20157c:	69a3      	ldr	r3, [r4, #24]
  20157e:	6223      	str	r3, [r4, #32]
  201580:	e79d      	b.n	2014be <Vector188+0x7e>
    if (oqIsEmptyI(&sdp->oqueue))
  201582:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  201584:	2b00      	cmp	r3, #0
  201586:	f43f af76 	beq.w	201476 <Vector188+0x36>
  20158a:	2010      	movs	r0, #16
  20158c:	f7ff ff20 	bl	2013d0 <chEvtBroadcastFlagsI.constprop.20>
  201590:	e771      	b.n	201476 <Vector188+0x36>
  201592:	2004      	movs	r0, #4
  201594:	f7ff ff1c 	bl	2013d0 <chEvtBroadcastFlagsI.constprop.20>
  201598:	e782      	b.n	2014a0 <Vector188+0x60>
  if (iqIsFullI(iqp)) {
  20159a:	6962      	ldr	r2, [r4, #20]
  20159c:	2a00      	cmp	r2, #0
  20159e:	d083      	beq.n	2014a8 <Vector188+0x68>
  2015a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
  2015a4:	f7ff ff14 	bl	2013d0 <chEvtBroadcastFlagsI.constprop.20>
  2015a8:	e797      	b.n	2014da <Vector188+0x9a>
  if (oqIsEmptyI(oqp)) {
  2015aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  2015ac:	2a00      	cmp	r2, #0
  2015ae:	d0c5      	beq.n	20153c <Vector188+0xfc>
  2015b0:	2008      	movs	r0, #8
  2015b2:	f7ff ff0d 	bl	2013d0 <chEvtBroadcastFlagsI.constprop.20>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
  2015b6:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
  2015ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  2015be:	6033      	str	r3, [r6, #0]
  2015c0:	e7d8      	b.n	201574 <Vector188+0x134>
  2015c2:	bf00      	nop
  2015c4:	20000810 	.word	0x20000810
  2015c8:	2000081c 	.word	0x2000081c
  2015cc:	20000840 	.word	0x20000840

002015d0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  2015d0:	e7fe      	b.n	2015d0 <_idle_thread>
  2015d2:	bf00      	nop
	...

002015e0 <BusFault_Handler>:
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
__attribute__((weak))
void _unhandled_exception(void) {
  2015e0:	e7fe      	b.n	2015e0 <BusFault_Handler>
  2015e2:	bf00      	nop
	...

002015f0 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  2015f0:	b40e      	push	{r1, r2, r3}
  2015f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2015f6:	b086      	sub	sp, #24
  int n = 0;
  2015f8:	2300      	movs	r3, #0
    c = *fmt++;
  2015fa:	f04f 0954 	mov.w	r9, #84	; 0x54
  2015fe:	f8df a280 	ldr.w	sl, [pc, #640]	; 201880 <chprintf.constprop.0+0x290>
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  201602:	ad10      	add	r5, sp, #64	; 0x40
    c = *fmt++;
  201604:	4c9d      	ldr	r4, [pc, #628]	; (20187c <chprintf.constprop.0+0x28c>)
  int n = 0;
  201606:	9300      	str	r3, [sp, #0]
  va_start(ap, fmt);
  201608:	9502      	str	r5, [sp, #8]
  20160a:	f8cd 9004 	str.w	r9, [sp, #4]
      n++;
  20160e:	9a00      	ldr	r2, [sp, #0]
  201610:	4626      	mov	r6, r4
      streamPut(chp, (uint8_t)c);
  201612:	f8da 3000 	ldr.w	r3, [sl]
      n++;
  201616:	3201      	adds	r2, #1
      streamPut(chp, (uint8_t)c);
  201618:	9901      	ldr	r1, [sp, #4]
  20161a:	689b      	ldr	r3, [r3, #8]
  20161c:	4898      	ldr	r0, [pc, #608]	; (201880 <chprintf.constprop.0+0x290>)
      n++;
  20161e:	9200      	str	r2, [sp, #0]
      streamPut(chp, (uint8_t)c);
  201620:	4798      	blx	r3
  201622:	7823      	ldrb	r3, [r4, #0]
  201624:	9301      	str	r3, [sp, #4]
    if (c == 0)
  201626:	9b01      	ldr	r3, [sp, #4]
    c = *fmt++;
  201628:	1c74      	adds	r4, r6, #1
    if (c == 0)
  20162a:	2b00      	cmp	r3, #0
  20162c:	f000 8120 	beq.w	201870 <chprintf.constprop.0+0x280>
    if (c != '%') {
  201630:	2b25      	cmp	r3, #37	; 0x25
  201632:	d1ec      	bne.n	20160e <chprintf.constprop.0+0x1e>
    if (*fmt == '-') {
  201634:	7871      	ldrb	r1, [r6, #1]
  201636:	292d      	cmp	r1, #45	; 0x2d
  201638:	f000 814b 	beq.w	2018d2 <chprintf.constprop.0+0x2e2>
    left_align = FALSE;
  20163c:	f04f 0c00 	mov.w	ip, #0
    if (*fmt == '0') {
  201640:	2930      	cmp	r1, #48	; 0x30
  201642:	f000 8141 	beq.w	2018c8 <chprintf.constprop.0+0x2d8>
    filler = ' ';
  201646:	f04f 0820 	mov.w	r8, #32
  20164a:	1c62      	adds	r2, r4, #1
    width = 0;
  20164c:	2400      	movs	r4, #0
  20164e:	e005      	b.n	20165c <chprintf.constprop.0+0x6c>
        c = va_arg(ap, int);
  201650:	782b      	ldrb	r3, [r5, #0]
  201652:	3504      	adds	r5, #4
  201654:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
  201658:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
  20165c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
      c = *fmt++;
  201660:	4616      	mov	r6, r2
      width = width * 10 + c;
  201662:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
  201666:	b2db      	uxtb	r3, r3
  201668:	2b09      	cmp	r3, #9
  20166a:	d9f3      	bls.n	201654 <chprintf.constprop.0+0x64>
      else if (c == '*')
  20166c:	292a      	cmp	r1, #42	; 0x2a
  20166e:	d0ef      	beq.n	201650 <chprintf.constprop.0+0x60>
    if (c == '.') {
  201670:	292e      	cmp	r1, #46	; 0x2e
  201672:	f04f 0200 	mov.w	r2, #0
  201676:	d04a      	beq.n	20170e <chprintf.constprop.0+0x11e>
    if (c == 'l' || c == 'L') {
  201678:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  20167c:	2b4c      	cmp	r3, #76	; 0x4c
  20167e:	d155      	bne.n	20172c <chprintf.constprop.0+0x13c>
      if (*fmt)
  201680:	7833      	ldrb	r3, [r6, #0]
  201682:	9301      	str	r3, [sp, #4]
  201684:	b11b      	cbz	r3, 20168e <chprintf.constprop.0+0x9e>
        c = *fmt++;
  201686:	4619      	mov	r1, r3
  201688:	3601      	adds	r6, #1
  20168a:	7833      	ldrb	r3, [r6, #0]
  20168c:	9301      	str	r3, [sp, #4]
    switch (c) {
  20168e:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
  201692:	2b34      	cmp	r3, #52	; 0x34
  201694:	f200 810c 	bhi.w	2018b0 <chprintf.constprop.0+0x2c0>
  201698:	e8df f013 	tbh	[pc, r3, lsl #1]
  20169c:	010a018f 	.word	0x010a018f
  2016a0:	010a010a 	.word	0x010a010a
  2016a4:	018f010a 	.word	0x018f010a
  2016a8:	010a010a 	.word	0x010a010a
  2016ac:	010a010a 	.word	0x010a010a
  2016b0:	014d010a 	.word	0x014d010a
  2016b4:	010a010a 	.word	0x010a010a
  2016b8:	010a010a 	.word	0x010a010a
  2016bc:	0152010a 	.word	0x0152010a
  2016c0:	010a010a 	.word	0x010a010a
  2016c4:	010a0187 	.word	0x010a0187
  2016c8:	010a010a 	.word	0x010a010a
  2016cc:	010a010a 	.word	0x010a010a
  2016d0:	010a010a 	.word	0x010a010a
  2016d4:	010a010a 	.word	0x010a010a
  2016d8:	00f6010a 	.word	0x00f6010a
  2016dc:	010a018f 	.word	0x010a018f
  2016e0:	010a010a 	.word	0x010a010a
  2016e4:	018f010a 	.word	0x018f010a
  2016e8:	010a010a 	.word	0x010a010a
  2016ec:	010a010a 	.word	0x010a010a
  2016f0:	014d010a 	.word	0x014d010a
  2016f4:	010a010a 	.word	0x010a010a
  2016f8:	0089010a 	.word	0x0089010a
  2016fc:	0152010a 	.word	0x0152010a
  201700:	010a010a 	.word	0x010a010a
  201704:	0187      	.short	0x0187
          c = va_arg(ap, int);
  201706:	782b      	ldrb	r3, [r5, #0]
  201708:	3504      	adds	r5, #4
        precision += c;
  20170a:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
  20170e:	f816 1b01 	ldrb.w	r1, [r6], #1
        precision *= 10;
  201712:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
  201716:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  20171a:	b2db      	uxtb	r3, r3
  20171c:	2b09      	cmp	r3, #9
  20171e:	d9f4      	bls.n	20170a <chprintf.constprop.0+0x11a>
        else if (c == '*')
  201720:	292a      	cmp	r1, #42	; 0x2a
  201722:	d0f0      	beq.n	201706 <chprintf.constprop.0+0x116>
    if (c == 'l' || c == 'L') {
  201724:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  201728:	2b4c      	cmp	r3, #76	; 0x4c
  20172a:	d0a9      	beq.n	201680 <chprintf.constprop.0+0x90>
      is_long = (c >= 'A') && (c <= 'Z');
  20172c:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
  201730:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
  201734:	b2db      	uxtb	r3, r3
    switch (c) {
  201736:	2834      	cmp	r0, #52	; 0x34
  201738:	f200 80b8 	bhi.w	2018ac <chprintf.constprop.0+0x2bc>
  20173c:	e8df f010 	tbh	[pc, r0, lsl #1]
  201740:	00b6010a 	.word	0x00b6010a
  201744:	00b600b6 	.word	0x00b600b6
  201748:	010a00b6 	.word	0x010a00b6
  20174c:	00b600b6 	.word	0x00b600b6
  201750:	00b600b6 	.word	0x00b600b6
  201754:	010300b6 	.word	0x010300b6
  201758:	00b600b6 	.word	0x00b600b6
  20175c:	00b600b6 	.word	0x00b600b6
  201760:	00ce00b6 	.word	0x00ce00b6
  201764:	00b600b6 	.word	0x00b600b6
  201768:	00b60138 	.word	0x00b60138
  20176c:	00b600b6 	.word	0x00b600b6
  201770:	00b600b6 	.word	0x00b600b6
  201774:	00b600b6 	.word	0x00b600b6
  201778:	00b600b6 	.word	0x00b600b6
  20177c:	00a200b6 	.word	0x00a200b6
  201780:	00b6010a 	.word	0x00b6010a
  201784:	00b600b6 	.word	0x00b600b6
  201788:	010a00b6 	.word	0x010a00b6
  20178c:	00b600b6 	.word	0x00b600b6
  201790:	00b600b6 	.word	0x00b600b6
  201794:	010300b6 	.word	0x010300b6
  201798:	00b600b6 	.word	0x00b600b6
  20179c:	003500b6 	.word	0x003500b6
  2017a0:	00ce00b6 	.word	0x00ce00b6
  2017a4:	00b600b6 	.word	0x00b600b6
  2017a8:	0138      	.short	0x0138
  2017aa:	7833      	ldrb	r3, [r6, #0]
  2017ac:	9301      	str	r3, [sp, #4]
      if ((s = va_arg(ap, char *)) == 0)
  2017ae:	682f      	ldr	r7, [r5, #0]
  2017b0:	3504      	adds	r5, #4
  2017b2:	2f00      	cmp	r7, #0
  2017b4:	f000 8111 	beq.w	2019da <chprintf.constprop.0+0x3ea>
      for (p = s; *p && (--precision >= 0); p++)
  2017b8:	783b      	ldrb	r3, [r7, #0]
      if (precision == 0)
  2017ba:	2a00      	cmp	r2, #0
  2017bc:	f040 810a 	bne.w	2019d4 <chprintf.constprop.0+0x3e4>
      for (p = s; *p && (--precision >= 0); p++)
  2017c0:	2b00      	cmp	r3, #0
  2017c2:	f000 811c 	beq.w	2019fe <chprintf.constprop.0+0x40e>
  2017c6:	f647 73fe 	movw	r3, #32766	; 0x7ffe
  2017ca:	463a      	mov	r2, r7
  2017cc:	e001      	b.n	2017d2 <chprintf.constprop.0+0x1e2>
  2017ce:	3b01      	subs	r3, #1
  2017d0:	d403      	bmi.n	2017da <chprintf.constprop.0+0x1ea>
  2017d2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  2017d6:	2900      	cmp	r1, #0
  2017d8:	d1f9      	bne.n	2017ce <chprintf.constprop.0+0x1de>
  2017da:	1bd2      	subs	r2, r2, r7
      filler = ' ';
  2017dc:	f04f 0820 	mov.w	r8, #32
    if ((width -= i) < 0)
  2017e0:	1aa4      	subs	r4, r4, r2
  2017e2:	f102 39ff 	add.w	r9, r2, #4294967295
  2017e6:	d45b      	bmi.n	2018a0 <chprintf.constprop.0+0x2b0>
    if (left_align == FALSE)
  2017e8:	f1bc 0f00 	cmp.w	ip, #0
  2017ec:	d168      	bne.n	2018c0 <chprintf.constprop.0+0x2d0>
  2017ee:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
  2017f2:	2c00      	cmp	r4, #0
  2017f4:	d063      	beq.n	2018be <chprintf.constprop.0+0x2ce>
      if (*s == '-' && filler == '0') {
  2017f6:	783b      	ldrb	r3, [r7, #0]
  2017f8:	2b2d      	cmp	r3, #45	; 0x2d
  2017fa:	d103      	bne.n	201804 <chprintf.constprop.0+0x214>
  2017fc:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
  201800:	f000 80f0 	beq.w	2019e4 <chprintf.constprop.0+0x3f4>
        streamPut(chp, (uint8_t)filler);
  201804:	f8da 3000 	ldr.w	r3, [sl]
  201808:	4641      	mov	r1, r8
  20180a:	4650      	mov	r0, sl
  20180c:	689b      	ldr	r3, [r3, #8]
  20180e:	4798      	blx	r3
      } while (++width != 0);
  201810:	f11b 0b01 	adds.w	fp, fp, #1
  201814:	d1f6      	bne.n	201804 <chprintf.constprop.0+0x214>
  201816:	9b00      	ldr	r3, [sp, #0]
    while (--i >= 0) {
  201818:	f1b9 0f00 	cmp.w	r9, #0
  20181c:	4423      	add	r3, r4
  20181e:	9300      	str	r3, [sp, #0]
  201820:	f6ff af01 	blt.w	201626 <chprintf.constprop.0+0x36>
  201824:	465c      	mov	r4, fp
  201826:	46cb      	mov	fp, r9
      streamPut(chp, (uint8_t)*s++);
  201828:	f8da 3000 	ldr.w	r3, [sl]
    while (--i >= 0) {
  20182c:	f10b 3bff 	add.w	fp, fp, #4294967295
      streamPut(chp, (uint8_t)*s++);
  201830:	f817 1b01 	ldrb.w	r1, [r7], #1
  201834:	4650      	mov	r0, sl
  201836:	689b      	ldr	r3, [r3, #8]
  201838:	4798      	blx	r3
    while (--i >= 0) {
  20183a:	f1bb 3fff 	cmp.w	fp, #4294967295
  20183e:	d1f3      	bne.n	201828 <chprintf.constprop.0+0x238>
  201840:	9b00      	ldr	r3, [sp, #0]
  201842:	3301      	adds	r3, #1
  201844:	444b      	add	r3, r9
  201846:	9300      	str	r3, [sp, #0]
    while (width) {
  201848:	2c00      	cmp	r4, #0
  20184a:	f43f aeec 	beq.w	201626 <chprintf.constprop.0+0x36>
  20184e:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
  201850:	f8da 3000 	ldr.w	r3, [sl]
  201854:	4641      	mov	r1, r8
  201856:	4650      	mov	r0, sl
  201858:	689b      	ldr	r3, [r3, #8]
  20185a:	4798      	blx	r3
    while (width) {
  20185c:	3f01      	subs	r7, #1
  20185e:	d1f7      	bne.n	201850 <chprintf.constprop.0+0x260>
  201860:	9b00      	ldr	r3, [sp, #0]
  201862:	4423      	add	r3, r4
    c = *fmt++;
  201864:	1c74      	adds	r4, r6, #1
  201866:	9300      	str	r3, [sp, #0]
    if (c == 0)
  201868:	9b01      	ldr	r3, [sp, #4]
  20186a:	2b00      	cmp	r3, #0
  20186c:	f47f aee0 	bne.w	201630 <chprintf.constprop.0+0x40>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
  201870:	9800      	ldr	r0, [sp, #0]
  201872:	b006      	add	sp, #24
  201874:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201878:	b003      	add	sp, #12
  20187a:	4770      	bx	lr
  20187c:	08002705 	.word	0x08002705
  201880:	20000810 	.word	0x20000810
  201884:	7833      	ldrb	r3, [r6, #0]
  201886:	9301      	str	r3, [sp, #4]
      *p++ = va_arg(ap, int);
  201888:	682b      	ldr	r3, [r5, #0]
  20188a:	af06      	add	r7, sp, #24
  20188c:	3504      	adds	r5, #4
  20188e:	f04f 0900 	mov.w	r9, #0
  201892:	2201      	movs	r2, #1
      filler = ' ';
  201894:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
  201898:	f807 3d0c 	strb.w	r3, [r7, #-12]!
    if ((width -= i) < 0)
  20189c:	1aa4      	subs	r4, r4, r2
  20189e:	d5a3      	bpl.n	2017e8 <chprintf.constprop.0+0x1f8>
    while (--i >= 0) {
  2018a0:	f1b9 0f00 	cmp.w	r9, #0
  2018a4:	f6ff aebf 	blt.w	201626 <chprintf.constprop.0+0x36>
      width = 0;
  2018a8:	2400      	movs	r4, #0
  2018aa:	e7bc      	b.n	201826 <chprintf.constprop.0+0x236>
  2018ac:	7833      	ldrb	r3, [r6, #0]
  2018ae:	9301      	str	r3, [sp, #4]
      *p++ = c;
  2018b0:	af06      	add	r7, sp, #24
  2018b2:	f04f 0900 	mov.w	r9, #0
  2018b6:	2201      	movs	r2, #1
  2018b8:	f807 1d0c 	strb.w	r1, [r7, #-12]!
  2018bc:	e7ee      	b.n	20189c <chprintf.constprop.0+0x2ac>
    if (width < 0) {
  2018be:	465c      	mov	r4, fp
    while (--i >= 0) {
  2018c0:	f1b9 0f00 	cmp.w	r9, #0
  2018c4:	daaf      	bge.n	201826 <chprintf.constprop.0+0x236>
  2018c6:	e7bf      	b.n	201848 <chprintf.constprop.0+0x258>
  2018c8:	7861      	ldrb	r1, [r4, #1]
      filler = '0';
  2018ca:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
  2018ce:	3401      	adds	r4, #1
  2018d0:	e6bb      	b.n	20164a <chprintf.constprop.0+0x5a>
      fmt++;
  2018d2:	1cb4      	adds	r4, r6, #2
  2018d4:	78b1      	ldrb	r1, [r6, #2]
      left_align = TRUE;
  2018d6:	f04f 0c01 	mov.w	ip, #1
  2018da:	e6b1      	b.n	201640 <chprintf.constprop.0+0x50>
    switch (c) {
  2018dc:	f04f 0e0a 	mov.w	lr, #10
      if (is_long)
  2018e0:	2b19      	cmp	r3, #25
  2018e2:	d934      	bls.n	20194e <chprintf.constprop.0+0x35e>
        l = va_arg(ap, unsigned int);
  2018e4:	682f      	ldr	r7, [r5, #0]
  2018e6:	3504      	adds	r5, #4
  2018e8:	7833      	ldrb	r3, [r6, #0]
  2018ea:	9301      	str	r3, [sp, #4]
  q = p + MAX_FILLER;
  2018ec:	f10d 0117 	add.w	r1, sp, #23
  2018f0:	e000      	b.n	2018f4 <chprintf.constprop.0+0x304>
  } while ((ll /= radix) != 0);
  2018f2:	4601      	mov	r1, r0
    *--q = i;
  2018f4:	1e48      	subs	r0, r1, #1
    i = (int)(l % radix);
  2018f6:	fbb7 f2fe 	udiv	r2, r7, lr
  2018fa:	fb0e 7912 	mls	r9, lr, r2, r7
    l /= radix;
  2018fe:	4617      	mov	r7, r2
    i += '0';
  201900:	f109 0330 	add.w	r3, r9, #48	; 0x30
    if (i > '9')
  201904:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
  201906:	bfc8      	it	gt
  201908:	f109 0337 	addgt.w	r3, r9, #55	; 0x37
    *--q = i;
  20190c:	b2db      	uxtb	r3, r3
  20190e:	f801 3c01 	strb.w	r3, [r1, #-1]
  } while ((ll /= radix) != 0);
  201912:	2a00      	cmp	r2, #0
  201914:	d1ed      	bne.n	2018f2 <chprintf.constprop.0+0x302>
  i = (int)(p + MAX_FILLER - q);
  201916:	f10d 0217 	add.w	r2, sp, #23
  20191a:	af03      	add	r7, sp, #12
  20191c:	1a12      	subs	r2, r2, r0
  20191e:	46be      	mov	lr, r7
  201920:	4410      	add	r0, r2
  201922:	e001      	b.n	201928 <chprintf.constprop.0+0x338>
  201924:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
  201928:	4288      	cmp	r0, r1
    *p++ = *q++;
  20192a:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
  20192e:	d1f9      	bne.n	201924 <chprintf.constprop.0+0x334>
  201930:	f102 39ff 	add.w	r9, r2, #4294967295
  201934:	e7b2      	b.n	20189c <chprintf.constprop.0+0x2ac>
    switch (c) {
  201936:	f04f 0e08 	mov.w	lr, #8
        l = va_arg(ap, unsigned long);
  20193a:	682f      	ldr	r7, [r5, #0]
  20193c:	3504      	adds	r5, #4
  20193e:	e7d5      	b.n	2018ec <chprintf.constprop.0+0x2fc>
    switch (c) {
  201940:	f04f 0e0a 	mov.w	lr, #10
  201944:	e7f9      	b.n	20193a <chprintf.constprop.0+0x34a>
      if (is_long)
  201946:	2b19      	cmp	r3, #25
    switch (c) {
  201948:	f04f 0e08 	mov.w	lr, #8
      if (is_long)
  20194c:	d8ca      	bhi.n	2018e4 <chprintf.constprop.0+0x2f4>
  20194e:	7833      	ldrb	r3, [r6, #0]
  201950:	9301      	str	r3, [sp, #4]
  201952:	e7f2      	b.n	20193a <chprintf.constprop.0+0x34a>
      if (is_long)
  201954:	2b19      	cmp	r3, #25
  201956:	d92e      	bls.n	2019b6 <chprintf.constprop.0+0x3c6>
        l = va_arg(ap, int);
  201958:	6829      	ldr	r1, [r5, #0]
  20195a:	3504      	adds	r5, #4
  20195c:	7833      	ldrb	r3, [r6, #0]
      if (l < 0) {
  20195e:	2900      	cmp	r1, #0
  201960:	9301      	str	r3, [sp, #4]
  201962:	db2e      	blt.n	2019c2 <chprintf.constprop.0+0x3d2>
    p = tmpbuf;
  201964:	af03      	add	r7, sp, #12
  201966:	463a      	mov	r2, r7
  q = p + MAX_FILLER;
  201968:	f102 0b0b 	add.w	fp, r2, #11
  20196c:	4658      	mov	r0, fp
    i = (int)(l % radix);
  20196e:	4b26      	ldr	r3, [pc, #152]	; (201a08 <chprintf.constprop.0+0x418>)
  201970:	fba3 e301 	umull	lr, r3, r3, r1
  201974:	08db      	lsrs	r3, r3, #3
  201976:	eb03 0983 	add.w	r9, r3, r3, lsl #2
  20197a:	469e      	mov	lr, r3
  20197c:	eba1 0349 	sub.w	r3, r1, r9, lsl #1
  } while ((ll /= radix) != 0);
  201980:	4671      	mov	r1, lr
    i += '0';
  201982:	3330      	adds	r3, #48	; 0x30
    *--q = i;
  201984:	b2db      	uxtb	r3, r3
  201986:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
  20198a:	2900      	cmp	r1, #0
  20198c:	d1ef      	bne.n	20196e <chprintf.constprop.0+0x37e>
  i = (int)(p + MAX_FILLER - q);
  20198e:	ebab 0100 	sub.w	r1, fp, r0
  201992:	4411      	add	r1, r2
  201994:	e001      	b.n	20199a <chprintf.constprop.0+0x3aa>
  201996:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
  20199a:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
  20199e:	428a      	cmp	r2, r1
  2019a0:	d1f9      	bne.n	201996 <chprintf.constprop.0+0x3a6>
  2019a2:	1bd2      	subs	r2, r2, r7
  2019a4:	f102 39ff 	add.w	r9, r2, #4294967295
  2019a8:	e778      	b.n	20189c <chprintf.constprop.0+0x2ac>
    switch (c) {
  2019aa:	f04f 0e10 	mov.w	lr, #16
  2019ae:	e7c4      	b.n	20193a <chprintf.constprop.0+0x34a>
  2019b0:	f04f 0e10 	mov.w	lr, #16
  2019b4:	e794      	b.n	2018e0 <chprintf.constprop.0+0x2f0>
  2019b6:	7833      	ldrb	r3, [r6, #0]
  2019b8:	9301      	str	r3, [sp, #4]
        l = va_arg(ap, long);
  2019ba:	6829      	ldr	r1, [r5, #0]
  2019bc:	3504      	adds	r5, #4
      if (l < 0) {
  2019be:	2900      	cmp	r1, #0
  2019c0:	dad0      	bge.n	201964 <chprintf.constprop.0+0x374>
        *p++ = '-';
  2019c2:	f04f 032d 	mov.w	r3, #45	; 0x2d
        l = -l;
  2019c6:	4249      	negs	r1, r1
        *p++ = '-';
  2019c8:	f10d 020d 	add.w	r2, sp, #13
  2019cc:	af03      	add	r7, sp, #12
  2019ce:	f88d 300c 	strb.w	r3, [sp, #12]
  2019d2:	e7c9      	b.n	201968 <chprintf.constprop.0+0x378>
      for (p = s; *p && (--precision >= 0); p++)
  2019d4:	b19b      	cbz	r3, 2019fe <chprintf.constprop.0+0x40e>
  2019d6:	1e53      	subs	r3, r2, #1
  2019d8:	e6f7      	b.n	2017ca <chprintf.constprop.0+0x1da>
      if (precision == 0)
  2019da:	b90a      	cbnz	r2, 2019e0 <chprintf.constprop.0+0x3f0>
        precision = 32767;
  2019dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
  2019e0:	4f0a      	ldr	r7, [pc, #40]	; (201a0c <chprintf.constprop.0+0x41c>)
  2019e2:	e7f8      	b.n	2019d6 <chprintf.constprop.0+0x3e6>
        n++;
  2019e4:	9a00      	ldr	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  2019e6:	212d      	movs	r1, #45	; 0x2d
  2019e8:	f8da 3000 	ldr.w	r3, [sl]
  2019ec:	4650      	mov	r0, sl
        n++;
  2019ee:	3201      	adds	r2, #1
        streamPut(chp, (uint8_t)*s++);
  2019f0:	3701      	adds	r7, #1
  2019f2:	689b      	ldr	r3, [r3, #8]
  2019f4:	f109 39ff 	add.w	r9, r9, #4294967295
        n++;
  2019f8:	9200      	str	r2, [sp, #0]
        streamPut(chp, (uint8_t)*s++);
  2019fa:	4798      	blx	r3
  2019fc:	e702      	b.n	201804 <chprintf.constprop.0+0x214>
      for (p = s; *p && (--precision >= 0); p++)
  2019fe:	f04f 39ff 	mov.w	r9, #4294967295
  201a02:	f04f 0820 	mov.w	r8, #32
  201a06:	e6ef      	b.n	2017e8 <chprintf.constprop.0+0x1f8>
  201a08:	cccccccd 	.word	0xcccccccd
  201a0c:	0800271c 	.word	0x0800271c

00201a10 <chSchGoSleepS>:
  thread_t *otp = currp;
  201a10:	4b08      	ldr	r3, [pc, #32]	; (201a34 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  201a12:	681a      	ldr	r2, [r3, #0]
  201a14:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  201a16:	b430      	push	{r4, r5}
  otp->state = newstate;
  201a18:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  201a1c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  201a1e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  201a20:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  201a22:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  201a24:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  201a26:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  201a2a:	619a      	str	r2, [r3, #24]
}
  201a2c:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201a2e:	f7fe bc51 	b.w	2002d4 <_port_switch>
  201a32:	bf00      	nop
  201a34:	20000870 	.word	0x20000870
	...

00201a40 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != time) {
  201a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201a44:	4299      	cmp	r1, r3
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
  201a46:	b5f0      	push	{r4, r5, r6, r7, lr}
  201a48:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
  201a4a:	d031      	beq.n	201ab0 <chSchGoSleepTimeoutS+0x70>
    chVTDoSetI(&vt, time, wakeup, currp);
  201a4c:	4c1c      	ldr	r4, [pc, #112]	; (201ac0 <chSchGoSleepTimeoutS+0x80>)
  201a4e:	4607      	mov	r7, r0

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  201a50:	481c      	ldr	r0, [pc, #112]	; (201ac4 <chSchGoSleepTimeoutS+0x84>)
#else /* CH_CFG_ST_TIMEDELTA == 0 */
  /* Delta is initially equal to the specified delay.*/
  delta = delay;

  /* Pointer to the first element in the delta list.*/
  p = ch.vtlist.next;
  201a52:	69e3      	ldr	r3, [r4, #28]
  vtp->par = par;
  201a54:	69a5      	ldr	r5, [r4, #24]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  201a56:	891a      	ldrh	r2, [r3, #8]
  vtp->par = par;
  201a58:	9505      	str	r5, [sp, #20]
  while (p->delta < delta) {
  201a5a:	4291      	cmp	r1, r2
  vtp->func = vtfunc;
  201a5c:	9004      	str	r0, [sp, #16]
  while (p->delta < delta) {
  201a5e:	d905      	bls.n	201a6c <chSchGoSleepTimeoutS+0x2c>
    delta -= p->delta;
  201a60:	1a89      	subs	r1, r1, r2
    p = p->next;
  201a62:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
  201a64:	b289      	uxth	r1, r1
  while (p->delta < delta) {
  201a66:	891a      	ldrh	r2, [r3, #8]
  201a68:	428a      	cmp	r2, r1
  201a6a:	d3f9      	bcc.n	201a60 <chSchGoSleepTimeoutS+0x20>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  201a6c:	685d      	ldr	r5, [r3, #4]
  vtp->prev->next = vtp;
  201a6e:	aa01      	add	r2, sp, #4
  vtp->next = p;
  201a70:	9301      	str	r3, [sp, #4]
  vtp->delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->delta -= delta;
  ch.vtlist.delta = (systime_t)-1;
  201a72:	f64f 76ff 	movw	r6, #65535	; 0xffff
  vtp->prev = vtp->next->prev;
  201a76:	9502      	str	r5, [sp, #8]
    chSchGoSleepS(newstate);
  201a78:	4638      	mov	r0, r7
  vtp->prev->next = vtp;
  201a7a:	602a      	str	r2, [r5, #0]
  p->prev = vtp;
  201a7c:	605a      	str	r2, [r3, #4]
  vtp->delta = delta
  201a7e:	f8ad 100c 	strh.w	r1, [sp, #12]
  p->delta -= delta;
  201a82:	891a      	ldrh	r2, [r3, #8]
  201a84:	1a51      	subs	r1, r2, r1
  201a86:	8119      	strh	r1, [r3, #8]
  ch.vtlist.delta = (systime_t)-1;
  201a88:	84a6      	strh	r6, [r4, #36]	; 0x24
  201a8a:	f7ff ffc1 	bl	201a10 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  201a8e:	9b04      	ldr	r3, [sp, #16]
  201a90:	b153      	cbz	r3, 201aa8 <chSchGoSleepTimeoutS+0x68>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->next->delta += vtp->delta;
  201a92:	9b01      	ldr	r3, [sp, #4]
  201a94:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  201a98:	891a      	ldrh	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->prev->next = vtp->next;
  201a9a:	9902      	ldr	r1, [sp, #8]
  vtp->next->delta += vtp->delta;
  201a9c:	4402      	add	r2, r0
  201a9e:	811a      	strh	r2, [r3, #8]
  vtp->prev->next = vtp->next;
  201aa0:	600b      	str	r3, [r1, #0]
  vtp->next->prev = vtp->prev;
  201aa2:	9b01      	ldr	r3, [sp, #4]
  201aa4:	6059      	str	r1, [r3, #4]
  vtp->func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.delta = (systime_t)-1;
  201aa6:	84a6      	strh	r6, [r4, #36]	; 0x24
  return currp->u.rdymsg;
  201aa8:	69a3      	ldr	r3, [r4, #24]
}
  201aaa:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201aac:	b007      	add	sp, #28
  201aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201ab0:	4c03      	ldr	r4, [pc, #12]	; (201ac0 <chSchGoSleepTimeoutS+0x80>)
    chSchGoSleepS(newstate);
  201ab2:	f7ff ffad 	bl	201a10 <chSchGoSleepS>
  return currp->u.rdymsg;
  201ab6:	69a3      	ldr	r3, [r4, #24]
}
  201ab8:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201aba:	b007      	add	sp, #28
  201abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  201abe:	bf00      	nop
  201ac0:	20000870 	.word	0x20000870
  201ac4:	00201331 	.word	0x00201331
	...

00201ad0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  201ad0:	b161      	cbz	r1, 201aec <chThdEnqueueTimeoutS+0x1c>
  201ad2:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
  201ad4:	4b07      	ldr	r3, [pc, #28]	; (201af4 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201ad6:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  201ad8:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
  201ada:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  201adc:	6854      	ldr	r4, [r2, #4]
  201ade:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
  201ae2:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  201ae4:	6053      	str	r3, [r2, #4]
}
  201ae6:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201ae8:	f7ff bfaa 	b.w	201a40 <chSchGoSleepTimeoutS>
}
  201aec:	f04f 30ff 	mov.w	r0, #4294967295
  201af0:	4770      	bx	lr
  201af2:	bf00      	nop
  201af4:	20000870 	.word	0x20000870
	...

00201b00 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
  201b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201b04:	4699      	mov	r9, r3
  201b06:	b083      	sub	sp, #12
  201b08:	4604      	mov	r4, r0
  201b0a:	460e      	mov	r6, r1
  201b0c:	4615      	mov	r5, r2
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  201b0e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201b12:	2320      	movs	r3, #32
  201b14:	f383 8811 	msr	BASEPRI, r3
  return ch.vtlist.systime;
  201b18:	4b26      	ldr	r3, [pc, #152]	; (201bb4 <oqWriteTimeout+0xb4>)
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201b1a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t w = 0;
  201b1e:	2700      	movs	r7, #0
  201b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201b22:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201b26:	fa19 f383 	uxtah	r3, r9, r3
  201b2a:	b29b      	uxth	r3, r3
  201b2c:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
  201b2e:	68a3      	ldr	r3, [r4, #8]
  201b30:	b313      	cbz	r3, 201b78 <oqWriteTimeout+0x78>
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
  201b32:	6961      	ldr	r1, [r4, #20]
  201b34:	f106 0b01 	add.w	fp, r6, #1
    oqp->q_counter--;
  201b38:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201b3a:	1c48      	adds	r0, r1, #1
    oqp->q_counter--;
  201b3c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
  201b3e:	6160      	str	r0, [r4, #20]
    oqp->q_counter--;
  201b40:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201b42:	7833      	ldrb	r3, [r6, #0]
  201b44:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
  201b46:	6961      	ldr	r1, [r4, #20]
  201b48:	6923      	ldr	r3, [r4, #16]
  201b4a:	4299      	cmp	r1, r3
  201b4c:	d301      	bcc.n	201b52 <oqWriteTimeout+0x52>
      oqp->q_wrptr = oqp->q_buffer;
  201b4e:	68e3      	ldr	r3, [r4, #12]
  201b50:	6163      	str	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
  201b52:	f1b8 0f00 	cmp.w	r8, #0
  201b56:	d001      	beq.n	201b5c <oqWriteTimeout+0x5c>
      nfy(oqp);
  201b58:	4620      	mov	r0, r4
  201b5a:	47c0      	blx	r8
  201b5c:	2300      	movs	r3, #0
  201b5e:	f383 8811 	msr	BASEPRI, r3

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();

    w++;
    if (--n == 0U) {
  201b62:	3d01      	subs	r5, #1
    w++;
  201b64:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201b68:	d019      	beq.n	201b9e <oqWriteTimeout+0x9e>
  201b6a:	2320      	movs	r3, #32
  201b6c:	f383 8811 	msr	BASEPRI, r3
    while (oqIsFullI(oqp)) {
  201b70:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
  201b72:	465e      	mov	r6, fp
    while (oqIsFullI(oqp)) {
  201b74:	2b00      	cmp	r3, #0
  201b76:	d1dc      	bne.n	201b32 <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201b78:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  201b7c:	4592      	cmp	sl, r2
  201b7e:	d812      	bhi.n	201ba6 <oqWriteTimeout+0xa6>
  201b80:	4a0c      	ldr	r2, [pc, #48]	; (201bb4 <oqWriteTimeout+0xb4>)
  201b82:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201b84:	9a01      	ldr	r2, [sp, #4]
  201b86:	1a51      	subs	r1, r2, r1
  201b88:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  201b8a:	4589      	cmp	r9, r1
  201b8c:	d305      	bcc.n	201b9a <oqWriteTimeout+0x9a>
  return chThdEnqueueTimeoutS(tqp, time);
  201b8e:	4620      	mov	r0, r4
  201b90:	f7ff ff9e 	bl	201ad0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201b94:	2800      	cmp	r0, #0
  201b96:	d0ca      	beq.n	201b2e <oqWriteTimeout+0x2e>
  201b98:	2300      	movs	r3, #0
  201b9a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }

    osalSysLock();
  }
}
  201b9e:	4638      	mov	r0, r7
  201ba0:	b003      	add	sp, #12
  201ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201ba6:	4649      	mov	r1, r9
  201ba8:	4620      	mov	r0, r4
  201baa:	f7ff ff91 	bl	201ad0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201bae:	2800      	cmp	r0, #0
  201bb0:	d0bd      	beq.n	201b2e <oqWriteTimeout+0x2e>
  201bb2:	e7f1      	b.n	201b98 <oqWriteTimeout+0x98>
  201bb4:	20000870 	.word	0x20000870
	...

00201bc0 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  201bc0:	3030      	adds	r0, #48	; 0x30
  201bc2:	f7ff bf9d 	b.w	201b00 <oqWriteTimeout>
  201bc6:	bf00      	nop
	...

00201bd0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  201bd0:	3030      	adds	r0, #48	; 0x30
  201bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201bd6:	f7ff bf93 	b.w	201b00 <oqWriteTimeout>
  201bda:	bf00      	nop
  201bdc:	0000      	movs	r0, r0
	...

00201be0 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
  201be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  201be2:	4604      	mov	r4, r0
  201be4:	460f      	mov	r7, r1
  201be6:	4616      	mov	r6, r2
  201be8:	2320      	movs	r3, #32
  201bea:	f383 8811 	msr	BASEPRI, r3
  201bee:	e003      	b.n	201bf8 <oqPutTimeout+0x18>
  201bf0:	f7ff ff6e 	bl	201ad0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201bf4:	2800      	cmp	r0, #0
  201bf6:	db19      	blt.n	201c2c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  201bf8:	68a5      	ldr	r5, [r4, #8]
  201bfa:	4631      	mov	r1, r6
  201bfc:	4620      	mov	r0, r4
  201bfe:	2d00      	cmp	r5, #0
  201c00:	d0f6      	beq.n	201bf0 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  201c02:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  201c04:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201c06:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  201c08:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  201c0a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  201c0c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201c0e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  201c10:	6962      	ldr	r2, [r4, #20]
  201c12:	6923      	ldr	r3, [r4, #16]
  201c14:	429a      	cmp	r2, r3
  201c16:	d301      	bcc.n	201c1c <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  201c18:	68e3      	ldr	r3, [r4, #12]
  201c1a:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  201c1c:	69e3      	ldr	r3, [r4, #28]
  201c1e:	b10b      	cbz	r3, 201c24 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  201c20:	4620      	mov	r0, r4
  201c22:	4798      	blx	r3
  201c24:	2000      	movs	r0, #0
  201c26:	f380 8811 	msr	BASEPRI, r0
}
  201c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201c2c:	f385 8811 	msr	BASEPRI, r5
  201c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201c32:	bf00      	nop
	...

00201c40 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  201c40:	3030      	adds	r0, #48	; 0x30
  201c42:	f7ff bfcd 	b.w	201be0 <oqPutTimeout>
  201c46:	bf00      	nop
	...

00201c50 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  201c50:	3030      	adds	r0, #48	; 0x30
  201c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
  201c56:	f7ff bfc3 	b.w	201be0 <oqPutTimeout>
  201c5a:	bf00      	nop
  201c5c:	0000      	movs	r0, r0
	...

00201c60 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
  201c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201c64:	4699      	mov	r9, r3
  201c66:	b083      	sub	sp, #12
  201c68:	4604      	mov	r4, r0
  201c6a:	460e      	mov	r6, r1
  201c6c:	4615      	mov	r5, r2
  qnotify_t nfy = iqp->q_notify;
  201c6e:	f8d0 801c 	ldr.w	r8, [r0, #28]
  201c72:	2320      	movs	r3, #32
  201c74:	f383 8811 	msr	BASEPRI, r3
  201c78:	4b26      	ldr	r3, [pc, #152]	; (201d14 <iqReadTimeout+0xb4>)
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201c7a:	f109 3aff 	add.w	sl, r9, #4294967295
  size_t r = 0;
  201c7e:	2700      	movs	r7, #0
  201c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201c82:	fa1f fa8a 	uxth.w	sl, sl
  deadline = osalOsGetSystemTimeX() + timeout;
  201c86:	fa19 f383 	uxtah	r3, r9, r3
  201c8a:	b29b      	uxth	r3, r3
  201c8c:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
  201c8e:	68a3      	ldr	r3, [r4, #8]
  201c90:	b313      	cbz	r3, 201cd8 <iqReadTimeout+0x78>
    *bp++ = *iqp->q_rdptr++;
  201c92:	69a1      	ldr	r1, [r4, #24]
  201c94:	f106 0b01 	add.w	fp, r6, #1
    iqp->q_counter--;
  201c98:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201c9a:	1c48      	adds	r0, r1, #1
    iqp->q_counter--;
  201c9c:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
  201c9e:	61a0      	str	r0, [r4, #24]
    iqp->q_counter--;
  201ca0:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201ca2:	780b      	ldrb	r3, [r1, #0]
  201ca4:	7033      	strb	r3, [r6, #0]
    if (iqp->q_rdptr >= iqp->q_top) {
  201ca6:	69a1      	ldr	r1, [r4, #24]
  201ca8:	6923      	ldr	r3, [r4, #16]
  201caa:	4299      	cmp	r1, r3
  201cac:	d301      	bcc.n	201cb2 <iqReadTimeout+0x52>
      iqp->q_rdptr = iqp->q_buffer;
  201cae:	68e3      	ldr	r3, [r4, #12]
  201cb0:	61a3      	str	r3, [r4, #24]
    if (nfy != NULL) {
  201cb2:	f1b8 0f00 	cmp.w	r8, #0
  201cb6:	d001      	beq.n	201cbc <iqReadTimeout+0x5c>
      nfy(iqp);
  201cb8:	4620      	mov	r0, r4
  201cba:	47c0      	blx	r8
  201cbc:	2300      	movs	r3, #0
  201cbe:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
  201cc2:	3d01      	subs	r5, #1
    r++;
  201cc4:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
  201cc8:	d019      	beq.n	201cfe <iqReadTimeout+0x9e>
  201cca:	2320      	movs	r3, #32
  201ccc:	f383 8811 	msr	BASEPRI, r3
    while (iqIsEmptyI(iqp)) {
  201cd0:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
  201cd2:	465e      	mov	r6, fp
    while (iqIsEmptyI(iqp)) {
  201cd4:	2b00      	cmp	r3, #0
  201cd6:	d1dc      	bne.n	201c92 <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  201cd8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
  201cdc:	4592      	cmp	sl, r2
  201cde:	d812      	bhi.n	201d06 <iqReadTimeout+0xa6>
  201ce0:	4a0c      	ldr	r2, [pc, #48]	; (201d14 <iqReadTimeout+0xb4>)
  201ce2:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
  201ce4:	9a01      	ldr	r2, [sp, #4]
  201ce6:	1a51      	subs	r1, r2, r1
  201ce8:	b289      	uxth	r1, r1
        if (next_timeout > timeout) {
  201cea:	4589      	cmp	r9, r1
  201cec:	d305      	bcc.n	201cfa <iqReadTimeout+0x9a>
  201cee:	4620      	mov	r0, r4
  201cf0:	f7ff feee 	bl	201ad0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201cf4:	2800      	cmp	r0, #0
  201cf6:	d0ca      	beq.n	201c8e <iqReadTimeout+0x2e>
  201cf8:	2300      	movs	r3, #0
  201cfa:	f383 8811 	msr	BASEPRI, r3
}
  201cfe:	4638      	mov	r0, r7
  201d00:	b003      	add	sp, #12
  201d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201d06:	4649      	mov	r1, r9
  201d08:	4620      	mov	r0, r4
  201d0a:	f7ff fee1 	bl	201ad0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  201d0e:	2800      	cmp	r0, #0
  201d10:	d0bd      	beq.n	201c8e <iqReadTimeout+0x2e>
  201d12:	e7f1      	b.n	201cf8 <iqReadTimeout+0x98>
  201d14:	20000870 	.word	0x20000870
	...

00201d20 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  201d20:	300c      	adds	r0, #12
  201d22:	f7ff bf9d 	b.w	201c60 <iqReadTimeout>
  201d26:	bf00      	nop
	...

00201d30 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  201d30:	300c      	adds	r0, #12
  201d32:	f64f 73ff 	movw	r3, #65535	; 0xffff
  201d36:	f7ff bf93 	b.w	201c60 <iqReadTimeout>
  201d3a:	bf00      	nop
  201d3c:	0000      	movs	r0, r0
	...

00201d40 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
  201d40:	b570      	push	{r4, r5, r6, lr}
  201d42:	2320      	movs	r3, #32
  201d44:	4604      	mov	r4, r0
  201d46:	460e      	mov	r6, r1
  201d48:	f383 8811 	msr	BASEPRI, r3
  201d4c:	e003      	b.n	201d56 <iqGetTimeout+0x16>
  201d4e:	f7ff febf 	bl	201ad0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201d52:	2800      	cmp	r0, #0
  201d54:	db19      	blt.n	201d8a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  201d56:	68a5      	ldr	r5, [r4, #8]
  201d58:	4631      	mov	r1, r6
  201d5a:	4620      	mov	r0, r4
  201d5c:	2d00      	cmp	r5, #0
  201d5e:	d0f6      	beq.n	201d4e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  201d60:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  201d62:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201d64:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201d66:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  201d68:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201d6a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  201d6c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  201d6e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201d70:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  201d72:	d301      	bcc.n	201d78 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  201d74:	68e3      	ldr	r3, [r4, #12]
  201d76:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  201d78:	69e3      	ldr	r3, [r4, #28]
  201d7a:	b10b      	cbz	r3, 201d80 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  201d7c:	4620      	mov	r0, r4
  201d7e:	4798      	blx	r3
  201d80:	2300      	movs	r3, #0
  201d82:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  201d86:	4628      	mov	r0, r5
}
  201d88:	bd70      	pop	{r4, r5, r6, pc}
  201d8a:	f385 8811 	msr	BASEPRI, r5
  201d8e:	bd70      	pop	{r4, r5, r6, pc}

00201d90 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201d90:	300c      	adds	r0, #12
  201d92:	f7ff bfd5 	b.w	201d40 <iqGetTimeout>
  201d96:	bf00      	nop
	...

00201da0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  201da0:	300c      	adds	r0, #12
  201da2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  201da6:	f7ff bfcb 	b.w	201d40 <iqGetTimeout>
  201daa:	bf00      	nop
  201dac:	0000      	movs	r0, r0
	...

00201db0 <main>:
  tqp->next = (thread_t *)tqp;
  201db0:	4dbf      	ldr	r5, [pc, #764]	; (2020b0 <main+0x300>)
  ch.rlist.prio = NOPRIO;
  201db2:	2400      	movs	r4, #0
  ch.vtlist.delta = (systime_t)-1;
  201db4:	f64f 71ff 	movw	r1, #65535	; 0xffff
  tmp->best       = (rtcnt_t)-1;
  201db8:	f04f 32ff 	mov.w	r2, #4294967295
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201dbc:	f105 031c 	add.w	r3, r5, #28
  tmp->cumulative = (rttime_t)0;
  201dc0:	2600      	movs	r6, #0
  ch.vtlist.delta = (systime_t)-1;
  201dc2:	84a9      	strh	r1, [r5, #36]	; 0x24
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201dc4:	f64f 08ff 	movw	r8, #63743	; 0xf8ff
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  201dc8:	61eb      	str	r3, [r5, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  201dca:	622b      	str	r3, [r5, #32]
  201dcc:	602d      	str	r5, [r5, #0]
  tqp->prev = (thread_t *)tqp;
  201dce:	606d      	str	r5, [r5, #4]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  201dd0:	612d      	str	r5, [r5, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
  201dd2:	616d      	str	r5, [r5, #20]
  ch.rlist.prio = NOPRIO;
  201dd4:	60ac      	str	r4, [r5, #8]
  ch.vtlist.systime = (systime_t)0;
  201dd6:	84ec      	strh	r4, [r5, #38]	; 0x26
  ch.tm.offset = (rtcnt_t)0;
  201dd8:	672c      	str	r4, [r5, #112]	; 0x70

#endif


int main(void)
{
  201dda:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  201dde:	b089      	sub	sp, #36	; 0x24
  tmp->cumulative = (rttime_t)0;
  201de0:	2700      	movs	r7, #0
  chTMStartMeasurementX(&tm);
  201de2:	a802      	add	r0, sp, #8
  tmp->best       = (rtcnt_t)-1;
  201de4:	9202      	str	r2, [sp, #8]
  tmp->worst      = (rtcnt_t)0;
  201de6:	9403      	str	r4, [sp, #12]
  tmp->last       = (rtcnt_t)0;
  201de8:	9404      	str	r4, [sp, #16]
  tmp->n          = (ucnt_t)0;
  201dea:	9405      	str	r4, [sp, #20]
  tmp->cumulative = (rttime_t)0;
  201dec:	e9cd 6706 	strd	r6, r7, [sp, #24]
  chTMStartMeasurementX(&tm);
  201df0:	f7ff f94e 	bl	201090 <chTMStartMeasurementX.constprop.24>
  chTMStopMeasurementX(&tm);
  201df4:	a802      	add	r0, sp, #8
  201df6:	f7ff fa73 	bl	2012e0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAligned;
  201dfa:	4bae      	ldr	r3, [pc, #696]	; (2020b4 <main+0x304>)
  201dfc:	49ae      	ldr	r1, [pc, #696]	; (2020b8 <main+0x308>)
  tp->prio      = prio;
  201dfe:	f04f 0e80 	mov.w	lr, #128	; 0x80
  nextmem = __heap_base__;
  201e02:	4aae      	ldr	r2, [pc, #696]	; (2020bc <main+0x30c>)
  REG_INSERT(tp);
  201e04:	f105 062c 	add.w	r6, r5, #44	; 0x2c
  201e08:	6019      	str	r1, [r3, #0]
  tqp->next = (thread_t *)tqp;
  201e0a:	f103 0c10 	add.w	ip, r3, #16
  201e0e:	49ac      	ldr	r1, [pc, #688]	; (2020c0 <main+0x310>)
  endmem  = __heap_end__;
  201e10:	4fac      	ldr	r7, [pc, #688]	; (2020c4 <main+0x314>)
  nextmem = __heap_base__;
  201e12:	6011      	str	r1, [r2, #0]
  tp->refs      = (trefs_t)1;
  201e14:	2201      	movs	r2, #1
  endmem  = __heap_end__;
  201e16:	49ac      	ldr	r1, [pc, #688]	; (2020c8 <main+0x318>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  201e18:	f885 404d 	strb.w	r4, [r5, #77]	; 0x4d
  201e1c:	600f      	str	r7, [r1, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  201e1e:	49ab      	ldr	r1, [pc, #684]	; (2020cc <main+0x31c>)
  ch.tm.offset = tm.last;
  201e20:	9804      	ldr	r0, [sp, #16]
  201e22:	68cf      	ldr	r7, [r1, #12]
  201e24:	6728      	str	r0, [r5, #112]	; 0x70
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  201e26:	ea07 0708 	and.w	r7, r7, r8
  reg_value  =  (reg_value                                   |
  201e2a:	48a9      	ldr	r0, [pc, #676]	; (2020d0 <main+0x320>)
  tp->prio      = prio;
  201e2c:	f8c5 e034 	str.w	lr, [r5, #52]	; 0x34
  tp->realprio  = prio;
  201e30:	f8c5 e068 	str.w	lr, [r5, #104]	; 0x68
  201e34:	4338      	orrs	r0, r7
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201e36:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 20210c <main+0x35c>
  REG_INSERT(tp);
  201e3a:	696f      	ldr	r7, [r5, #20]
  tp->name      = name;
  201e3c:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 202110 <main+0x360>
  tp->epending  = (eventmask_t)0;
  201e40:	662c      	str	r4, [r5, #96]	; 0x60
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  201e42:	619c      	str	r4, [r3, #24]
  201e44:	f8c3 c010 	str.w	ip, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  201e48:	f8c3 c014 	str.w	ip, [r3, #20]
  tlp->next = (thread_t *)tlp;
  201e4c:	f105 0c54 	add.w	ip, r5, #84	; 0x54
  REG_INSERT(tp);
  201e50:	642f      	str	r7, [r5, #64]	; 0x40
  tp->refs      = (trefs_t)1;
  201e52:	f885 204e 	strb.w	r2, [r5, #78]	; 0x4e
  tp->mtxlist   = NULL;
  201e56:	666c      	str	r4, [r5, #100]	; 0x64
  REG_INSERT(tp);
  201e58:	63ed      	str	r5, [r5, #60]	; 0x3c
  tp->name      = name;
  201e5a:	f8c5 8044 	str.w	r8, [r5, #68]	; 0x44
  REG_INSERT(tp);
  201e5e:	613e      	str	r6, [r7, #16]
  tqp->next = (thread_t *)tqp;
  201e60:	f105 0758 	add.w	r7, r5, #88	; 0x58
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
  201e64:	60c8      	str	r0, [r1, #12]
  201e66:	f8de 000c 	ldr.w	r0, [lr, #12]
  H_NEXT(&default_heap.header) = NULL;
  201e6a:	609c      	str	r4, [r3, #8]
  201e6c:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  H_PAGES(&default_heap.header) = 0;
  201e70:	60dc      	str	r4, [r3, #12]
  201e72:	616e      	str	r6, [r5, #20]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  201e74:	61ae      	str	r6, [r5, #24]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  201e76:	2620      	movs	r6, #32
  tlp->next = (thread_t *)tlp;
  201e78:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
  201e7c:	f04f 0c10 	mov.w	ip, #16
  DWT->LAR = 0xC5ACCE55U;
  201e80:	4b94      	ldr	r3, [pc, #592]	; (2020d4 <main+0x324>)
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  201e82:	64ac      	str	r4, [r5, #72]	; 0x48
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  201e84:	f885 204c 	strb.w	r2, [r5, #76]	; 0x4c
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  201e88:	f8ce 000c 	str.w	r0, [lr, #12]
  DWT->LAR = 0xC5ACCE55U;
  201e8c:	4892      	ldr	r0, [pc, #584]	; (2020d8 <main+0x328>)
  tqp->next = (thread_t *)tqp;
  201e8e:	65af      	str	r7, [r5, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
  201e90:	65ef      	str	r7, [r5, #92]	; 0x5c
  201e92:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  201e96:	6818      	ldr	r0, [r3, #0]
  201e98:	4310      	orrs	r0, r2
  201e9a:	6018      	str	r0, [r3, #0]
  201e9c:	f881 c01f 	strb.w	ip, [r1, #31]
  201ea0:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  201ea4:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
  201ea8:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  201eaa:	f386 8811 	msr	BASEPRI, r6
  tp->wabase = tdp->wbase;
  201eae:	4b8b      	ldr	r3, [pc, #556]	; (2020dc <main+0x32c>)
  tp->state     = CH_STATE_WTSTART;
  201eb0:	2602      	movs	r6, #2
  REG_INSERT(tp);
  201eb2:	6969      	ldr	r1, [r5, #20]
  tp->prio      = prio;
  201eb4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201eb8:	f103 076c 	add.w	r7, r3, #108	; 0x6c
  tp->realprio  = prio;
  201ebc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  REG_INSERT(tp);
  201ec0:	f103 0090 	add.w	r0, r3, #144	; 0x90
  tp->refs      = (trefs_t)1;
  201ec4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201ec8:	4a85      	ldr	r2, [pc, #532]	; (2020e0 <main+0x330>)
  201eca:	f8df e248 	ldr.w	lr, [pc, #584]	; 202114 <main+0x364>
  201ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  tp->name      = name;
  201ed2:	4a84      	ldr	r2, [pc, #528]	; (2020e4 <main+0x334>)
  tp->state     = CH_STATE_WTSTART;
  201ed4:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
  tqp->next = (thread_t *)tqp;
  201ed8:	f103 06bc 	add.w	r6, r3, #188	; 0xbc
  REG_INSERT(tp);
  201edc:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  tp->flags     = CH_FLAG_MODE_STATIC;
  201ee0:	f883 40b1 	strb.w	r4, [r3, #177]	; 0xb1
  tp->epending  = (eventmask_t)0;
  201ee4:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201ee8:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
  tlp->next = (thread_t *)tlp;
  201eec:	f103 07b8 	add.w	r7, r3, #184	; 0xb8
  tp->name      = name;
  201ef0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201ef4:	671c      	str	r4, [r3, #112]	; 0x70
  tp->mtxlist   = NULL;
  201ef6:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
  REG_INSERT(tp);
  201efa:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  201efe:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  201f02:	f8c3 e06c 	str.w	lr, [r3, #108]	; 0x6c
  REG_INSERT(tp);
  201f06:	6108      	str	r0, [r1, #16]
  thread_t *otp = currp;
  201f08:	69aa      	ldr	r2, [r5, #24]
  ntp->u.rdymsg = msg;
  201f0a:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
  201f0e:	6891      	ldr	r1, [r2, #8]
  201f10:	6168      	str	r0, [r5, #20]
  201f12:	f8c3 70b8 	str.w	r7, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  201f16:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  201f1a:	f8c3 60c0 	str.w	r6, [r3, #192]	; 0xc0
  201f1e:	2900      	cmp	r1, #0
  201f20:	f000 824d 	beq.w	2023be <main+0x60e>
  cp = (thread_t *)&ch.rlist.queue;
  201f24:	4629      	mov	r1, r5
  tp->state = CH_STATE_READY;
  201f26:	f883 40b0 	strb.w	r4, [r3, #176]	; 0xb0
    cp = cp->queue.next;
  201f2a:	6809      	ldr	r1, [r1, #0]
  } while (cp->prio >= tp->prio);
  201f2c:	688a      	ldr	r2, [r1, #8]
  201f2e:	2a00      	cmp	r2, #0
  201f30:	d1fb      	bne.n	201f2a <main+0x17a>
  tp->queue.next             = cp;
  201f32:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
  201f36:	684c      	ldr	r4, [r1, #4]
  201f38:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
  201f3c:	6020      	str	r0, [r4, #0]
  cp->queue.prev             = tp;
  201f3e:	6048      	str	r0, [r1, #4]
  201f40:	f382 8811 	msr	BASEPRI, r2
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  201f44:	4b68      	ldr	r3, [pc, #416]	; (2020e8 <main+0x338>)
  201f46:	f04f 31ff 	mov.w	r1, #4294967295
  PWR->CR1 |= PWR_CR1_DBP;
  201f4a:	4c68      	ldr	r4, [pc, #416]	; (2020ec <main+0x33c>)
  rccResetAHB1(~0);
  201f4c:	6918      	ldr	r0, [r3, #16]
  201f4e:	6119      	str	r1, [r3, #16]
  201f50:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  201f52:	6958      	ldr	r0, [r3, #20]
  201f54:	6159      	str	r1, [r3, #20]
  201f56:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  201f58:	6a18      	ldr	r0, [r3, #32]
  201f5a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
  201f5e:	6218      	str	r0, [r3, #32]
  201f60:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  201f62:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201f64:	6259      	str	r1, [r3, #36]	; 0x24
  201f66:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  201f68:	6821      	ldr	r1, [r4, #0]
  201f6a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  201f6e:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  201f70:	6f19      	ldr	r1, [r3, #112]	; 0x70
  201f72:	f401 7140 	and.w	r1, r1, #768	; 0x300
  201f76:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  201f7a:	d003      	beq.n	201f84 <main+0x1d4>
    RCC->BDCR = RCC_BDCR_BDRST;
  201f7c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  201f80:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  201f82:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201f84:	4b58      	ldr	r3, [pc, #352]	; (2020e8 <main+0x338>)
  201f86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201f88:	4618      	mov	r0, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201f8a:	f042 0219 	orr.w	r2, r2, #25
  201f8e:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201f90:	6f03      	ldr	r3, [r0, #112]	; 0x70
  201f92:	079b      	lsls	r3, r3, #30
  201f94:	d5fc      	bpl.n	201f90 <main+0x1e0>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  201f96:	4e55      	ldr	r6, [pc, #340]	; (2020ec <main+0x33c>)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  201f98:	f240 7eff 	movw	lr, #2047	; 0x7ff
  gpiop->OTYPER  = config->otyper;
  201f9c:	2300      	movs	r3, #0
  201f9e:	4c54      	ldr	r4, [pc, #336]	; (2020f0 <main+0x340>)
  201fa0:	6871      	ldr	r1, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201fa2:	f04f 37ff 	mov.w	r7, #4294967295
  gpiop->PUPDR   = config->pupdr;
  201fa6:	f8df 8170 	ldr.w	r8, [pc, #368]	; 202118 <main+0x368>
  gpiop->AFRH    = config->afrh;
  201faa:	f44f 0930 	mov.w	r9, #11534336	; 0xb00000
  201fae:	f421 7100 	bic.w	r1, r1, #512	; 0x200
  iqp->q_buffer  = bp;
  201fb2:	f8df c168 	ldr.w	ip, [pc, #360]	; 20211c <main+0x36c>
  sdp->vmt = &vmt;
  201fb6:	4a4f      	ldr	r2, [pc, #316]	; (2020f4 <main+0x344>)
  201fb8:	6071      	str	r1, [r6, #4]
  gpiop->ODR     = config->odr;
  201fba:	f64f 71ff 	movw	r1, #65535	; 0xffff
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  201fbe:	6b06      	ldr	r6, [r0, #48]	; 0x30
  201fc0:	ea46 060e 	orr.w	r6, r6, lr
  201fc4:	6306      	str	r6, [r0, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
  201fc6:	6d06      	ldr	r6, [r0, #80]	; 0x50
  201fc8:	ea46 060e 	orr.w	r6, r6, lr
  oqp->q_buffer  = bp;
  201fcc:	f8df e150 	ldr.w	lr, [pc, #336]	; 202120 <main+0x370>
  201fd0:	6506      	str	r6, [r0, #80]	; 0x50
  gpiop->ODR     = config->odr;
  201fd2:	f64b 767e 	movw	r6, #49022	; 0xbf7e
  gpiop->OTYPER  = config->otyper;
  201fd6:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201fd8:	60a7      	str	r7, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  201fda:	f8c4 800c 	str.w	r8, [r4, #12]
  gpiop->AFRL    = config->afrl;
  201fde:	f8df 8144 	ldr.w	r8, [pc, #324]	; 202124 <main+0x374>
  gpiop->ODR     = config->odr;
  201fe2:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201fe4:	f8c4 8020 	str.w	r8, [r4, #32]
  gpiop->AFRH    = config->afrh;
  201fe8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 202128 <main+0x378>
  201fec:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201ff0:	f8df 8138 	ldr.w	r8, [pc, #312]	; 20212c <main+0x37c>
  201ff4:	f8c4 8000 	str.w	r8, [r4]
  gpiop->OSPEEDR = config->ospeedr;
  201ff8:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  gpiop->OTYPER  = config->otyper;
  201ffc:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  202000:	f8c4 7408 	str.w	r7, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  202004:	f107 478a 	add.w	r7, r7, #1157627904	; 0x45000000
  202008:	f107 1755 	add.w	r7, r7, #5570645	; 0x550055
  20200c:	f507 57a8 	add.w	r7, r7, #5376	; 0x1500
  202010:	f8c4 740c 	str.w	r7, [r4, #1036]	; 0x40c
  gpiop->MODER   = config->moder;
  202014:	4f38      	ldr	r7, [pc, #224]	; (2020f8 <main+0x348>)
  gpiop->ODR     = config->odr;
  202016:	f8c4 6414 	str.w	r6, [r4, #1044]	; 0x414
  gpiop->MODER   = config->moder;
  20201a:	f640 2608 	movw	r6, #2568	; 0xa08
  gpiop->AFRL    = config->afrl;
  20201e:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  202022:	f8c4 9424 	str.w	r9, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  202026:	f8c4 7400 	str.w	r7, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  20202a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  gpiop->PUPDR   = config->pupdr;
  20202e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 202130 <main+0x380>
  gpiop->OSPEEDR = config->ospeedr;
  202032:	f46f 1740 	mvn.w	r7, #3145728	; 0x300000
  gpiop->OTYPER  = config->otyper;
  202036:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202038:	f8c4 8008 	str.w	r8, [r4, #8]
  gpiop->AFRH    = config->afrh;
  20203c:	f04f 0877 	mov.w	r8, #119	; 0x77
  gpiop->PUPDR   = config->pupdr;
  202040:	f8c4 900c 	str.w	r9, [r4, #12]
  gpiop->AFRL    = config->afrl;
  202044:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 202134 <main+0x384>
  gpiop->ODR     = config->odr;
  202048:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  20204a:	f8c4 9020 	str.w	r9, [r4, #32]
  gpiop->AFRH    = config->afrh;
  20204e:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->PUPDR   = config->pupdr;
  202050:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 202138 <main+0x388>
  gpiop->MODER   = config->moder;
  202054:	6026      	str	r6, [r4, #0]
  202056:	f44f 2620 	mov.w	r6, #655360	; 0xa0000
  gpiop->OTYPER  = config->otyper;
  20205a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  20205e:	f8c4 7408 	str.w	r7, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  202062:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  202066:	f8c4 940c 	str.w	r9, [r4, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
  20206a:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  20206e:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  202072:	f8c4 8424 	str.w	r8, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  202076:	f04f 6808 	mov.w	r8, #142606336	; 0x8800000
  20207a:	f8c4 6400 	str.w	r6, [r4, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  20207e:	4e1f      	ldr	r6, [pc, #124]	; (2020fc <main+0x34c>)
  gpiop->OTYPER  = config->otyper;
  202080:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  202084:	f8c4 6808 	str.w	r6, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  202088:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  20208c:	4e1c      	ldr	r6, [pc, #112]	; (202100 <main+0x350>)
  gpiop->ODR     = config->odr;
  20208e:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  202092:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  202096:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  20209a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  20209e:	4c19      	ldr	r4, [pc, #100]	; (202104 <main+0x354>)
  gpiop->OTYPER  = config->otyper;
  2020a0:	6073      	str	r3, [r6, #4]
  gpiop->PUPDR   = config->pupdr;
  2020a2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 20213c <main+0x38c>
  gpiop->OSPEEDR = config->ospeedr;
  2020a6:	60b4      	str	r4, [r6, #8]
  gpiop->OTYPER  = config->otyper;
  2020a8:	4c17      	ldr	r4, [pc, #92]	; (202108 <main+0x358>)
  gpiop->PUPDR   = config->pupdr;
  2020aa:	60f7      	str	r7, [r6, #12]
  gpiop->ODR     = config->odr;
  2020ac:	6171      	str	r1, [r6, #20]
  2020ae:	e047      	b.n	202140 <main+0x390>
  2020b0:	20000870 	.word	0x20000870
  2020b4:	200009c0 	.word	0x200009c0
  2020b8:	00201151 	.word	0x00201151
  2020bc:	200009e8 	.word	0x200009e8
  2020c0:	20020000 	.word	0x20020000
  2020c4:	20080000 	.word	0x20080000
  2020c8:	200009e0 	.word	0x200009e0
  2020cc:	e000ed00 	.word	0xe000ed00
  2020d0:	05fa0300 	.word	0x05fa0300
  2020d4:	e0001000 	.word	0xe0001000
  2020d8:	c5acce55 	.word	0xc5acce55
  2020dc:	200008e8 	.word	0x200008e8
  2020e0:	002002e5 	.word	0x002002e5
  2020e4:	08002734 	.word	0x08002734
  2020e8:	40023800 	.word	0x40023800
  2020ec:	40007000 	.word	0x40007000
  2020f0:	40020000 	.word	0x40020000
  2020f4:	20000810 	.word	0x20000810
  2020f8:	18004001 	.word	0x18004001
  2020fc:	cffffff3 	.word	0xcffffff3
  202100:	40021400 	.word	0x40021400
  202104:	003fcfff 	.word	0x003fcfff
  202108:	40021800 	.word	0x40021800
  20210c:	e000edf0 	.word	0xe000edf0
  202110:	080026ec 	.word	0x080026ec
  202114:	002015d1 	.word	0x002015d1
  202118:	40005551 	.word	0x40005551
  20211c:	200009ec 	.word	0x200009ec
  202120:	200009fc 	.word	0x200009fc
  202124:	b0000bb0 	.word	0xb0000bb0
  202128:	000aaa0a 	.word	0x000aaa0a
  20212c:	2aae8028 	.word	0x2aae8028
  202130:	01555051 	.word	0x01555051
  202134:	00bb00b0 	.word	0x00bb00b0
  202138:	55505555 	.word	0x55505555
  20213c:	51155555 	.word	0x51155555
  gpiop->AFRL    = config->afrl;
  202140:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
  202142:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202144:	6033      	str	r3, [r6, #0]
  gpiop->OSPEEDR = config->ospeedr;
  202146:	4eb2      	ldr	r6, [pc, #712]	; (202410 <main+0x660>)
  gpiop->OTYPER  = config->otyper;
  202148:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20214a:	60a6      	str	r6, [r4, #8]
  20214c:	260f      	movs	r6, #15
  gpiop->PUPDR   = config->pupdr;
  20214e:	f8c4 900c 	str.w	r9, [r4, #12]
  gpiop->AFRH    = config->afrh;
  202152:	f8df 9300 	ldr.w	r9, [pc, #768]	; 202454 <main+0x6a4>
  gpiop->ODR     = config->odr;
  202156:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  202158:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  20215a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  iqp->q_top     = bp + size;
  20215e:	f10c 0910 	add.w	r9, ip, #16
  gpiop->MODER   = config->moder;
  202162:	f8c4 8000 	str.w	r8, [r4]
  gpiop->PUPDR   = config->pupdr;
  202166:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 202458 <main+0x6a8>
  gpiop->OTYPER  = config->otyper;
  20216a:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  20216e:	f8c4 6408 	str.w	r6, [r4, #1032]	; 0x408
  202172:	4616      	mov	r6, r2
  gpiop->PUPDR   = config->pupdr;
  202174:	f8c4 840c 	str.w	r8, [r4, #1036]	; 0x40c
  tqp->next = (thread_t *)tqp;
  202178:	f102 0830 	add.w	r8, r2, #48	; 0x30
  gpiop->ODR     = config->odr;
  20217c:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  202180:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  202184:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  202188:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  20218c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
  202190:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202192:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  202194:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
  202196:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  202198:	6223      	str	r3, [r4, #32]
  iqp->q_notify  = infy;
  20219a:	6293      	str	r3, [r2, #40]	; 0x28
  gpiop->AFRH    = config->afrh;
  20219c:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_link    = link;
  20219e:	62d2      	str	r2, [r2, #44]	; 0x2c
  gpiop->MODER   = config->moder;
  2021a0:	6023      	str	r3, [r4, #0]
  iqp->q_buffer  = bp;
  2021a2:	f8c2 c018 	str.w	ip, [r2, #24]
  gpiop->OTYPER  = config->otyper;
  2021a6:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  iqp->q_rdptr   = bp;
  2021aa:	f8c2 c024 	str.w	ip, [r2, #36]	; 0x24
  gpiop->OSPEEDR = config->ospeedr;
  2021ae:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
  iqp->q_wrptr   = bp;
  2021b2:	f8c2 c020 	str.w	ip, [r2, #32]
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  2021b6:	f04f 0c01 	mov.w	ip, #1
  gpiop->PUPDR   = config->pupdr;
  2021ba:	f8c4 740c 	str.w	r7, [r4, #1036]	; 0x40c
  iqp->q_top     = bp + size;
  2021be:	f8c2 901c 	str.w	r9, [r2, #28]
  2021c2:	f102 090c 	add.w	r9, r2, #12
  gpiop->ODR     = config->odr;
  2021c6:	f8c4 1414 	str.w	r1, [r4, #1044]	; 0x414
  sdp->state = SD_STOP;
  2021ca:	f882 c008 	strb.w	ip, [r2, #8]
  gpiop->AFRL    = config->afrl;
  2021ce:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  2021d2:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  2021d6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  2021da:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  2021de:	f8c2 900c 	str.w	r9, [r2, #12]
  gpiop->OSPEEDR = config->ospeedr;
  2021e2:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
  tqp->prev = (thread_t *)tqp;
  2021e6:	f8c2 9010 	str.w	r9, [r2, #16]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2021ea:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  gpiop->PUPDR   = config->pupdr;
  2021ee:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
  2021f2:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
  oqp->q_counter = size;
  2021f6:	2110      	movs	r1, #16
  gpiop->AFRL    = config->afrl;
  2021f8:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  2021fc:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  202200:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  sdp->vmt = &vmt;
  202204:	4c83      	ldr	r4, [pc, #524]	; (202414 <main+0x664>)
  GPTD5.tim = STM32_TIM5;
  202206:	4f84      	ldr	r7, [pc, #528]	; (202418 <main+0x668>)
  202208:	f846 4b04 	str.w	r4, [r6], #4
  20220c:	4c83      	ldr	r4, [pc, #524]	; (20241c <main+0x66c>)
  iqp->q_counter = 0;
  20220e:	6153      	str	r3, [r2, #20]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  202210:	6056      	str	r6, [r2, #4]
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  202212:	2607      	movs	r6, #7
  gptp->config = NULL;
  202214:	607b      	str	r3, [r7, #4]
  202216:	60fc      	str	r4, [r7, #12]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202218:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  gptp->state  = GPT_STOP;
  20221c:	f887 c000 	strb.w	ip, [r7]
  oqp->q_top     = bp + size;
  202220:	f10e 0c10 	add.w	ip, lr, #16
  tqp->next = (thread_t *)tqp;
  202224:	f8c2 8030 	str.w	r8, [r2, #48]	; 0x30
  oqp->q_counter = size;
  202228:	6391      	str	r1, [r2, #56]	; 0x38
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20222a:	497d      	ldr	r1, [pc, #500]	; (202420 <main+0x670>)
  oqp->q_buffer  = bp;
  20222c:	f8c2 e03c 	str.w	lr, [r2, #60]	; 0x3c
  tqp->prev = (thread_t *)tqp;
  202230:	f8c2 8034 	str.w	r8, [r2, #52]	; 0x34
  oqp->q_link    = link;
  202234:	6512      	str	r2, [r2, #80]	; 0x50
  202236:	f881 9352 	strb.w	r9, [r1, #850]	; 0x352
  oqp->q_rdptr   = bp;
  20223a:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20223e:	f8c1 4188 	str.w	r4, [r1, #392]	; 0x188
  oqp->q_wrptr   = bp;
  202242:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  202246:	f8df e214 	ldr.w	lr, [pc, #532]	; 20245c <main+0x6ac>
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20224a:	608c      	str	r4, [r1, #8]

#if defined(__CORE_CM0_H_GENERIC)
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
  20224c:	2480      	movs	r4, #128	; 0x80
  oqp->q_top     = bp + size;
  20224e:	f8c2 c040 	str.w	ip, [r2, #64]	; 0x40
  202252:	f841 ecec 	str.w	lr, [r1, #-236]
  SysTick->VAL = 0;
  202256:	f841 3ce8 	str.w	r3, [r1, #-232]
  20225a:	2320      	movs	r3, #32
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
  20225c:	f841 6cf0 	str.w	r6, [r1, #-240]
  oqp->q_notify  = onfy;
  202260:	4e70      	ldr	r6, [pc, #448]	; (202424 <main+0x674>)

#if STM32_SERIAL_USE_UART7
  sdObjectInit(&SD7);
  iqObjectInit(&SD7.iqueue, sd_in_buf7, sizeof sd_in_buf7, NULL, &SD7);
  oqObjectInit(&SD7.oqueue, sd_out_buf7, sizeof sd_out_buf7, notify7, &SD7);
  SD7.usart = UART7;
  202262:	4971      	ldr	r1, [pc, #452]	; (202428 <main+0x678>)
  202264:	64d6      	str	r6, [r2, #76]	; 0x4c
  202266:	6551      	str	r1, [r2, #84]	; 0x54
  SD7.clock = STM32_UART7CLK;
  202268:	4e70      	ldr	r6, [pc, #448]	; (20242c <main+0x67c>)
  20226a:	4971      	ldr	r1, [pc, #452]	; (202430 <main+0x680>)
  20226c:	6596      	str	r6, [r2, #88]	; 0x58
  20226e:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  202272:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  202276:	7a13      	ldrb	r3, [r2, #8]
  202278:	2b01      	cmp	r3, #1
  20227a:	d103      	bne.n	202284 <main+0x4d4>
      rccEnableUSART6(FALSE);
    }
#endif
#if STM32_SERIAL_USE_UART7
    if (&SD7 == sdp) {
      rccEnableUART7(FALSE);
  20227c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  20227e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  202282:	6403      	str	r3, [r0, #64]	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  202284:	6d91      	ldr	r1, [r2, #88]	; 0x58
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  202286:	f04f 0c40 	mov.w	ip, #64	; 0x40
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20228a:	486a      	ldr	r0, [pc, #424]	; (202434 <main+0x684>)
  u->CR3 = config->cr3 | USART_CR3_EIE;
  20228c:	2401      	movs	r4, #1
  USART_TypeDef *u = sdp->usart;
  20228e:	6d53      	ldr	r3, [r2, #84]	; 0x54
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  202290:	f240 1e2d 	movw	lr, #301	; 0x12d
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  202294:	fba0 0101 	umull	r0, r1, r0, r1
  sdp->state = SD_READY;
  202298:	2602      	movs	r6, #2
  u->ICR = 0xFFFFFFFFU;
  20229a:	f04f 30ff 	mov.w	r0, #4294967295
  u->BRR = (uint32_t)(sdp->clock / config->speed);
  20229e:	0c09      	lsrs	r1, r1, #16
  2022a0:	60d9      	str	r1, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  2022a2:	f8c3 c004 	str.w	ip, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  2022a6:	609c      	str	r4, [r3, #8]
  2022a8:	2400      	movs	r4, #0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  2022aa:	f8c3 e000 	str.w	lr, [r3]
  u->ICR = 0xFFFFFFFFU;
  2022ae:	6218      	str	r0, [r3, #32]
  2022b0:	7216      	strb	r6, [r2, #8]
    sdp->rxmask = 0xFF;
  2022b2:	f882 005c 	strb.w	r0, [r2, #92]	; 0x5c
  2022b6:	f384 8811 	msr	BASEPRI, r4
    chSysInit();
    halInit();

    sdStart( &SD7, &sdcfg );
    palSetPadMode( GPIOE, 8, PAL_MODE_ALTERNATE(8) );   // TX
  2022ba:	f44f 7080 	mov.w	r0, #256	; 0x100
  2022be:	f7fe feef 	bl	2010a0 <_pal_lld_setgroupmode.constprop.4>
    palSetPadMode( GPIOE, 7, PAL_MODE_ALTERNATE(8) );   // RX
  2022c2:	2080      	movs	r0, #128	; 0x80
  2022c4:	f7fe feec 	bl	2010a0 <_pal_lld_setgroupmode.constprop.4>
  2022c8:	2320      	movs	r3, #32
  2022ca:	f383 8811 	msr	BASEPRI, r3
  if (gptp->state == GPT_STOP) {
  2022ce:	783b      	ldrb	r3, [r7, #0]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  2022d0:	4a59      	ldr	r2, [pc, #356]	; (202438 <main+0x688>)
  2022d2:	2b01      	cmp	r3, #1
  2022d4:	607a      	str	r2, [r7, #4]
  2022d6:	d075      	beq.n	2023c4 <main+0x614>
  2022d8:	68bb      	ldr	r3, [r7, #8]
  2022da:	4a58      	ldr	r2, [pc, #352]	; (20243c <main+0x68c>)
  2022dc:	099b      	lsrs	r3, r3, #6
  2022de:	fba2 2303 	umull	r2, r3, r2, r3
  2022e2:	099b      	lsrs	r3, r3, #6
  2022e4:	3b01      	subs	r3, #1
  2022e6:	b29b      	uxth	r3, r3
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  2022e8:	68f9      	ldr	r1, [r7, #12]
  2022ea:	2200      	movs	r2, #0
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  2022ec:	2002      	movs	r0, #2
  2022ee:	600a      	str	r2, [r1, #0]
  gptp->tim->CR2 = gptp->config->cr2;
  2022f0:	604a      	str	r2, [r1, #4]
  2022f2:	7038      	strb	r0, [r7, #0]
  gptp->tim->PSC = psc;                         /* Prescaler value.         */
  2022f4:	628b      	str	r3, [r1, #40]	; 0x28
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  2022f6:	610a      	str	r2, [r1, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  2022f8:	60ca      	str	r2, [r1, #12]
  2022fa:	f382 8811 	msr	BASEPRI, r2
  2022fe:	f8df a160 	ldr.w	sl, [pc, #352]	; 202460 <main+0x6b0>
        chprintf( (BaseSequentialStream *)&SD7, "%d / Best time:(%d)\tWorst time:(%d)\n\r",
                          (int)var,
                          RTC2US( SYSTEM_FREQUENCY, processing_time.best ),
                          RTC2US( SYSTEM_FREQUENCY, processing_time.worst ) );
#else
        gpt_ticks = 0;
  202302:	2200      	movs	r2, #0
  202304:	2320      	movs	r3, #32
  202306:	f8ca 2000 	str.w	r2, [sl]
  20230a:	f383 8811 	msr	BASEPRI, r3
  if (NULL != gptp->config->callback)
  20230e:	6879      	ldr	r1, [r7, #4]
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  202310:	2603      	movs	r6, #3
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  202312:	68fb      	ldr	r3, [r7, #12]
  202314:	f242 7410 	movw	r4, #10000	; 0x2710
  if (NULL != gptp->config->callback)
  202318:	6849      	ldr	r1, [r1, #4]
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  20231a:	2001      	movs	r0, #1
  gptp->tim->ARR = (uint32_t)(interval);        /* Time constant.           */
  20231c:	62dc      	str	r4, [r3, #44]	; 0x2c
  20231e:	703e      	strb	r6, [r7, #0]
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  202320:	6158      	str	r0, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  202322:	625a      	str	r2, [r3, #36]	; 0x24
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  202324:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
  202326:	b111      	cbz	r1, 20232e <main+0x57e>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  202328:	68da      	ldr	r2, [r3, #12]
  20232a:	4302      	orrs	r2, r0
  20232c:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  20232e:	2185      	movs	r1, #133	; 0x85
  202330:	2200      	movs	r2, #0
  202332:	6019      	str	r1, [r3, #0]
  202334:	f382 8811 	msr	BASEPRI, r2
  202338:	4c41      	ldr	r4, [pc, #260]	; (202440 <main+0x690>)
  20233a:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
        gptStartContinuous(GPT_Timer5, period_50ms);

        float var;
        for( uint32_t g = 0; g < 40000000; g++)
  20233c:	3c01      	subs	r4, #1
  20233e:	b29b      	uxth	r3, r3
  202340:	d1fb      	bne.n	20233a <main+0x58a>
  202342:	4618      	mov	r0, r3
        {
          var = chVTGetSystemTimeX();
  202344:	f7fe fcd2 	bl	200cec <__aeabi_ui2f>
          var = var * var / var;
          var = var - 5.2;
        }

        stopPoint = gptGetCounterX(GPT_Timer5);
  202348:	68fa      	ldr	r2, [r7, #12]

        total_time = gpt_ticks + stopPoint;
  20234a:	f8da 3000 	ldr.w	r3, [sl]
          var = chVTGetSystemTimeX();
  20234e:	4680      	mov	r8, r0
        stopPoint = gptGetCounterX(GPT_Timer5);
  202350:	6a56      	ldr	r6, [r2, #36]	; 0x24
          var = var * var / var;
  202352:	4601      	mov	r1, r0
        total_time = gpt_ticks + stopPoint;
  202354:	441e      	add	r6, r3
          var = var * var / var;
  202356:	f7fe fd21 	bl	200d9c <__aeabi_fmul>
  20235a:	4641      	mov	r1, r8
  20235c:	f7fe fdd2 	bl	200f04 <__aeabi_fdiv>
          var = var - 5.2;
  202360:	f7fe f930 	bl	2005c4 <__aeabi_f2d>
  202364:	a326      	add	r3, pc, #152	; (adr r3, 202400 <main+0x650>)
  202366:	e9d3 2300 	ldrd	r2, r3, [r3]
  20236a:	f7fd ffcb 	bl	200304 <__aeabi_dsub>
  20236e:	4680      	mov	r8, r0


        chprintf( (BaseSequentialStream *)&SD7, "Time:(%d / %d) - %d\n\r",
                  (int)RTC2US( SYSTEM_FREQUENCY * 1.0, total_time ), total_time, (int)var );
  202370:	1e70      	subs	r0, r6, #1
          var = var - 5.2;
  202372:	4689      	mov	r9, r1
                  (int)RTC2US( SYSTEM_FREQUENCY * 1.0, total_time ), total_time, (int)var );
  202374:	f7fe f904 	bl	200580 <__aeabi_ui2d>
  202378:	a323      	add	r3, pc, #140	; (adr r3, 202408 <main+0x658>)
  20237a:	e9d3 2300 	ldrd	r2, r3, [r3]
  20237e:	f7fe fa9f 	bl	2008c0 <__aeabi_ddiv>
  202382:	2200      	movs	r2, #0
  202384:	4b2f      	ldr	r3, [pc, #188]	; (202444 <main+0x694>)
  202386:	f7fd ffbf 	bl	200308 <__adddf3>
        chprintf( (BaseSequentialStream *)&SD7, "Time:(%d / %d) - %d\n\r",
  20238a:	f7fe fb81 	bl	200a90 <__aeabi_d2iz>
          var = var - 5.2;
  20238e:	4649      	mov	r1, r9
        chprintf( (BaseSequentialStream *)&SD7, "Time:(%d / %d) - %d\n\r",
  202390:	4683      	mov	fp, r0
          var = var - 5.2;
  202392:	4640      	mov	r0, r8
  202394:	f7fe fba4 	bl	200ae0 <__aeabi_d2f>
        chprintf( (BaseSequentialStream *)&SD7, "Time:(%d / %d) - %d\n\r",
  202398:	f7fe fe50 	bl	20103c <__aeabi_f2iz>
  20239c:	4633      	mov	r3, r6
  20239e:	9000      	str	r0, [sp, #0]
  2023a0:	465a      	mov	r2, fp
  2023a2:	4929      	ldr	r1, [pc, #164]	; (202448 <main+0x698>)
  2023a4:	4829      	ldr	r0, [pc, #164]	; (20244c <main+0x69c>)
  2023a6:	f7ff f923 	bl	2015f0 <chprintf.constprop.0>
  2023aa:	2320      	movs	r3, #32
  2023ac:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
  2023b0:	2164      	movs	r1, #100	; 0x64
  2023b2:	2008      	movs	r0, #8
  2023b4:	f7ff fb44 	bl	201a40 <chSchGoSleepTimeoutS>
  2023b8:	f384 8811 	msr	BASEPRI, r4
  2023bc:	e7a1      	b.n	202302 <main+0x552>
  tp->state = CH_STATE_READY;
  2023be:	f882 1020 	strb.w	r1, [r2, #32]
  2023c2:	e7fe      	b.n	2023c2 <main+0x612>
      rccEnableTIM5(FALSE);
  2023c4:	4a22      	ldr	r2, [pc, #136]	; (202450 <main+0x6a0>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2023c6:	f44f 2680 	mov.w	r6, #262144	; 0x40000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2023ca:	4915      	ldr	r1, [pc, #84]	; (202420 <main+0x670>)
  2023cc:	f04f 0e70 	mov.w	lr, #112	; 0x70
  2023d0:	6c10      	ldr	r0, [r2, #64]	; 0x40
      gptp->clock = STM32_TIMCLK1;
  2023d2:	f240 231b 	movw	r3, #539	; 0x21b
  2023d6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 202464 <main+0x6b4>
      rccEnableTIM5(FALSE);
  2023da:	f040 0008 	orr.w	r0, r0, #8
  2023de:	6410      	str	r0, [r2, #64]	; 0x40
      rccResetTIM5();
  2023e0:	6a10      	ldr	r0, [r2, #32]
  2023e2:	f040 0008 	orr.w	r0, r0, #8
  2023e6:	6210      	str	r0, [r2, #32]
      gptp->clock = STM32_TIMCLK1;
  2023e8:	f8c7 c008 	str.w	ip, [r7, #8]
      rccResetTIM5();
  2023ec:	6214      	str	r4, [r2, #32]
  2023ee:	f881 e332 	strb.w	lr, [r1, #818]	; 0x332
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2023f2:	f8c1 6184 	str.w	r6, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2023f6:	604e      	str	r6, [r1, #4]
  2023f8:	e776      	b.n	2022e8 <main+0x538>
  2023fa:	bf00      	nop
  2023fc:	f3af 8000 	nop.w
  202400:	cccccccd 	.word	0xcccccccd
  202404:	4014cccc 	.word	0x4014cccc
  202408:	9999999a 	.word	0x9999999a
  20240c:	3fc99999 	.word	0x3fc99999
  202410:	3cccf000 	.word	0x3cccf000
  202414:	080027bc 	.word	0x080027bc
  202418:	20000800 	.word	0x20000800
  20241c:	40000c00 	.word	0x40000c00
  202420:	e000e100 	.word	0xe000e100
  202424:	00201141 	.word	0x00201141
  202428:	40007800 	.word	0x40007800
  20242c:	0337f980 	.word	0x0337f980
  202430:	e000ed00 	.word	0xe000ed00
  202434:	91a2b3c5 	.word	0x91a2b3c5
  202438:	08002724 	.word	0x08002724
  20243c:	053e2d63 	.word	0x053e2d63
  202440:	02625a00 	.word	0x02625a00
  202444:	3ff00000 	.word	0x3ff00000
  202448:	08002704 	.word	0x08002704
  20244c:	20000810 	.word	0x20000810
  202450:	40023800 	.word	0x40023800
  202454:	00b0b000 	.word	0x00b0b000
  202458:	55555550 	.word	0x55555550
  20245c:	00034bbf 	.word	0x00034bbf
  202460:	200009e4 	.word	0x200009e4
  202464:	066ff300 	.word	0x066ff300
	...

00202470 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
  202470:	b430      	push	{r4, r5}
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  202472:	4b33      	ldr	r3, [pc, #204]	; (202540 <__early_init+0xd0>)
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  202474:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  202478:	4a32      	ldr	r2, [pc, #200]	; (202544 <__early_init+0xd4>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20247a:	4c33      	ldr	r4, [pc, #204]	; (202548 <__early_init+0xd8>)

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20247c:	4619      	mov	r1, r3
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  20247e:	641c      	str	r4, [r3, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  202480:	6010      	str	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  202482:	681a      	ldr	r2, [r3, #0]
  202484:	f042 0201 	orr.w	r2, r2, #1
  202488:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20248a:	680b      	ldr	r3, [r1, #0]
  20248c:	079b      	lsls	r3, r3, #30
  20248e:	d5fc      	bpl.n	20248a <__early_init+0x1a>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  202490:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  202492:	4a2b      	ldr	r2, [pc, #172]	; (202540 <__early_init+0xd0>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  202494:	f023 0303 	bic.w	r3, r3, #3
  202498:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  20249a:	688b      	ldr	r3, [r1, #8]
  20249c:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  20249e:	6893      	ldr	r3, [r2, #8]
  2024a0:	f013 030c 	ands.w	r3, r3, #12
  2024a4:	d1fb      	bne.n	20249e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2024a6:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2024a8:	4925      	ldr	r1, [pc, #148]	; (202540 <__early_init+0xd0>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  2024aa:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  2024ae:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  2024b0:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  2024b2:	6813      	ldr	r3, [r2, #0]
  2024b4:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  2024b8:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  2024ba:	680b      	ldr	r3, [r1, #0]
  2024bc:	039d      	lsls	r5, r3, #14
  2024be:	d5fc      	bpl.n	2024ba <__early_init+0x4a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2024c0:	4b22      	ldr	r3, [pc, #136]	; (20254c <__early_init+0xdc>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2024c2:	4820      	ldr	r0, [pc, #128]	; (202544 <__early_init+0xd4>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  2024c4:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  2024c6:	680b      	ldr	r3, [r1, #0]
  2024c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  2024cc:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  2024ce:	6843      	ldr	r3, [r0, #4]
  2024d0:	045c      	lsls	r4, r3, #17
  2024d2:	d5fc      	bpl.n	2024ce <__early_init+0x5e>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  2024d4:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  2024d6:	4a1b      	ldr	r2, [pc, #108]	; (202544 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODEN;
  2024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2024dc:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  2024de:	6853      	ldr	r3, [r2, #4]
  2024e0:	03d9      	lsls	r1, r3, #15
  2024e2:	d5fc      	bpl.n	2024de <__early_init+0x6e>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  2024e4:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  2024e6:	4917      	ldr	r1, [pc, #92]	; (202544 <__early_init+0xd4>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  2024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  2024ec:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  2024ee:	684b      	ldr	r3, [r1, #4]
  2024f0:	039a      	lsls	r2, r3, #14
  2024f2:	d5fc      	bpl.n	2024ee <__early_init+0x7e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  2024f4:	4a12      	ldr	r2, [pc, #72]	; (202540 <__early_init+0xd0>)
  2024f6:	6813      	ldr	r3, [r2, #0]
  2024f8:	019b      	lsls	r3, r3, #6
  2024fa:	d5fc      	bpl.n	2024f6 <__early_init+0x86>
                  STM32_UART7SEL  | STM32_USART6SEL | STM32_UART5SEL  |
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  2024fc:	4b14      	ldr	r3, [pc, #80]	; (202550 <__early_init+0xe0>)
  2024fe:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  202502:	4d14      	ldr	r5, [pc, #80]	; (202554 <__early_init+0xe4>)
    RCC->DCKCFGR1 = dckcfgr1;
  202504:	f240 2402 	movw	r4, #514	; 0x202
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  202508:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  20250a:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  20250c:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMCSEL  | STM32_CK48MSEL  | STM32_CECSEL    |
  202510:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  202514:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  202516:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  202518:	4909      	ldr	r1, [pc, #36]	; (202540 <__early_init+0xd0>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  20251a:	f043 0302 	orr.w	r3, r3, #2
  20251e:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  202520:	688b      	ldr	r3, [r1, #8]
  202522:	f003 030c 	and.w	r3, r3, #12
  202526:	2b08      	cmp	r3, #8
  202528:	d1fa      	bne.n	202520 <__early_init+0xb0>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
  20252a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  20252c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  202530:	644b      	str	r3, [r1, #68]	; 0x44
  202532:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  202534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000

  stm32_clock_init();
}
  202538:	bc30      	pop	{r4, r5}
  20253a:	664b      	str	r3, [r1, #100]	; 0x64
  20253c:	4770      	bx	lr
  20253e:	bf00      	nop
  202540:	40023800 	.word	0x40023800
  202544:	40007000 	.word	0x40007000
  202548:	10000400 	.word	0x10000400
  20254c:	09406c08 	.word	0x09406c08
  202550:	40023c00 	.word	0x40023c00
  202554:	30999400 	.word	0x30999400
	...

00202560 <chThdExit>:
void chThdExit(msg_t msg) {
  202560:	b538      	push	{r3, r4, r5, lr}
  202562:	2220      	movs	r2, #32
  202564:	4603      	mov	r3, r0
  202566:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  20256a:	4a10      	ldr	r2, [pc, #64]	; (2025ac <chThdExit+0x4c>)
  20256c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  20256e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  202572:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  202574:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  202576:	4285      	cmp	r5, r0
  202578:	d006      	beq.n	202588 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  20257a:	6803      	ldr	r3, [r0, #0]
  20257c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  20257e:	f7fe ff0f 	bl	2013a0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  202582:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  202584:	42a8      	cmp	r0, r5
  202586:	d1f8      	bne.n	20257a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  202588:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  20258c:	b943      	cbnz	r3, 2025a0 <chThdExit+0x40>
  20258e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  202592:	079b      	lsls	r3, r3, #30
  202594:	d104      	bne.n	2025a0 <chThdExit+0x40>
    REG_REMOVE(tp);
  202596:	6922      	ldr	r2, [r4, #16]
  202598:	6963      	ldr	r3, [r4, #20]
  20259a:	611a      	str	r2, [r3, #16]
  20259c:	6922      	ldr	r2, [r4, #16]
  20259e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  2025a0:	200f      	movs	r0, #15
}
  2025a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  2025a6:	f7ff ba33 	b.w	201a10 <chSchGoSleepS>
  2025aa:	bf00      	nop
  2025ac:	20000870 	.word	0x20000870

002025b0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  2025b0:	4a0e      	ldr	r2, [pc, #56]	; (2025ec <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  2025b2:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  2025b4:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  2025b6:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  2025b8:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  2025ba:	2500      	movs	r5, #0
  thread_t *otp = currp;
  2025bc:	6994      	ldr	r4, [r2, #24]
  2025be:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  2025c0:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  2025c2:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  2025c6:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  2025ca:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2025cc:	6190      	str	r0, [r2, #24]
  2025ce:	e000      	b.n	2025d2 <chSchDoReschedule+0x22>
  2025d0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  2025d2:	689a      	ldr	r2, [r3, #8]
  2025d4:	4291      	cmp	r1, r2
  2025d6:	d3fb      	bcc.n	2025d0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  2025d8:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  2025da:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  2025dc:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2025de:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2025e0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2025e2:	605c      	str	r4, [r3, #4]
}
  2025e4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2025e6:	f7fd be75 	b.w	2002d4 <_port_switch>
  2025ea:	bf00      	nop
  2025ec:	20000870 	.word	0x20000870

002025f0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  2025f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  2025f2:	4f12      	ldr	r7, [pc, #72]	; (20263c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  2025f4:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  2025f6:	4d12      	ldr	r5, [pc, #72]	; (202640 <__init_ram_areas+0x50>)
  2025f8:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  2025fc:	4c11      	ldr	r4, [pc, #68]	; (202644 <__init_ram_areas+0x54>)
  2025fe:	4b12      	ldr	r3, [pc, #72]	; (202648 <__init_ram_areas+0x58>)
  202600:	4912      	ldr	r1, [pc, #72]	; (20264c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  202602:	429c      	cmp	r4, r3
  202604:	d911      	bls.n	20262a <__init_ram_areas+0x3a>
  202606:	3904      	subs	r1, #4
  202608:	461a      	mov	r2, r3
      *p = *tp;
  20260a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  20260e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  202612:	4294      	cmp	r4, r2
  202614:	d8f9      	bhi.n	20260a <__init_ram_areas+0x1a>
  202616:	43da      	mvns	r2, r3
  202618:	4414      	add	r4, r2
  20261a:	f024 0403 	bic.w	r4, r4, #3
  20261e:	3404      	adds	r4, #4
  202620:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  202622:	429d      	cmp	r5, r3
  202624:	d903      	bls.n	20262e <__init_ram_areas+0x3e>
      *p = 0;
  202626:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  20262a:	429d      	cmp	r5, r3
  20262c:	d8fb      	bhi.n	202626 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  20262e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  202630:	4577      	cmp	r7, lr
  202632:	d202      	bcs.n	20263a <__init_ram_areas+0x4a>
  202634:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  202638:	e7e3      	b.n	202602 <__init_ram_areas+0x12>
  20263a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20263c:	0800273c 	.word	0x0800273c
  202640:	20020000 	.word	0x20020000
  202644:	20020000 	.word	0x20020000
  202648:	20020000 	.word	0x20020000
  20264c:	080027dc 	.word	0x080027dc

00202650 <__default_exit>:
void __default_exit(void) {
  202650:	e7fe      	b.n	202650 <__default_exit>
  202652:	bf00      	nop
	...

00202660 <__late_init>:
void __late_init(void) {}
  202660:	4770      	bx	lr
  202662:	bf00      	nop
	...

00202670 <__core_init>:
void __core_init(void) {
  202670:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  202672:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  202676:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  20267a:	4c1b      	ldr	r4, [pc, #108]	; (2026e8 <__core_init+0x78>)
  20267c:	2200      	movs	r2, #0
  20267e:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  202682:	6963      	ldr	r3, [r4, #20]
  202684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  202688:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  20268a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  20268e:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  202692:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  202696:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  20269a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  20269e:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  2026a2:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  2026a6:	f3c3 334e 	ubfx	r3, r3, #13, #15
  2026aa:	07b7      	lsls	r7, r6, #30
  2026ac:	015d      	lsls	r5, r3, #5
  2026ae:	ea05 000e 	and.w	r0, r5, lr
  2026b2:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2026b4:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2026b6:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  2026ba:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2026bc:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  2026c0:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways--);
  2026c4:	1c53      	adds	r3, r2, #1
  2026c6:	d1f6      	bne.n	2026b6 <__core_init+0x46>
  2026c8:	3d20      	subs	r5, #32
    } while(sets--);
  2026ca:	f115 0f20 	cmn.w	r5, #32
  2026ce:	d1ee      	bne.n	2026ae <__core_init+0x3e>
  2026d0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  2026d4:	6963      	ldr	r3, [r4, #20]
  2026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2026da:	6163      	str	r3, [r4, #20]
  2026dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2026e0:	f3bf 8f6f 	isb	sy
  2026e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2026e6:	bf00      	nop
  2026e8:	e000ed00 	.word	0xe000ed00
